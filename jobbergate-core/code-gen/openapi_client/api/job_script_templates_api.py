# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictBytes, StrictStr, conint

from typing import Any, Optional, Union

from openapi_client.models.file_type import FileType
from openapi_client.models.job_template_clone_request import JobTemplateCloneRequest
from openapi_client.models.job_template_create_request import JobTemplateCreateRequest
from openapi_client.models.job_template_detailed_view import JobTemplateDetailedView
from openapi_client.models.job_template_update_request import JobTemplateUpdateRequest
from openapi_client.models.page_job_template_list_view import PageJobTemplateListView
from openapi_client.models.template_file_detailed_view import TemplateFileDetailedView
from openapi_client.models.workflow_file_detailed_view import WorkflowFileDetailedView

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class JobScriptTemplatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def job_script_template_clone_job_script_templates_clone_id_or_identifier_post(self, id_or_identifier : Any, job_template_clone_request : Optional[JobTemplateCloneRequest] = None, **kwargs) -> JobTemplateDetailedView:  # noqa: E501
        """Job Script Template Clone  # noqa: E501

        Endpoint for cloning a job script template to a new entry owned by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_clone_job_script_templates_clone_id_or_identifier_post(id_or_identifier, job_template_clone_request, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param job_template_clone_request:
        :type job_template_clone_request: JobTemplateCloneRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobTemplateDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_clone_job_script_templates_clone_id_or_identifier_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_clone_job_script_templates_clone_id_or_identifier_post_with_http_info(id_or_identifier, job_template_clone_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_clone_job_script_templates_clone_id_or_identifier_post_with_http_info(self, id_or_identifier : Any, job_template_clone_request : Optional[JobTemplateCloneRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Clone  # noqa: E501

        Endpoint for cloning a job script template to a new entry owned by the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_clone_job_script_templates_clone_id_or_identifier_post_with_http_info(id_or_identifier, job_template_clone_request, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param job_template_clone_request:
        :type job_template_clone_request: JobTemplateCloneRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobTemplateDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier',
            'job_template_clone_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_clone_job_script_templates_clone_id_or_identifier_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_template_clone_request'] is not None:
            _body_params = _params['job_template_clone_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '201': "JobTemplateDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/clone/{id_or_identifier}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_create_job_script_templates_post(self, job_template_create_request : JobTemplateCreateRequest, **kwargs) -> JobTemplateDetailedView:  # noqa: E501
        """Job Script Template Create  # noqa: E501

        Endpoint for job script template creation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_create_job_script_templates_post(job_template_create_request, async_req=True)
        >>> result = thread.get()

        :param job_template_create_request: (required)
        :type job_template_create_request: JobTemplateCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobTemplateDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_create_job_script_templates_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_create_job_script_templates_post_with_http_info(job_template_create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_create_job_script_templates_post_with_http_info(self, job_template_create_request : JobTemplateCreateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Create  # noqa: E501

        Endpoint for job script template creation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_create_job_script_templates_post_with_http_info(job_template_create_request, async_req=True)
        >>> result = thread.get()

        :param job_template_create_request: (required)
        :type job_template_create_request: JobTemplateCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobTemplateDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'job_template_create_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_create_job_script_templates_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_template_create_request'] is not None:
            _body_params = _params['job_template_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '201': "JobTemplateDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete(self, id_or_identifier : Any, file_name : StrictStr, **kwargs) -> object:  # noqa: E501
        """Job Script Template Delete File  # noqa: E501

        Endpoint to delete a file to a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete(id_or_identifier, file_name, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param file_name: (required)
        :type file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete_with_http_info(id_or_identifier, file_name, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete_with_http_info(self, id_or_identifier : Any, file_name : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Delete File  # noqa: E501

        Endpoint to delete a file to a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete_with_http_info(id_or_identifier, file_name, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param file_name: (required)
        :type file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier',
            'file_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_delete_file_job_script_templates_id_or_identifier_upload_template_file_name_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']

        if _params['file_name'] is not None:
            _path_params['file_name'] = _params['file_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}/upload/template/{file_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_delete_job_script_templates_id_or_identifier_delete(self, id_or_identifier : Any, **kwargs) -> None:  # noqa: E501
        """Job Script Template Delete  # noqa: E501

        Endpoint to delete a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_delete_job_script_templates_id_or_identifier_delete(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_delete_job_script_templates_id_or_identifier_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_delete_job_script_templates_id_or_identifier_delete_with_http_info(id_or_identifier, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_delete_job_script_templates_id_or_identifier_delete_with_http_info(self, id_or_identifier : Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Delete  # noqa: E501

        Endpoint to delete a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_delete_job_script_templates_id_or_identifier_delete_with_http_info(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id_or_identifier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_delete_job_script_templates_id_or_identifier_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete(self, **kwargs) -> object:  # noqa: E501
        """Job Script Template Garbage Collector  # noqa: E501

        Endpoint to delete all unused files from the job script template file storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Garbage Collector  # noqa: E501

        Endpoint to delete all unused files from the job script template file storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_garbage_collector_job_script_templates_upload_garbage_collector_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '202': "object",
        }

        return self.api_client.call_api(
            '/job-script-templates/upload/garbage-collector', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get(self, id_or_identifier : Any, file_name : StrictStr, **kwargs) -> object:  # noqa: E501
        """Job Script Template Get File  # noqa: E501

        Endpoint to get a file from a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get(id_or_identifier, file_name, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param file_name: (required)
        :type file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get_with_http_info(id_or_identifier, file_name, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get_with_http_info(self, id_or_identifier : Any, file_name : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Get File  # noqa: E501

        Endpoint to get a file from a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get_with_http_info(id_or_identifier, file_name, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param file_name: (required)
        :type file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier',
            'file_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_get_file_job_script_templates_id_or_identifier_upload_template_file_name_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']

        if _params['file_name'] is not None:
            _path_params['file_name'] = _params['file_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}/upload/template/{file_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_get_job_script_templates_id_or_identifier_get(self, id_or_identifier : Any, **kwargs) -> JobTemplateDetailedView:  # noqa: E501
        """Job Script Template Get  # noqa: E501

        Endpoint to return a job script template by its id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_get_job_script_templates_id_or_identifier_get(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobTemplateDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_get_job_script_templates_id_or_identifier_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_get_job_script_templates_id_or_identifier_get_with_http_info(id_or_identifier, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_get_job_script_templates_id_or_identifier_get_with_http_info(self, id_or_identifier : Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Get  # noqa: E501

        Endpoint to return a job script template by its id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_get_job_script_templates_id_or_identifier_get_with_http_info(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobTemplateDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_get_job_script_templates_id_or_identifier_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "JobTemplateDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_get_list_job_script_templates_get(self, include_null_identifier : Optional[StrictBool] = None, sort_ascending : Optional[StrictBool] = None, user_only : Optional[StrictBool] = None, search : Optional[StrictStr] = None, sort_field : Optional[StrictStr] = None, include_archived : Optional[StrictBool] = None, include_parent : Optional[StrictBool] = None, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> PageJobTemplateListView:  # noqa: E501
        """Job Script Template Get List  # noqa: E501

        Endpoint to return a list of job script templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_get_list_job_script_templates_get(include_null_identifier, sort_ascending, user_only, search, sort_field, include_archived, include_parent, page, size, async_req=True)
        >>> result = thread.get()

        :param include_null_identifier:
        :type include_null_identifier: bool
        :param sort_ascending:
        :type sort_ascending: bool
        :param user_only:
        :type user_only: bool
        :param search:
        :type search: str
        :param sort_field:
        :type sort_field: str
        :param include_archived:
        :type include_archived: bool
        :param include_parent:
        :type include_parent: bool
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageJobTemplateListView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_get_list_job_script_templates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_get_list_job_script_templates_get_with_http_info(include_null_identifier, sort_ascending, user_only, search, sort_field, include_archived, include_parent, page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_get_list_job_script_templates_get_with_http_info(self, include_null_identifier : Optional[StrictBool] = None, sort_ascending : Optional[StrictBool] = None, user_only : Optional[StrictBool] = None, search : Optional[StrictStr] = None, sort_field : Optional[StrictStr] = None, include_archived : Optional[StrictBool] = None, include_parent : Optional[StrictBool] = None, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Get List  # noqa: E501

        Endpoint to return a list of job script templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_get_list_job_script_templates_get_with_http_info(include_null_identifier, sort_ascending, user_only, search, sort_field, include_archived, include_parent, page, size, async_req=True)
        >>> result = thread.get()

        :param include_null_identifier:
        :type include_null_identifier: bool
        :param sort_ascending:
        :type sort_ascending: bool
        :param user_only:
        :type user_only: bool
        :param search:
        :type search: str
        :param sort_field:
        :type sort_field: str
        :param include_archived:
        :type include_archived: bool
        :param include_parent:
        :type include_parent: bool
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageJobTemplateListView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'include_null_identifier',
            'sort_ascending',
            'user_only',
            'search',
            'sort_field',
            'include_archived',
            'include_parent',
            'page',
            'size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_get_list_job_script_templates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('include_null_identifier') is not None:  # noqa: E501
            _query_params.append(('include_null_identifier', _params['include_null_identifier']))

        if _params.get('sort_ascending') is not None:  # noqa: E501
            _query_params.append(('sort_ascending', _params['sort_ascending']))

        if _params.get('user_only') is not None:  # noqa: E501
            _query_params.append(('user_only', _params['user_only']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('sort_field') is not None:  # noqa: E501
            _query_params.append(('sort_field', _params['sort_field']))

        if _params.get('include_archived') is not None:  # noqa: E501
            _query_params.append(('include_archived', _params['include_archived']))

        if _params.get('include_parent') is not None:  # noqa: E501
            _query_params.append(('include_parent', _params['include_parent']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "PageJobTemplateListView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_update_job_script_templates_id_or_identifier_put(self, id_or_identifier : Any, job_template_update_request : JobTemplateUpdateRequest, **kwargs) -> JobTemplateDetailedView:  # noqa: E501
        """Job Script Template Update  # noqa: E501

        Endpoint to update a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_update_job_script_templates_id_or_identifier_put(id_or_identifier, job_template_update_request, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param job_template_update_request: (required)
        :type job_template_update_request: JobTemplateUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobTemplateDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_update_job_script_templates_id_or_identifier_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_update_job_script_templates_id_or_identifier_put_with_http_info(id_or_identifier, job_template_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_update_job_script_templates_id_or_identifier_put_with_http_info(self, id_or_identifier : Any, job_template_update_request : JobTemplateUpdateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Update  # noqa: E501

        Endpoint to update a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_update_job_script_templates_id_or_identifier_put_with_http_info(id_or_identifier, job_template_update_request, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param job_template_update_request: (required)
        :type job_template_update_request: JobTemplateUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobTemplateDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier',
            'job_template_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_update_job_script_templates_id_or_identifier_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_template_update_request'] is not None:
            _body_params = _params['job_template_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "JobTemplateDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put(self, id_or_identifier : Any, file_type : FileType, upload_file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="File to upload")], **kwargs) -> TemplateFileDetailedView:  # noqa: E501
        """Job Script Template Upload File  # noqa: E501

        Endpoint to upload a file to a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put(id_or_identifier, file_type, upload_file, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param file_type: (required)
        :type file_type: FileType
        :param upload_file: File to upload (required)
        :type upload_file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TemplateFileDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put_with_http_info(id_or_identifier, file_type, upload_file, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put_with_http_info(self, id_or_identifier : Any, file_type : FileType, upload_file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="File to upload")], **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Template Upload File  # noqa: E501

        Endpoint to upload a file to a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put_with_http_info(id_or_identifier, file_type, upload_file, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param file_type: (required)
        :type file_type: FileType
        :param upload_file: File to upload (required)
        :type upload_file: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TemplateFileDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier',
            'file_type',
            'upload_file'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_template_upload_file_job_script_templates_id_or_identifier_upload_template_file_type_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']

        if _params['file_type'] is not None:
            _path_params['file_type'] = _params['file_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['upload_file'] is not None:
            _files['upload_file'] = _params['upload_file']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "TemplateFileDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}/upload/template/{file_type}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete(self, id_or_identifier : Any, **kwargs) -> object:  # noqa: E501
        """Job Script Workflow Delete File  # noqa: E501

        Endpoint to delete a workflow file from a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete_with_http_info(id_or_identifier, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete_with_http_info(self, id_or_identifier : Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Workflow Delete File  # noqa: E501

        Endpoint to delete a workflow file from a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete_with_http_info(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_workflow_delete_file_job_script_templates_id_or_identifier_upload_workflow_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}/upload/workflow', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get(self, id_or_identifier : Any, **kwargs) -> object:  # noqa: E501
        """Job Script Workflow Get File  # noqa: E501

        Endpoint to get a workflow file from a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get_with_http_info(id_or_identifier, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get_with_http_info(self, id_or_identifier : Any, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Workflow Get File  # noqa: E501

        Endpoint to get a workflow file from a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get_with_http_info(id_or_identifier, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_workflow_get_file_job_script_templates_id_or_identifier_upload_workflow_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}/upload/workflow', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put(self, id_or_identifier : Any, upload_file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="File to upload")], runtime_config : Annotated[Optional[Any], Field(description="Runtime configuration is optional when the workflow file already exists")] = None, **kwargs) -> WorkflowFileDetailedView:  # noqa: E501
        """Job Script Workflow Upload File  # noqa: E501

        Endpoint to upload a file to a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put(id_or_identifier, upload_file, runtime_config, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param upload_file: File to upload (required)
        :type upload_file: bytearray
        :param runtime_config: Runtime configuration is optional when the workflow file already exists
        :type runtime_config: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkflowFileDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put_with_http_info(id_or_identifier, upload_file, runtime_config, **kwargs)  # noqa: E501

    @validate_arguments
    def job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put_with_http_info(self, id_or_identifier : Any, upload_file : Annotated[Union[StrictBytes, StrictStr], Field(..., description="File to upload")], runtime_config : Annotated[Optional[Any], Field(description="Runtime configuration is optional when the workflow file already exists")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Script Workflow Upload File  # noqa: E501

        Endpoint to upload a file to a job script template by id or identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put_with_http_info(id_or_identifier, upload_file, runtime_config, async_req=True)
        >>> result = thread.get()

        :param id_or_identifier: (required)
        :type id_or_identifier: IdOrIdentifier
        :param upload_file: File to upload (required)
        :type upload_file: bytearray
        :param runtime_config: Runtime configuration is optional when the workflow file already exists
        :type runtime_config: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkflowFileDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_identifier',
            'upload_file',
            'runtime_config'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_script_workflow_upload_file_job_script_templates_id_or_identifier_upload_workflow_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_identifier'] is not None:
            _path_params['id_or_identifier'] = _params['id_or_identifier']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['runtime_config'] is not None:
            _form_params.append(('runtime_config', _params['runtime_config']))

        if _params['upload_file'] is not None:
            _files['upload_file'] = _params['upload_file']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "WorkflowFileDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-script-templates/{id_or_identifier}/upload/workflow', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
