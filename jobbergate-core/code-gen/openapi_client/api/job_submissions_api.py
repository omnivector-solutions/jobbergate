# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conint

from typing import Any, Optional

from openapi_client.models.job_submission_agent_rejected_request import JobSubmissionAgentRejectedRequest
from openapi_client.models.job_submission_agent_submitted_request import JobSubmissionAgentSubmittedRequest
from openapi_client.models.job_submission_agent_update_request import JobSubmissionAgentUpdateRequest
from openapi_client.models.job_submission_create_request import JobSubmissionCreateRequest
from openapi_client.models.job_submission_detailed_view import JobSubmissionDetailedView
from openapi_client.models.job_submission_update_request import JobSubmissionUpdateRequest
from openapi_client.models.page_active_job_submission import PageActiveJobSubmission
from openapi_client.models.page_job_submission_list_view import PageJobSubmissionListView
from openapi_client.models.page_pending_job_submission import PagePendingJobSubmission

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class JobSubmissionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def job_submission_agent_update_job_submissions_agent_id_put(self, id : StrictInt, job_submission_agent_update_request : JobSubmissionAgentUpdateRequest, **kwargs) -> object:  # noqa: E501
        """Job Submission Agent Update  # noqa: E501

        Endpoint for an agent to update the status of a job_submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_agent_update_job_submissions_agent_id_put(id, job_submission_agent_update_request, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param job_submission_agent_update_request: (required)
        :type job_submission_agent_update_request: JobSubmissionAgentUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submission_agent_update_job_submissions_agent_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submission_agent_update_job_submissions_agent_id_put_with_http_info(id, job_submission_agent_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submission_agent_update_job_submissions_agent_id_put_with_http_info(self, id : StrictInt, job_submission_agent_update_request : JobSubmissionAgentUpdateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submission Agent Update  # noqa: E501

        Endpoint for an agent to update the status of a job_submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_agent_update_job_submissions_agent_id_put_with_http_info(id, job_submission_agent_update_request, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param job_submission_agent_update_request: (required)
        :type job_submission_agent_update_request: JobSubmissionAgentUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'job_submission_agent_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submission_agent_update_job_submissions_agent_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_submission_agent_update_request'] is not None:
            _body_params = _params['job_submission_agent_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '202': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/agent/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submission_create_job_submissions_post(self, job_submission_create_request : JobSubmissionCreateRequest, **kwargs) -> JobSubmissionDetailedView:  # noqa: E501
        """Job Submission Create  # noqa: E501

        Endpoint for job_submission creation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_create_job_submissions_post(job_submission_create_request, async_req=True)
        >>> result = thread.get()

        :param job_submission_create_request: (required)
        :type job_submission_create_request: JobSubmissionCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobSubmissionDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submission_create_job_submissions_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submission_create_job_submissions_post_with_http_info(job_submission_create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submission_create_job_submissions_post_with_http_info(self, job_submission_create_request : JobSubmissionCreateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submission Create  # noqa: E501

        Endpoint for job_submission creation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_create_job_submissions_post_with_http_info(job_submission_create_request, async_req=True)
        >>> result = thread.get()

        :param job_submission_create_request: (required)
        :type job_submission_create_request: JobSubmissionCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobSubmissionDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'job_submission_create_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submission_create_job_submissions_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_submission_create_request'] is not None:
            _body_params = _params['job_submission_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '201': "JobSubmissionDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submission_delete_job_submissions_id_delete(self, id : Annotated[StrictInt, Field(..., description="id of the job submission to delete")], **kwargs) -> None:  # noqa: E501
        """Job Submission Delete  # noqa: E501

        Endpoint to delete job submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_delete_job_submissions_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param id: id of the job submission to delete (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submission_delete_job_submissions_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submission_delete_job_submissions_id_delete_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submission_delete_job_submissions_id_delete_with_http_info(self, id : Annotated[StrictInt, Field(..., description="id of the job submission to delete")], **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submission Delete  # noqa: E501

        Endpoint to delete job submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_delete_job_submissions_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: id of the job submission to delete (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submission_delete_job_submissions_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/job-submissions/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submission_get_job_submissions_id_get(self, id : StrictInt, **kwargs) -> JobSubmissionDetailedView:  # noqa: E501
        """Job Submission Get  # noqa: E501

        Endpoint to get a job_submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_get_job_submissions_id_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobSubmissionDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submission_get_job_submissions_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submission_get_job_submissions_id_get_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submission_get_job_submissions_id_get_with_http_info(self, id : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submission Get  # noqa: E501

        Endpoint to get a job_submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_get_job_submissions_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobSubmissionDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submission_get_job_submissions_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "JobSubmissionDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submission_get_list_job_submissions_get(self, slurm_job_ids : Annotated[Optional[StrictStr], Field(description="Comma-separated list of slurm-job-ids to match active job_submissions")] = None, submit_status : Annotated[Optional[Any], Field(description="Limit results to those with matching status")] = None, from_job_script_id : Annotated[Optional[StrictInt], Field(description="Filter job-submissions by the job-script-id they were created from.")] = None, sort_ascending : Optional[StrictBool] = None, user_only : Optional[StrictBool] = None, search : Optional[StrictStr] = None, sort_field : Optional[StrictStr] = None, include_archived : Optional[StrictBool] = None, include_parent : Optional[StrictBool] = None, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> PageJobSubmissionListView:  # noqa: E501
        """Job Submission Get List  # noqa: E501

        Endpoint to list job_submissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_get_list_job_submissions_get(slurm_job_ids, submit_status, from_job_script_id, sort_ascending, user_only, search, sort_field, include_archived, include_parent, page, size, async_req=True)
        >>> result = thread.get()

        :param slurm_job_ids: Comma-separated list of slurm-job-ids to match active job_submissions
        :type slurm_job_ids: str
        :param submit_status: Limit results to those with matching status
        :type submit_status: JobSubmissionStatus
        :param from_job_script_id: Filter job-submissions by the job-script-id they were created from.
        :type from_job_script_id: int
        :param sort_ascending:
        :type sort_ascending: bool
        :param user_only:
        :type user_only: bool
        :param search:
        :type search: str
        :param sort_field:
        :type sort_field: str
        :param include_archived:
        :type include_archived: bool
        :param include_parent:
        :type include_parent: bool
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageJobSubmissionListView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submission_get_list_job_submissions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submission_get_list_job_submissions_get_with_http_info(slurm_job_ids, submit_status, from_job_script_id, sort_ascending, user_only, search, sort_field, include_archived, include_parent, page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submission_get_list_job_submissions_get_with_http_info(self, slurm_job_ids : Annotated[Optional[StrictStr], Field(description="Comma-separated list of slurm-job-ids to match active job_submissions")] = None, submit_status : Annotated[Optional[Any], Field(description="Limit results to those with matching status")] = None, from_job_script_id : Annotated[Optional[StrictInt], Field(description="Filter job-submissions by the job-script-id they were created from.")] = None, sort_ascending : Optional[StrictBool] = None, user_only : Optional[StrictBool] = None, search : Optional[StrictStr] = None, sort_field : Optional[StrictStr] = None, include_archived : Optional[StrictBool] = None, include_parent : Optional[StrictBool] = None, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submission Get List  # noqa: E501

        Endpoint to list job_submissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_get_list_job_submissions_get_with_http_info(slurm_job_ids, submit_status, from_job_script_id, sort_ascending, user_only, search, sort_field, include_archived, include_parent, page, size, async_req=True)
        >>> result = thread.get()

        :param slurm_job_ids: Comma-separated list of slurm-job-ids to match active job_submissions
        :type slurm_job_ids: str
        :param submit_status: Limit results to those with matching status
        :type submit_status: JobSubmissionStatus
        :param from_job_script_id: Filter job-submissions by the job-script-id they were created from.
        :type from_job_script_id: int
        :param sort_ascending:
        :type sort_ascending: bool
        :param user_only:
        :type user_only: bool
        :param search:
        :type search: str
        :param sort_field:
        :type sort_field: str
        :param include_archived:
        :type include_archived: bool
        :param include_parent:
        :type include_parent: bool
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageJobSubmissionListView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slurm_job_ids',
            'submit_status',
            'from_job_script_id',
            'sort_ascending',
            'user_only',
            'search',
            'sort_field',
            'include_archived',
            'include_parent',
            'page',
            'size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submission_get_list_job_submissions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('slurm_job_ids') is not None:  # noqa: E501
            _query_params.append(('slurm_job_ids', _params['slurm_job_ids']))

        if _params.get('submit_status') is not None:  # noqa: E501
            _query_params.append(('submit_status', _params['submit_status'].value))

        if _params.get('from_job_script_id') is not None:  # noqa: E501
            _query_params.append(('from_job_script_id', _params['from_job_script_id']))

        if _params.get('sort_ascending') is not None:  # noqa: E501
            _query_params.append(('sort_ascending', _params['sort_ascending']))

        if _params.get('user_only') is not None:  # noqa: E501
            _query_params.append(('user_only', _params['user_only']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('sort_field') is not None:  # noqa: E501
            _query_params.append(('sort_field', _params['sort_field']))

        if _params.get('include_archived') is not None:  # noqa: E501
            _query_params.append(('include_archived', _params['include_archived']))

        if _params.get('include_parent') is not None:  # noqa: E501
            _query_params.append(('include_parent', _params['include_parent']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "PageJobSubmissionListView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submission_update_job_submissions_id_put(self, id : StrictInt, job_submission_update_request : JobSubmissionUpdateRequest, **kwargs) -> JobSubmissionDetailedView:  # noqa: E501
        """Job Submission Update  # noqa: E501

        Endpoint to update a job_submission given the id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_update_job_submissions_id_put(id, job_submission_update_request, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param job_submission_update_request: (required)
        :type job_submission_update_request: JobSubmissionUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: JobSubmissionDetailedView
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submission_update_job_submissions_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submission_update_job_submissions_id_put_with_http_info(id, job_submission_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submission_update_job_submissions_id_put_with_http_info(self, id : StrictInt, job_submission_update_request : JobSubmissionUpdateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submission Update  # noqa: E501

        Endpoint to update a job_submission given the id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submission_update_job_submissions_id_put_with_http_info(id, job_submission_update_request, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: int
        :param job_submission_update_request: (required)
        :type job_submission_update_request: JobSubmissionUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(JobSubmissionDetailedView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'job_submission_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submission_update_job_submissions_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_submission_update_request'] is not None:
            _body_params = _params['job_submission_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "JobSubmissionDetailedView",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submissions_agent_active_job_submissions_agent_active_get(self, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> PageActiveJobSubmission:  # noqa: E501
        """Job Submissions Agent Active  # noqa: E501

        Endpoint to list active job_submissions for the requesting client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_active_job_submissions_agent_active_get(page, size, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageActiveJobSubmission
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submissions_agent_active_job_submissions_agent_active_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submissions_agent_active_job_submissions_agent_active_get_with_http_info(page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submissions_agent_active_job_submissions_agent_active_get_with_http_info(self, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submissions Agent Active  # noqa: E501

        Endpoint to list active job_submissions for the requesting client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_active_job_submissions_agent_active_get_with_http_info(page, size, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageActiveJobSubmission, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submissions_agent_active_job_submissions_agent_active_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "PageActiveJobSubmission",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/agent/active', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submissions_agent_pending_job_submissions_agent_pending_get(self, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> PagePendingJobSubmission:  # noqa: E501
        """Job Submissions Agent Pending  # noqa: E501

        Endpoint to list pending job_submissions for the requesting client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_pending_job_submissions_agent_pending_get(page, size, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PagePendingJobSubmission
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submissions_agent_pending_job_submissions_agent_pending_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submissions_agent_pending_job_submissions_agent_pending_get_with_http_info(page, size, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submissions_agent_pending_job_submissions_agent_pending_get_with_http_info(self, page : Optional[conint(strict=True, ge=1)] = None, size : Optional[conint(strict=True, le=100, ge=1)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submissions Agent Pending  # noqa: E501

        Endpoint to list pending job_submissions for the requesting client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_pending_job_submissions_agent_pending_get_with_http_info(page, size, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: int
        :param size:
        :type size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PagePendingJobSubmission, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submissions_agent_pending_job_submissions_agent_pending_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '200': "PagePendingJobSubmission",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/agent/pending', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submissions_agent_rejected_job_submissions_agent_rejected_post(self, job_submission_agent_rejected_request : JobSubmissionAgentRejectedRequest, **kwargs) -> object:  # noqa: E501
        """Job Submissions Agent Rejected  # noqa: E501

        Endpoint to report that a pending job_submission was rejected by Slurm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_rejected_job_submissions_agent_rejected_post(job_submission_agent_rejected_request, async_req=True)
        >>> result = thread.get()

        :param job_submission_agent_rejected_request: (required)
        :type job_submission_agent_rejected_request: JobSubmissionAgentRejectedRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submissions_agent_rejected_job_submissions_agent_rejected_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submissions_agent_rejected_job_submissions_agent_rejected_post_with_http_info(job_submission_agent_rejected_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submissions_agent_rejected_job_submissions_agent_rejected_post_with_http_info(self, job_submission_agent_rejected_request : JobSubmissionAgentRejectedRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submissions Agent Rejected  # noqa: E501

        Endpoint to report that a pending job_submission was rejected by Slurm  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_rejected_job_submissions_agent_rejected_post_with_http_info(job_submission_agent_rejected_request, async_req=True)
        >>> result = thread.get()

        :param job_submission_agent_rejected_request: (required)
        :type job_submission_agent_rejected_request: JobSubmissionAgentRejectedRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'job_submission_agent_rejected_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submissions_agent_rejected_job_submissions_agent_rejected_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_submission_agent_rejected_request'] is not None:
            _body_params = _params['job_submission_agent_rejected_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '202': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/agent/rejected', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def job_submissions_agent_submitted_job_submissions_agent_submitted_post(self, job_submission_agent_submitted_request : JobSubmissionAgentSubmittedRequest, **kwargs) -> object:  # noqa: E501
        """Job Submissions Agent Submitted  # noqa: E501

        Endpoint to report that a pending job_submission was submitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_submitted_job_submissions_agent_submitted_post(job_submission_agent_submitted_request, async_req=True)
        >>> result = thread.get()

        :param job_submission_agent_submitted_request: (required)
        :type job_submission_agent_submitted_request: JobSubmissionAgentSubmittedRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the job_submissions_agent_submitted_job_submissions_agent_submitted_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.job_submissions_agent_submitted_job_submissions_agent_submitted_post_with_http_info(job_submission_agent_submitted_request, **kwargs)  # noqa: E501

    @validate_arguments
    def job_submissions_agent_submitted_job_submissions_agent_submitted_post_with_http_info(self, job_submission_agent_submitted_request : JobSubmissionAgentSubmittedRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Job Submissions Agent Submitted  # noqa: E501

        Endpoint to report that a pending job_submission was submitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.job_submissions_agent_submitted_job_submissions_agent_submitted_post_with_http_info(job_submission_agent_submitted_request, async_req=True)
        >>> result = thread.get()

        :param job_submission_agent_submitted_request: (required)
        :type job_submission_agent_submitted_request: JobSubmissionAgentSubmittedRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'job_submission_agent_submitted_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_submissions_agent_submitted_job_submissions_agent_submitted_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['job_submission_agent_submitted_request'] is not None:
            _body_params = _params['job_submission_agent_submitted_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['TokenSecurity']  # noqa: E501

        _response_types_map = {
            '202': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/job-submissions/agent/submitted', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
