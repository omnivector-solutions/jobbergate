# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.job_script_create_request import JobScriptCreateRequest
from openapi_client.models.render_from_template_request import RenderFromTemplateRequest

class BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost(BaseModel):
    """
    BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost
    """
    create_request: JobScriptCreateRequest = Field(...)
    render_request: RenderFromTemplateRequest = Field(...)
    __properties = ["create_request", "render_request"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost:
        """Create an instance of BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of create_request
        if self.create_request:
            _dict['create_request'] = self.create_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of render_request
        if self.render_request:
            _dict['render_request'] = self.render_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost:
        """Create an instance of BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost.parse_obj(obj)

        _obj = BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost.parse_obj({
            "create_request": JobScriptCreateRequest.from_dict(obj.get("create_request")) if obj.get("create_request") is not None else None,
            "render_request": RenderFromTemplateRequest.from_dict(obj.get("render_request")) if obj.get("render_request") is not None else None
        })
        return _obj


