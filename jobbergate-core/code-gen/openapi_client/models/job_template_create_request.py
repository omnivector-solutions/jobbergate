# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr

class JobTemplateCreateRequest(BaseModel):
    """
    Schema for the request to create a job template.  # noqa: E501
    """
    name: constr(strict=True, max_length=255) = Field(..., description="The unique name of the instance")
    identifier: Optional[StrictStr] = Field(None, description="A human-friendly label used for lookup on frequently accessed applications")
    description: Optional[StrictStr] = Field(None, description="A text field providing a human-friendly description of the job_script")
    template_vars: Optional[Dict[str, Any]] = Field(None, description="The template variables of the job script template")
    __properties = ["name", "identifier", "description", "template_vars"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobTemplateCreateRequest:
        """Create an instance of JobTemplateCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobTemplateCreateRequest:
        """Create an instance of JobTemplateCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobTemplateCreateRequest.parse_obj(obj)

        _obj = JobTemplateCreateRequest.parse_obj({
            "name": obj.get("name"),
            "identifier": obj.get("identifier"),
            "description": obj.get("description"),
            "template_vars": obj.get("template_vars")
        })
        return _obj


