# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.job_script_detailed_view import JobScriptDetailedView

class PendingJobSubmission(BaseModel):
    """
    Specialized model for the cluster-agent to pull pending job_submissions.  Model also includes data from its job_script and application sources.  # noqa: E501
    """
    id: StrictInt = Field(..., description="The unique database identifier for the instance")
    name: StrictStr = Field(..., description="The unique name of the job submission")
    owner_email: StrictStr = Field(..., description="The email of the owner/creator of the instance")
    execution_directory: Optional[StrictStr] = Field(None, description="The directory on the cluster where the job should be executed")
    execution_parameters: Optional[Dict[str, Any]] = Field(None, description="The parameters to be passed to the job submission. See more details at: https://slurm.schedmd.com/rest_api.html")
    job_script: JobScriptDetailedView = Field(...)
    __properties = ["id", "name", "owner_email", "execution_directory", "execution_parameters", "job_script"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PendingJobSubmission:
        """Create an instance of PendingJobSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job_script
        if self.job_script:
            _dict['job_script'] = self.job_script.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PendingJobSubmission:
        """Create an instance of PendingJobSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PendingJobSubmission.parse_obj(obj)

        _obj = PendingJobSubmission.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "owner_email": obj.get("owner_email"),
            "execution_directory": obj.get("execution_directory"),
            "execution_parameters": obj.get("execution_parameters"),
            "job_script": JobScriptDetailedView.from_dict(obj.get("job_script")) if obj.get("job_script") is not None else None
        })
        return _obj


