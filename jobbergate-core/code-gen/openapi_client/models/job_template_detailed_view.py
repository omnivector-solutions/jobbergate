# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.template_file_detailed_view import TemplateFileDetailedView
from openapi_client.models.workflow_file_detailed_view import WorkflowFileDetailedView

class JobTemplateDetailedView(BaseModel):
    """
    Schema for the request to an entry.  Notice the files default to None, as they are not always requested, to differentiate between an empty list when they are requested, but no file is found.  # noqa: E501
    """
    id: StrictInt = Field(..., description="The unique database identifier for the instance")
    name: StrictStr = Field(..., description="The unique name of the instance")
    owner_email: StrictStr = Field(..., description="The email of the owner/creator of the instance")
    created_at: datetime = Field(..., description="The timestamp for when the instance was created")
    updated_at: datetime = Field(..., description="The timestamp for when the instance was last updated")
    is_archived: StrictBool = Field(..., description="Indicates if the job script template has been archived.")
    description: Optional[StrictStr] = Field(None, description="A text field providing a human-friendly description of the job_script")
    identifier: Optional[StrictStr] = Field(None, description="A human-friendly label used for lookup on frequently accessed applications")
    cloned_from_id: Optional[StrictInt] = Field(None, description="Indicates the id this entry has been cloned from, if any.")
    template_vars: Optional[Dict[str, Any]] = Field(None, description="The template variables of the job script template")
    template_files: Optional[conlist(TemplateFileDetailedView)] = Field(None, description="The template files attached to a job script template")
    workflow_files: Optional[conlist(WorkflowFileDetailedView)] = None
    __properties = ["id", "name", "owner_email", "created_at", "updated_at", "is_archived", "description", "identifier", "cloned_from_id", "template_vars", "template_files", "workflow_files"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobTemplateDetailedView:
        """Create an instance of JobTemplateDetailedView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in template_files (list)
        _items = []
        if self.template_files:
            for _item in self.template_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['template_files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workflow_files (list)
        _items = []
        if self.workflow_files:
            for _item in self.workflow_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workflow_files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobTemplateDetailedView:
        """Create an instance of JobTemplateDetailedView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobTemplateDetailedView.parse_obj(obj)

        _obj = JobTemplateDetailedView.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "owner_email": obj.get("owner_email"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_archived": obj.get("is_archived"),
            "description": obj.get("description"),
            "identifier": obj.get("identifier"),
            "cloned_from_id": obj.get("cloned_from_id"),
            "template_vars": obj.get("template_vars"),
            "template_files": [TemplateFileDetailedView.from_dict(_item) for _item in obj.get("template_files")] if obj.get("template_files") is not None else None,
            "workflow_files": [WorkflowFileDetailedView.from_dict(_item) for _item in obj.get("workflow_files")] if obj.get("workflow_files") is not None else None
        })
        return _obj


