# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr
from openapi_client.models.job_properties import JobProperties

class JobSubmissionCreateRequest(BaseModel):
    """
    Request model for creating JobSubmission instances.  # noqa: E501
    """
    name: constr(strict=True, max_length=255) = Field(..., description="The unique name of the job submission")
    description: Optional[StrictStr] = Field(None, description="A text field providing a human-friendly description of the job_submission")
    job_script_id: conint(strict=True, ge=0) = Field(..., description="The foreign-key to the job_script from which this instance was created")
    slurm_job_id: Optional[conint(strict=True, ge=0)] = Field(None, description="The id for the slurm job executing this job_submission")
    execution_directory: Optional[StrictStr] = Field(None, description="The directory on the cluster where the job should be executed")
    client_id: Optional[StrictStr] = Field(None, description="The client_id of the cluster where this job submission should execute")
    execution_parameters: Optional[JobProperties] = Field(None, description="The parameters to be passed to the job submission. See more details at: https://slurm.schedmd.com/rest_api.html")
    __properties = ["name", "description", "job_script_id", "slurm_job_id", "execution_directory", "client_id", "execution_parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobSubmissionCreateRequest:
        """Create an instance of JobSubmissionCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of execution_parameters
        if self.execution_parameters:
            _dict['execution_parameters'] = self.execution_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobSubmissionCreateRequest:
        """Create an instance of JobSubmissionCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobSubmissionCreateRequest.parse_obj(obj)

        _obj = JobSubmissionCreateRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "job_script_id": obj.get("job_script_id"),
            "slurm_job_id": obj.get("slurm_job_id"),
            "execution_directory": obj.get("execution_directory"),
            "client_id": obj.get("client_id"),
            "execution_parameters": JobProperties.from_dict(obj.get("execution_parameters")) if obj.get("execution_parameters") is not None else None
        })
        return _obj


