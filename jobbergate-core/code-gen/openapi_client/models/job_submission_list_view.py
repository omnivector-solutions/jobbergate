# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapi_client.models.job_script_list_view import JobScriptListView
from openapi_client.models.job_submission_status import JobSubmissionStatus
from openapi_client.models.slurm_job_state import SlurmJobState

class JobSubmissionListView(BaseModel):
    """
    Partial model to match the database for the JobSubmission resource.  # noqa: E501
    """
    id: StrictInt = Field(..., description="The unique database identifier for the instance")
    name: StrictStr = Field(..., description="The unique name of the job submission")
    owner_email: StrictStr = Field(..., description="The email of the owner/creator of the instance")
    created_at: datetime = Field(..., description="The timestamp for when the instance was created")
    updated_at: datetime = Field(..., description="The timestamp for when the instance was last updated")
    is_archived: StrictBool = Field(..., description="Indicates if the job submission has been archived.")
    description: Optional[StrictStr] = Field(None, description="A text field providing a human-friendly description of the job_submission")
    job_script_id: Optional[StrictInt] = Field(None, description="The foreign-key to the job_script from which this instance was created")
    slurm_job_id: Optional[StrictInt] = Field(None, description="The id for the slurm job executing this job_submission")
    client_id: StrictStr = Field(..., description="The client_id of the cluster where this job submission should execute")
    status: JobSubmissionStatus = Field(..., description="The status of the job submission. Must be one of CREATED, SUBMITTED, REJECTED, DONE, ABORTED")
    slurm_job_state: Optional[SlurmJobState] = Field(None, description="The Slurm Job state as reported by the agent.example")
    job_script: Optional[JobScriptListView] = None
    __properties = ["id", "name", "owner_email", "created_at", "updated_at", "is_archived", "description", "job_script_id", "slurm_job_id", "client_id", "status", "slurm_job_state", "job_script"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobSubmissionListView:
        """Create an instance of JobSubmissionListView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job_script
        if self.job_script:
            _dict['job_script'] = self.job_script.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobSubmissionListView:
        """Create an instance of JobSubmissionListView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobSubmissionListView.parse_obj(obj)

        _obj = JobSubmissionListView.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "owner_email": obj.get("owner_email"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_archived": obj.get("is_archived"),
            "description": obj.get("description"),
            "job_script_id": obj.get("job_script_id"),
            "slurm_job_id": obj.get("slurm_job_id"),
            "client_id": obj.get("client_id"),
            "status": obj.get("status"),
            "slurm_job_state": obj.get("slurm_job_state"),
            "job_script": JobScriptListView.from_dict(obj.get("job_script")) if obj.get("job_script") is not None else None
        })
        return _obj


