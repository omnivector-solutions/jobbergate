# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class JobTemplateListView(BaseModel):
    """
    Schema for the response to get a list of entries.  # noqa: E501
    """
    id: StrictInt = Field(..., description="The unique database identifier for the instance")
    name: StrictStr = Field(..., description="The unique name of the instance")
    owner_email: StrictStr = Field(..., description="The email of the owner/creator of the instance")
    created_at: datetime = Field(..., description="The timestamp for when the instance was created")
    updated_at: datetime = Field(..., description="The timestamp for when the instance was last updated")
    is_archived: StrictBool = Field(..., description="Indicates if the job script template has been archived.")
    description: Optional[StrictStr] = Field(None, description="A text field providing a human-friendly description of the job_script")
    identifier: Optional[StrictStr] = Field(None, description="A human-friendly label used for lookup on frequently accessed applications")
    cloned_from_id: Optional[StrictInt] = Field(None, description="Indicates the id this entry has been cloned from, if any.")
    __properties = ["id", "name", "owner_email", "created_at", "updated_at", "is_archived", "description", "identifier", "cloned_from_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobTemplateListView:
        """Create an instance of JobTemplateListView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobTemplateListView:
        """Create an instance of JobTemplateListView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobTemplateListView.parse_obj(obj)

        _obj = JobTemplateListView.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "owner_email": obj.get("owner_email"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_archived": obj.get("is_archived"),
            "description": obj.get("description"),
            "identifier": obj.get("identifier"),
            "cloned_from_id": obj.get("cloned_from_id")
        })
        return _obj


