# coding: utf-8

"""
    Jobbergate-API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.3.0a1
    Contact: info@omnivector.solutions
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.body_job_script_create_from_template_job_scripts_render_from_template_id_or_identifier_post import BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost  # noqa: E501

class TestBodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost(unittest.TestCase):
    """BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost:
        """Test BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost`
        """
        model = BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost()  # noqa: E501
        if include_optional:
            return BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost(
                create_request = openapi_client.models.job_script_create_request.JobScriptCreateRequest(
                    name = 'test-job-script-88', 
                    description = 'This job_scripts runs an Foo job using the bar variant', ),
                render_request = openapi_client.models.render_from_template_request.RenderFromTemplateRequest(
                    template_output_name_mapping = {template.py.jinja2=template.py, support.json.jinja2=support.json}, 
                    sbatch_params = [alpha, beta, delta], 
                    param_dict = {param1=7, param2=13}, )
            )
        else:
            return BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost(
                create_request = openapi_client.models.job_script_create_request.JobScriptCreateRequest(
                    name = 'test-job-script-88', 
                    description = 'This job_scripts runs an Foo job using the bar variant', ),
                render_request = openapi_client.models.render_from_template_request.RenderFromTemplateRequest(
                    template_output_name_mapping = {template.py.jinja2=template.py, support.json.jinja2=support.json}, 
                    sbatch_params = [alpha, beta, delta], 
                    param_dict = {param1=7, param2=13}, ),
        )
        """

    def testBodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost(self):
        """Test BodyJobScriptCreateFromTemplateJobScriptsRenderFromTemplateIdOrIdentifierPost"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
