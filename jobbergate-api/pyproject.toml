[tool.poetry]
name = "jobbergate-api"
version = "4.0.1"
description = "Jobbergate API"
authors = ["Omnivector Solutions <info@omnivector.solutions>"]
license = "MIT"
readme = "README.rst"
repository = "https://github.com/omnivector-solutions/jobbergate"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Development Status :: 5 - Production/Stable",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/omnivector-solutions/jobbergate/issues"
"Changelog" = "https://github.com/omnivector-solutions/jobbergate/blob/main/jobbergate-api/CHANGELOG.rst"

[tool.poetry.dependencies]
python = "^3.11"
aioboto3 = "^11.2"
alembic = "^1.10.0"
armasec = "^1.0"
asyncpg = "^0.27.0"
bidict = "^0.22.0"
fastapi = "^0.99.0"
fastapi-pagination = "^0.12.4"
greenlet = "^2.0.1"
httpx = "^0.24.1"
inflection = "^0.5.1"
Jinja2 = "^3.1.2"
loguru = "^0.6.0"
nest-asyncio = "^1.5.7"
pendulum = "^2.1.2"
py-buzz = "^3.2.1"
pydantic = { extras = ["email"], version = "^1.10.12" }
python-dotenv = "^1.0.0"
python-multipart = "^0.0.6"
sendgrid = "^6.9.7"
sentry-sdk = "^1.29.2"
snick = "^1.3.0"
sqlalchemy = { extras = ["mypy"], version = "^2.0.19" }
uvicorn = "^0.23.0"
yarl = "^1.7.2"

[tool.poetry.group.dev.dependencies]
asgi-lifespan = "^1.0.1"
black = "^23"
coverage = { extras = ["toml"], version = "^7.2.7" }
flake8-docstrings = "^1.6.0"
ipython = "^7.31.1"
isort = "^5.9.3"
mypy = "^0.982"
nest_asyncio = "^1.3.3"
pgcli = "^3.1.0"
pre-commit = "^2.9.2"
psycopg2 = "^2.9.5"
py-docker-gadgets = "^0.1.1"
pyproject-flake8 = "^5.0.4"
pytest = "^7"
pytest-asyncio = "^0.21"
pytest-cov = "^4.0.0"
pytest-env = "^0.6.2"
pytest-random-order = "^1.0.4"
python-status = "^1.0"
requests = "^2.28.0"
respx = "^0.20.1"
typer = "^0.4.0"
types-aioboto3 = { extras = ["essential"], version = "^11.2.0" }
types-toml = "^0.10.8.7"

[tool.poetry.scripts]
dev-tools = "dev_tools:app"


[tool.black]
line-length = 110
target-versions = ["py38", "py39", "py310"]

[tool.isort]
line_length = 110
multi_line_output = 3
include_trailing_comma = true

[tool.flake8]
max_line_length = 110
exclude = "alembic/*"
ignore = "W503,D200,D106,D402"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["--random-order", "--cov=jobbergate_api"]
testpaths = ["tests"]
asyncio_mode = "auto"
env = [
    "DEPLOY_ENV = TEST",                         # Enforces that test database env vars will be used
    "ARMASEC_DOMAIN = armasec.dev",              # Must align with the rs256_domain fixture in armasec's pytest extension
    "ARMASEC_DEBUG = False",                     # Set this to True to debug armasec issues by seeing verbose logging
    "SENDGRID_FROM_EMAIL = info@pytesting.com",
    "SENDGRID_API_KEY = test-api-key",
    "AWS_ACCESS_KEY_ID = compose-s3-key",
    "AWS_SECRET_ACCESS_KEY = compose-s3-secret",
]

[tool.coverage.run]
omit = ["jobbergate_api/main.py", "jobbergate_api/safe_types.py"]
concurrency = ["greenlet", "thread"]

[tool.coverage.report]
fail_under = 90
show_missing = true

[tool.coverage.html]
show_contexts = true

[tool.mypy]
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
follow_imports = "silent"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "asyncpg.*",
    "boto3",
    "botocore.*",
    "sendgrid.*",
    "sqlalchemy",
    "toml",
    "uvicorn",
    "yaml",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[build-system]
requires = ["poetry>=1.0.0"]
build-backend = "poetry.masonry.api"
