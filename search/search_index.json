{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>An Omnivector initiative</p> <p></p>"},{"location":"#jobbergate-documentation","title":"Jobbergate Documentation","text":"<p>The following documentation provides a comprehensive overview of the Jobbergate system, detailing its purpose, installation process, and operational guidelines.</p> <p>Jobbergate serves as an advanced job templating and submission system, designed to seamlessly integrate with Slurm. This integration facilitates the efficient re-use and remote submission of job scripts to a Slurm cluster.</p> <p>At the heart of Jobbergate is its API, which acts as the pivotal control center for the entire system. This API interacts with an agent positioned alongside a Slurm cluster. This agent is responsible for establishing communication between both the Jobbergate API and the Slurm Cluster via the commands <code>sbatch</code> to submit jobs and <code>scontrol</code> to retrieve information on them. Furthermore, Jobbergate offers a Command Line Interface (CLI) to ensure users have an intuitive means of interacting with the system.</p> <p>Given that the API is cloud-based, users are granted the capability to modify jobs, dispatch them to affiliated clusters, and oversee their progress from any device with internet connectivity.</p> <p>Additionally, Jobbergate introduces a Python SDK named \"Jobbergate Core\". This SDK is equipped with tools tailored for automation and can be effortlessly integrated into any Python-based project.</p>"},{"location":"authors/","title":"Authors","text":"<p>Jobbergate is written and maintained by Omnivector, LLC. It is an open source project developed in collaboration with Scania, AB.</p>"},{"location":"authors/#attribution","title":"Attribution","text":"<p>This project began as a rewrite of the original Jobbergate project authored by Jimmy Hedman. The original provided the inspiration for an interactive tool used to gather template variable values to render jinja2 templates into Slurm job scripts.</p> <p>Building upon Jimmy's great idea, Jobbergate has grown into an entire system for managing and submitting reusable Slurm jobs, but the core idea of reusing templates combined with user input for the template values has remained the core of the project throughout its evolution.</p>"},{"location":"authors/#jobbergate-development-team","title":"Jobbergate Development Team","text":"<p>The Jobbergate project's main contributors are as follows:</p> <ul> <li>Felipe Schuch \ud83d\udce7</li> <li>James Beedy \ud83d\udce7</li> <li>Lucas Carvalho</li> <li>Matheus Tosta \ud83d\udce7</li> <li>Tucker Beck \ud83d\udce7</li> </ul>"},{"location":"authors/#get-in-touch","title":"Get in touch","text":"<p>Contact Omnivector by email</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Welcome to this step-by-step tutorial that introduces the basic functionalities of Jobbergate! to seamlessly upload a Job Script and submit it to a Slurm cluster using the Jobbergate CLI.</p> <p>In this walk-through, you will learn how to upload a Job Script and submit it to a Slurm cluster using the Jobbergate CLI. To accomplish this, we will guide you through the following steps:</p> <ul> <li>Initiating a session by logging into the Jobbergate system</li> <li>Uploading a basic Job Script to Jobbergate</li> <li>Submitting the Job Script to the cluster</li> <li>Reviewing the results and monitoring the status of your submitted job</li> <li>Cleaning up by deleting the Job Script</li> <li>Logging out of the Jobbergate system</li> </ul>"},{"location":"tutorial/#getting-started","title":"Getting Started","text":"<p>Before diving into the tutorial, there are some initial setup steps that are needed to ensure that your computer is prepared to run the tutorial locally. Make sure you have administrative access to your machine, as it's required for the setup process.</p>"},{"location":"tutorial/#install-docker-compose","title":"Install docker-compose","text":"<p>For this tutorial, we will be using an instance of Jobbergate that is deployed locally along-side a local Slurm cluster. We will set all this up using docker-compose. If you do not have it already, follow this guide to install docker-compose before you continue the tutorial.</p>"},{"location":"tutorial/#update-the-hostfile","title":"Update the hostfile","text":"<p>Next, you\u2019ll need to add the following line to your computer\u2019s hostfile:</p> <pre><code>127.0.0.1 keycloak.local\n</code></pre>"},{"location":"tutorial/#for-linux-and-osx-users","title":"For Linux and OSX users","text":"<ul> <li>The hostfile is located at <code>/etc/hosts</code>.</li> <li>Open a terminal.</li> <li> <p>Use this command to open the file in a text editor</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>Note</p> <p>You may, of course, substitute <code>nano</code> by your editor of choice</p> </li> <li> <p>Add the above line at the end of the file.</p> </li> <li>Save and close the file.</li> </ul>"},{"location":"tutorial/#for-windows-users","title":"For Windows users","text":"<ul> <li>The hostfile can be found at c:\\windows\\system32\\drivers\\etc\\hosts.</li> <li>Open Notepad as an administrator.</li> <li>Open the hostfile in Notepad.</li> <li>Append the above line to the file.</li> <li>Save and exit.</li> </ul>"},{"location":"tutorial/#clone-jobbergate-with-git","title":"Clone Jobbergate with git","text":"<p>To run the Jobbergate and Slurm locally, you will first need a copy of the Jobbergate source code. The easiest way to get it is to use Git to download the source code repository from GitHub onto your machine.</p> <p>Git is a version control system that lets you manage and keep track of your source code history. If you haven't installed it yet, download and install Git using the instructions available here.</p> <p>With Git installed, you can now clone the Jobbergate source code from its GitHub repository. Cloning allows you to have a local copy (or clone) of the source code on your machine.</p> <p>Run the following command in your terminal:</p> <pre><code>git clone git@github.com:omnivector-solutions/jobbergate.git\n</code></pre> <p>Now you have a full copy of the Jobbergate source code including the Docker Compose configuration to stand up a local Slurm Cluster and the example Job Script we will be using for this tutorial.</p> <p>Next, switch to the directory in the source code that contains the Docker Compose configuration:</p> <pre><code>cd jobbergate/jobbergate-composed\n</code></pre>"},{"location":"tutorial/#start-the-jobbergate-services","title":"Start the Jobbergate Services","text":"<p>With the Jobbergate source code in place, it's time to initiate the Jobbergate Services and the local Slurm cluster using Docker Compose. Follow the steps outlined below to get things up and running.</p>"},{"location":"tutorial/#start-up-the-services","title":"Start up the services","text":"<p>Run the following command to build and start the services. The <code>--build</code> flag ensures that Docker Compose build the images before attempting to start the services. The <code>--detach</code> flag runs the services in the background so that you can run other commands in the terminal.</p> <pre><code>docker-compose up --build --detach\n</code></pre> <p>This operation might take a few minutes as it involves building the images and starting up all the associated services.</p>"},{"location":"tutorial/#verify-the-status-of-the-services","title":"Verify the status of the services","text":"<p>To confirm that all the services are running smoothly, execute the following command. It will list the status of all the services initiated by Docker Compose:</p> <pre><code>docker-compose ps\n</code></pre> <p>If the services are up and running as expected, you should see output similar to the following, indicating that all the services are in a healthy state</p> <pre><code>NAME                                        COMMAND                  SERVICE               STATUS              PORTS\nc1                                          \"/usr/local/bin/slur\u2026\"   c1                    running             6818/tcp\nc2                                          \"/usr/local/bin/slur\u2026\"   c2                    running             6818/tcp\njobbergate-composed-cluster-agent-1         \"/agent/entrypoint.sh\"   cluster-agent         running\njobbergate-composed-db-1                    \"docker-entrypoint.s\u2026\"   db                    running             0.0.0.0:5432-&gt;5432/tcp\njobbergate-composed-jobbergate-api-1        \"/bin/sh -c /app/dev\u2026\"   jobbergate-api        running (healthy)   0.0.0.0:8000-&gt;80/tcp\njobbergate-composed-jobbergate-cli-1        \"python3\"                jobbergate-cli        exited (0)\njobbergate-composed-keycloak.local-1        \"/opt/keycloak/bin/k\u2026\"   keycloak.local        running             0.0.0.0:8080-&gt;8080/tcp, 8443/tcp\njobbergate-composed-minio-1                 \"/usr/bin/docker-ent\u2026\"   minio                 running             0.0.0.0:9000-9001-&gt;9000-9001/tcp\njobbergate-composed-minio-create-bucket-1   \"/create-bucket.sh\"      minio-create-bucket   exited (1)\nmysql                                       \"docker-entrypoint.s\u2026\"   mysql                 running             3306/tcp, 33060/tcp\nslurmctld                                   \"/usr/local/bin/slur\u2026\"   slurmctld             running             6817/tcp\nslurmdbd                                    \"/usr/local/bin/slur\u2026\"   slurmdbd              running             6819/tcp\n</code></pre> <p>The <code>STATUS</code> for each service should be \"running\" except for the <code>minio-create-bucket</code> and <code>jobbergate-cli</code> services that should be \"exited\".</p>"},{"location":"tutorial/#confirm-jobbergate-cli-availability","title":"Confirm Jobbergate CLI availability","text":"<p>Since this tutorial relies on running commands in the Jobbergate CLI, it's essential to verify that the CLI is available and working as expected at this juncture.</p> <p>First, initiate a connection to the <code>jobbergate-cli</code> container by executing the following command. This gives you direct access to the CLI.</p> <pre><code>docker-compose run jobbergate-cli bash\n</code></pre> <p>Upon successful connection, your command prompt should change to reflect that you're inside the container. It will look something like this:</p> <pre><code>root@e226a9a401d1:/app#\n</code></pre> <p>This confirms that you're now operating within the <code>jobbergate-cli</code> container environment.</p> <p>Next, we need to make sure that the Jobbergate CLI is available and accepting commands. Test this by listing the available commands in Jobbergate CLI with the <code>--help</code> option:</p> <pre><code>jobbergate --help\n</code></pre> <p>The command above will yield a detailed description of the CLI's usage and the variety of sub-commands it provides:</p> <pre><code> Usage: jobbergate [OPTIONS] COMMAND [ARGS]...\n\n Welcome to the Jobbergate CLI!\n More information can be shown for each command listed below by running it with the --help option.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --verbose               --no-verbose                                     Enable verbose logging to the terminal      \u2502\n\u2502                                                                          [default: no-verbose]                       \u2502\n\u2502 --full                  --no-full                                        Print all fields from CRUD commands         \u2502\n\u2502                                                                          [default: no-full]                          \u2502\n\u2502 --raw                   --no-raw                                         Print output from CRUD commands as raw json \u2502\n\u2502                                                                          [default: no-raw]                           \u2502\n\u2502 --version               --no-version                                     Print the version of jobbergate-cli and     \u2502\n\u2502                                                                          exit                                        \u2502\n\u2502                                                                          [default: no-version]                       \u2502\n\u2502 --install-completion                    [bash|zsh|fish|powershell|pwsh]  Install completion for the specified shell. \u2502\n\u2502                                                                          [default: None]                             \u2502\n\u2502 --show-completion                       [bash|zsh|fish|powershell|pwsh]  Show completion for the specified shell, to \u2502\n\u2502                                                                          copy it or customize the installation.      \u2502\n\u2502                                                                          [default: None]                             \u2502\n\u2502 --help                                                                   Show this message and exit.                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 applications        Commands to interact with applications                                                           \u2502\n\u2502 job-scripts         Commands to interact with job scripts                                                            \u2502\n\u2502 job-submissions     Commands to interact with job submissions                                                        \u2502\n\u2502 login               Log in to the jobbergate-cli by storing the supplied token argument in the cache.                \u2502\n\u2502 logout              Logs out of the jobbergate-cli. Clears the saved user credentials.                               \u2502\n\u2502 show-token          Show the token for the logged in user.                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorial/#log-in-to-jobbergate","title":"Log in to Jobbergate","text":"<p>To begin working with Jobbergate data, you must first sign into the system. For the purpose of this tutorial, there's just one user available. We'll solely focus on this user in this guide, but should you wish to add more users, you can do so by accessing the Keycloak server (details provided in the Appendix).</p> <p>To log in using the Jobbergate CLI, execute the following command:</p> <pre><code>jobbergate login\n</code></pre> <p>The CLI will provide a URL for you to log into your account:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Waiting for login \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                   \u2502\n\u2502   To complete login, please open the following link in a browser:                                                 \u2502\n\u2502                                                                                                                   \u2502\n\u2502     http://keycloak.local:8080/realms/jobbergate-local/device?user_code=CZAU-TZAH                                 \u2502\n\u2502                                                                                                                   \u2502\n\u2502   Waiting up to 5.0 minutes for you to complete the process...                                                    \u2502\n\u2502                                                                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nWaiting for web login... \u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   3% 0:04:50\n</code></pre> <p>Open the URL shown in a browser and log in as \"local-user\":</p> <ul> <li>username: \"local-user\"</li> <li>password: \"local\"</li> </ul> <p>When prompted, grant all the requested access privileges to the CLI. Once you have finished, the CLI will show that you have successfully logged in:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Logged in! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                   \u2502\n\u2502   User was logged in with email 'local-user@jobbergate.local'                                                     \u2502\n\u2502                                                                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>You are now logged in through the CLI! Your auth token will be cached automatically for you, so you should not need to log in again for some time. However, be aware that your session does expire; you will have to log in again to get a new token. If this happens, the CLI will alert you that your token is invalid. When you receive this notification, you will need to log in anew.</p>"},{"location":"tutorial/#upload-a-job-script-to-jobbergate","title":"Upload a Job Script to Jobbergate","text":"<p>Job Scripts are integral to Jobbergate, serving as the foundation for running simulations on our cluster. To initiate a simulation, your first task is to upload the Job Script to the Jobbergate API.</p> <p>Within each Job Script, an entrypoint file is designated. This is the specific script that Slurm executes to commence the simulation on the cluster.</p>"},{"location":"tutorial/#get-the-example-script","title":"Get the example script","text":"<p>To keep this tutorial focused on using Jobbergate and not any of the complexities of simulations or operating a cluster, we will use a very basic example job script. We will need a copy of this script where the <code>jobbergate-cli</code> can access it. Since it's a small script, we can just copy/paste it into the container where we are accessing the <code>jobbergate-cli</code>.</p> <p>In the terminal where you were typing jobbergate commands, enter this command:</p> <pre><code>cat &gt; simple-job-script.py\n</code></pre> <p>Paste the contents of the job script and then press <code>ctrl-d</code> on your keyboard. This will create a saved copy of the job script that's ready to submit with the <code>jobbergate-cli</code>. To ensure that the command sequence captured the intended script contents, execute the following command to review the job script:</p> <pre><code>cat simple-job-script.python3\n</code></pre> <p>The script should appear exactly as you see it on the link above.</p>"},{"location":"tutorial/#create-the-job-script-from-the-example","title":"Create the Job Script from the example","text":"<p>Now it's time to create a Job Script entry within the Jobbergate system. We'll use the <code>create</code> subcommand associated with the <code>job-scripts</code> command. To view all the options that come with this sub-command, you can use the <code>--help</code> option:</p> <pre><code>jobbergate job-scripts create --help\n</code></pre> <p>Now, let's create the Job Script. In your terminal, type:</p> <pre><code>jobbergate job-scripts create --name=tutorial --job-script-path=simple-job-script.py\n</code></pre> <p>You should see output like this indicating that the Job Script was successfully created:</p> <pre><code>                 Created Job Script\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key            \u2503 Value                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id             \u2502 1                                \u2502\n\u2502 application_id \u2502 None                             \u2502\n\u2502 name           \u2502 tutorial                         \u2502\n\u2502 description    \u2502                                  \u2502\n\u2502 owner_email    \u2502 local-user@jobbergate.local-mail \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Great, your Job Script is now prepared and ready for submission to the cluster!</p> <p>Note</p> <p>Keep track of the <code>id</code> value produced by your command. The tutorial text assumes that it is \"1\", but it may be different if you have done the tutorial before or had to restart!</p> <p>To confirm that the Job Script has been uploaded correctly, you can review the file content using the <code>show-files</code> subcommand:</p> <pre><code>jobbergate job-scripts show-files --id=1\n</code></pre> <p>The file should appear exactly as it does on the link above.</p>"},{"location":"tutorial/#submit-a-job-script-to-the-cluster","title":"Submit a Job Script to the cluster","text":"<p>With the Job Script ready, the next step is to submit it to the Slurm cluster. In this tutorial, a cluster named <code>local-slurm</code> is already attached and available for use. We will specify this cluster name when submitting the Job Script to ensure it is executed on the appropriate cluster.</p>"},{"location":"tutorial/#create-the-job-submission","title":"Create the Job Submission","text":"<p>We will use the <code>create</code> subcommand of the <code>job-submissions</code> command to submit the job to the cluster. To see all the options available for this command, we can use the <code>--help</code> option again:</p> <pre><code>jobbergate job-submissions create --help\n</code></pre> <p>For the tutorial, we need to issue the following command:</p> <pre><code>jobbergate job-submissions create --name=tutorial --job-script-id=1 --cluster-name=local-slurm --execution-directory=/nfs\n</code></pre> <p>The command should produce output that looks like this:</p> <pre><code>                   Created Job Submission\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key                        \u2503 Value                       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id                         \u2502 1                           \u2502\n\u2502 job_script_id              \u2502 1                           \u2502\n\u2502 client_id                  \u2502 local-slurm                 \u2502\n\u2502 slurm_job_id               \u2502 None                        \u2502\n\u2502 execution_directory        \u2502 None                        \u2502\n\u2502 job_submission_name        \u2502 tutorial                    \u2502\n\u2502 job_submission_description \u2502 None                        \u2502\n\u2502 job_submission_owner_email \u2502 local-user@jobbergate.local \u2502\n\u2502 status                     \u2502 CREATED                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Info</p> <p>The Job Submission was successfully created! However, it has not submitted to the cluster yet, and thus <code>slurm_job_id</code> is still <code>None</code>. This will happen when the Jobbergate Agent that is running remotely in the cluster pulls all \"CREATED\" Job Submissions down from the API and submits them to Slurm one by one.</p> <p>Note</p> <p>Again, be careful to use the correct <code>id</code> produced by this command for the remainder of the tutorial!</p> <p>Note</p> <p>The <code>exeuction-directory</code> parameter must be set for jobs that will be sumbitted remotely because it defaults to the current working directory wherever you run jobbergate-cli. Chances are that you are running in a directory that does not exists on the compute nodes of whatever cluster you are submitting to. Thus, you should choose a directory that you know exists on the cluster. For the jobbergate-composed cluster, we know that <code>/nfs</code> exists and is writable.</p>"},{"location":"tutorial/#check-the-status-of-the-submitted-job","title":"Check the status of the submitted job","text":"<p>We can look up the status of a Job Submission using the following command:</p> <pre><code>jobbergate job-submissions get-one --id=1\n</code></pre> <p>This command should produce output that looks like:</p> <pre><code>                       Job Submission\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key                        \u2503 Value                       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id                         \u2502 1                           \u2502\n\u2502 job_script_id              \u2502 1                           \u2502\n\u2502 client_id                  \u2502 local-slurm                 \u2502\n\u2502 slurm_job_id               \u2502 1                           \u2502\n\u2502 slurm_job_state            \u2502 RUNNING                     \u2502\n\u2502 execution_directory        \u2502 None                        \u2502\n\u2502 job_submission_name        \u2502 tutorial                    \u2502\n\u2502 job_submission_description \u2502 None                        \u2502\n\u2502 job_submission_owner_email \u2502 local-user@jobbergate.local \u2502\n\u2502 status                     \u2502 SUBMITTED                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>If the <code>status</code> reported by your command is <code>CREATED</code>, don't worry! The Jobbergate Agent just hasn't retrieved and submitted the job script yet. Wait a few more seconds and try again. You should now see the status change to <code>SUBMITTED</code>.</p> <p>When the Job Submission status shifts to <code>SUBMITTED</code>, it indicates that the Jobbergate Agent has retrieved the Job Script and submitted it to the <code>local-slurm</code> cluster. This status will persist until the completion of the Job Script's execution. The Jobbergate Agent continuously monitors the job's progress within slurm, and, upon its completion, will update the Job Submission status to <code>COMPLETE</code>.</p>"},{"location":"tutorial/#check-the-results-of-the-job","title":"Check the results of the job","text":"<p>In this tutorial, we have locally mounted a \"fake\" NFS folder to contain the output from the job running in slurm. When the job finishes running, it will produce an output file in this folder. First we need to verify that the file was produced by listing the contents of the <code>nfs</code> directory:</p> <pre><code>ls /nfs\n</code></pre> <p>If the job completed, you should see a file in the <code>/nfs</code> directory named <code>simple-output.txt</code>. Check the contents of the file with a simple <code>cat</code> command:</p> <pre><code>cat /nfs/simple-output.txt\n</code></pre> <p>It should look look like:</p> <pre><code>Simple output from c1\n</code></pre> <p>It's possible that the output says it came from c2 if slurm ran the job on the <code>c2</code> compute node instead of <code>c1</code>.</p>"},{"location":"tutorial/#delete-the-resources","title":"Delete the resources","text":"<p>Sometimes it is useful to remove resources that have been created in Jobbergate.</p> <p>For instance, start by deleting the Job Submission:</p> <pre><code>$ jobbergate job-submissions delete --id=1\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Job submission delete succeeded \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                   \u2502\n\u2502   The job submission was successfully deleted.                                                                    \u2502\n\u2502                                                                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Then delete the Job Script:</p> <pre><code>$ jobbergate job-scripts delete --id=1\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Job script delete succeeded \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                   \u2502\n\u2502   The job script was successfully deleted.                                                                        \u2502\n\u2502                                                                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorial/#log-out-of-the-jobbergate-system","title":"Log out of the Jobbergate system","text":"<p>You have completed the tutorial. Try logging out of Jobbergate now:</p> <pre><code>$ jobbergate logout\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Logged out \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                   \u2502\n\u2502   User was logged out.                                                                                            \u2502\n\u2502                                                                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>This will clear any cached tokens, and any subsequent Jobbergate commands will require you to log in again.</p>"},{"location":"tutorial/#appendix","title":"Appendix","text":""},{"location":"tutorial/#keycloak-ui","title":"Keycloak UI","text":"<p>You can connect to the Keycloak UI to create additional realms, clients, and users. However, the use of Keycloak is a rather large topic that goes outside the scope of this Tutorial.</p> <p>To get started, you can connect to the Keycloak UI through a browser if the server is running as a part of the docker-compose cluster using this local URL. To log in as administrator use these credentials:</p> <ul> <li>username: admin</li> <li>password: admin</li> </ul>"},{"location":"developer_guide/ci/","title":"Continuous Integration","text":"<p>Jobbergate employs GitHub actions for its continuous integration processes. Detailed descriptions of these actions are provided on this page.</p>"},{"location":"developer_guide/ci/#automated-quality-assurance","title":"Automated Quality Assurance","text":"<p>Jobbergate's git repository incorporates a GitHub Action, specified in test_on_push.yaml, which is designed to execute our quality assurance tools across all Jobbergate sub-projects simultaneously. The action is activated anytime a new commit is pushed to the <code>main</code> branch or whenever a pull request is submitted.</p> <p>The suite of quality assurance tools encompasses unit tests, code coverage, linters, code formatters, and static type checkers. Comprehensive documentation about each tool is available in the Quality Assurance Tools section.</p>"},{"location":"developer_guide/ci/#automated-publication-to-pypi","title":"Automated Publication to PyPI","text":"<p>The major components of Jobbergate are published on PyPI, the Python Package Index. They are available at:</p> <ul> <li>jobbergate-api</li> <li>jobbergate-cli</li> <li>jobbergate-agent</li> <li>jobbergate-core</li> </ul> <p>These packages are automatically published to PyPI by three linked GitHub Actions that are detailed below.</p>"},{"location":"developer_guide/ci/#prepare-for-release","title":"Prepare for release","text":"<p>The first action involved in publication is the prepare_release.yaml) action. It is triggered manually on github through a \"workflow dispatch event\" whenever new features or fixes need to be published.</p> <p>The action takes two arguments that must be supplied by the user. They are:</p> <ul> <li>Use workflow from:    The branch from which the release will be created. The default is <code>main</code>, and it's    highly recommended that releases are cut from this branch in order to keep a linear    commit history between releases and pre-releases.</li> <li>Release Type:    This will describe the release type that will be created. Because Jobbergate uses    semantic versioning, it's important to carefully select the correct type of release.    For mor information on release types, please see the    Poetry documentation to learn more.</li> </ul> <p>Once activated, this action:</p> <ul> <li>Uses Poetry to bump the version number of all the Jobbergate sub-packages according to    the release type selected.</li> <li>Checks if the new version number is synchronized between the sub-packages, and fails if they are not.</li> <li>Creates a new dated entry for the new release on each of the sub-packages' changelog    files from the contents of the \"Unreleased\" section.</li> <li>Creates a new branch named <code>prepare-release/&lt;version&gt;</code>.</li> <li>Opens a draft pull request titled <code>Release &lt;version&gt;</code>.</li> </ul> <p>In this way, all the changes above can be reviewed before the release is published, and all quality assurance tests are executed for the pull request.</p> <p>The remaining steps of the workflow are chained automatically once the PR is accepted and merged into main.</p>"},{"location":"developer_guide/ci/#create-a-new-tag","title":"Create a new tag","text":"<p>The next action in the sequence is the tag_on_merged_pull_request.yaml action. Once the automatically created release PR is merged into the <code>main</code> branch, this action is triggered. It creates and pushes a new git tag to GitHub. The tag is based on the new version number for the release.</p>"},{"location":"developer_guide/ci/#publish-on-tag","title":"Publish on Tag","text":"<p>The final action is publish_on_tag.yaml This action is triggered when a new version tag is pushed to the repository. It first double checks if the tag matches the version number of each Jobbergate component, and then it builds and publishes the packages on PyPI.</p>"},{"location":"developer_guide/dev_tools/","title":"API Dev Tools","text":"<p>The Jobbergate API sub-project is equipped with a few tools designed to assist with some everyday development tasks. These can help streamline the process of setting up and interacting with the API.</p> <p>The dev-tools are shipped as a CLI program that can be invoked via Poetry within the project. All of the commands will operate within the virtual environment set up by Poetry.</p>"},{"location":"developer_guide/dev_tools/#invoking-dev-tools","title":"Invoking <code>dev-tools</code>","text":"<p>To invoke the dev tools, you must execute the commands from the home directory for the <code>jobbergate-api</code>. To see some information about the <code>dev-tools</code>, execute:</p> <pre><code>poetry run dev-tools --help\n</code></pre> <p>This will provide some help output that shows what options and sub-commands are available:</p> <pre><code>Usage: dev-tools [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n\nCommands:\n  db\n  dev-server  Start a development server locally.\n  show-env    Print out the current environment settings.\n</code></pre> <p>The <code>--help</code> option is available for all of the subcommands provided in <code>dev-tools</code>.</p>"},{"location":"developer_guide/dev_tools/#the-db-subcommand","title":"The <code>db</code> subcommand","text":"<p>There are a few convenience methods in the <code>dev-tools</code> for interacting with Jobbergate API's PostgreSQL database. These tools are found in the <code>db</code> subcommand. To see more info about this sub-command, run:</p> <pre><code>poetry run dev-tools db --help\n</code></pre>"},{"location":"developer_guide/dev_tools/#the-login-subcommand","title":"The <code>login</code> subcommand","text":"<p>This command allows you to log in to the database that your Jobbergate API is configured to connect with. It allows you to login to databases, regardless of whether they are locally hosted via Docker or situated on a remote PostgreSQL server. this ensures seamless access to any database that the Jobbergate API is configured to connect with.</p> <p>To log in to the database, execute this command:</p> <pre><code>poetry run dev-tools db login\n</code></pre> <p>The command will show some debug output including the URL of the database to which it is connecting and will then show a REPL connection to the database:</p> <pre><code>2022-09-07 15:52:02.089 | DEBUG    | dev_tools.db:login:26 - Logging into database: postgresql://compose-db-user:compose-db-pswd@localhost:5432/compose-db-name\nServer: PostgreSQL 14.1 (Debian 14.1-1.pgdg110+1)\nVersion: 3.4.1\nHome: http://pgcli.com\ncompose-db-name&gt;\n</code></pre>"},{"location":"developer_guide/dev_tools/#the-migrate-subcommand","title":"The <code>migrate</code> subcommand","text":"<p>This command uses alembic to generate a migration script to bring the current database (described by the environment) up to date with the SQLAlchemy models specified in the Jobbergate API source code.</p> <p>To invoke the migration script generation, execute:</p> <pre><code>poetry run dev-tools db migrate --message=\"An example migration\"\n</code></pre> <p>Some logging info will be produced, including the location of the new migration script:</p> <pre><code>2022-09-07 15:58:09.725 | DEBUG    | dev_tools.db:migrate:79 - Creating migration with message: An example migration\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.ddl.postgresql] Detected sequence named 'applications_id_seq' as owned by integer column 'applications(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'job_scripts_id_seq' as owned by integer column 'job_scripts(id)', assuming SERIAL and omitting\nINFO  [alembic.ddl.postgresql] Detected sequence named 'job_submissions_id_seq' as owned by integer column 'job_submissions(id)', assuming SERIAL and omitting\n  Generating /home/dusktreader/git-repos/omnivector/jobbergate/jobbergate-api/alembic/versions/20220907_155809--c275de463a90_an_example_migration.py ...  done\n  Running post write hook \"black\" ...\nreformatted /home/dusktreader/git-repos/omnivector/jobbergate/jobbergate-api/alembic/versions/20220907_155809--c275de463a90_an_example_migration.py\n\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file reformatted.\n  done\n  Running post write hook \"isort\" ...\nFixing /home/dusktreader/git-repos/omnivector/jobbergate/jobbergate-api/alembic/versions/20220907_155809--c275de463a90_an_example_migration.py\n  done\n</code></pre> <p>The generated migration should always be reviewed before it is committed to the repository.</p> <p>It is also possible to produce a blank migration if you need to execute some raw SQL or write an Alembic script by hand. Just pass the <code>--blank</code> parameter on the command line:</p> <pre><code>poetry run dev-tools db migrate --blank --message=\"A blank migration\"\n</code></pre>"},{"location":"developer_guide/dev_tools/#the-upgrade-subcommand","title":"The <code>upgrade</code> subcommand","text":"<p>This subcommand is used to apply a database migration to the database that the Jobbergate API is configured to connect with.</p> <p>By default, it will apply all the migrations that have not yet been applied to the database.</p> <p>To apply the migrations, execute the command:</p> <pre><code>poetry run dev-tools db upgrade\n</code></pre> <p>It will produce some logging output that shows what migrations were applied:</p> <pre><code>2022-09-07 16:05:46.315 | DEBUG    | dev_tools.db:upgrade:89 - Upgrading database...\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade d22da0741b7f -&gt; c275de463a90, An example migration\n</code></pre> <p>If you wish to only upgrade the database to a specific migration, you can pass that migration's id to the <code>--target</code> param.</p>"},{"location":"developer_guide/dev_tools/#the-show-env-subcommand","title":"The <code>show-env</code> subcommand","text":"<p>This command will show how the Jobbergate API is configured through its environment settings. To see the environment, execute this command:</p> <pre><code>poetry run dev-tools show-env\n</code></pre> <p>The output that the command produces will look something like:</p> <pre><code>Jobbergate settings:\n  DEPLOY_ENV: LOCAL\n  LOG_LEVEL: DEBUG\n  DATABASE_HOST: localhost\n  DATABASE_USER: compose-db-user\n  DATABASE_PSWD: compose-db-pswd\n  DATABASE_NAME: compose-db-name\n  DATABASE_PORT: 5432\n  TEST_DATABASE_HOST: localhost\n  TEST_DATABASE_USER: test-user\n  TEST_DATABASE_PSWD: test-pswd\n  TEST_DATABASE_NAME: test-db\n  TEST_DATABASE_PORT: 5433\n  S3_BUCKET_NAME: jobbergate-k8s-staging\n  S3_ENDPOINT_URL: None\n  ARMASEC_DOMAIN: localhost:9080/realms/master/protocol/openid-connect\n  ARMASEC_USE_HTTPS: True\n  ARMASEC_AUDIENCE: https://local.omnivector.solutions\n  ARMASEC_DEBUG: True\n  ARMASEC_ADMIN_DOMAIN: None\n  ARMASEC_ADMIN_AUDIENCE: None\n  ARMASEC_ADMIN_MATCH_KEY: None\n  ARMASEC_ADMIN_MATCH_VALUE: None\n  IDENTITY_CLAIMS_KEY: https://omnivector.solutions\n  SENTRY_DSN: None\n  SENTRY_SAMPLE_RATE: 1.0\n  MAX_UPLOAD_FILE_SIZE: 104857600\n  SENDGRID_FROM_EMAIL: None\n  SENDGRID_API_KEY: None\n</code></pre> <p>The command can also produce the output as JSON if needed by passing the <code>--json</code> flag:</p> <pre><code>poetry run dev-tools show-env --json\n</code></pre> <p>The JSON output will look something like:</p> <pre><code>{\"DEPLOY_ENV\": \"LOCAL\", \"LOG_LEVEL\": \"DEBUG\", \"DATABASE_HOST\": \"localhost\", \"DATABASE_USER\": \"compose-db-user\", \"DATABASE_PSWD\": \"compose-db-pswd\", \"DATABASE_NAME\": \"compose-db-name\", \"DATABASE_PORT\": 5432, \"TEST_DATABASE_HOST\": \"localhost\", \"TEST_DATABASE_USER\": \"test-user\", \"TEST_DATABASE_PSWD\": \"test-pswd\", \"TEST_DATABASE_NAME\": \"test-db\", \"TEST_DATABASE_PORT\": 5433, \"S3_BUCKET_NAME\": \"jobbergate-k8s-staging\", \"S3_ENDPOINT_URL\": null, \"ARMASEC_DOMAIN\": \"localhost:9080/realms/master/protocol/openid-connect\", \"ARMASEC_USE_HTTPS\": true, \"ARMASEC_AUDIENCE\": \"https://local.omnivector.solutions\", \"ARMASEC_DEBUG\": true, \"ARMASEC_ADMIN_DOMAIN\": null, \"ARMASEC_ADMIN_AUDIENCE\": null, \"ARMASEC_ADMIN_MATCH_KEY\": null, \"ARMASEC_ADMIN_MATCH_VALUE\": null, \"IDENTITY_CLAIMS_KEY\": \"https://omnivector.solutions\", \"SENTRY_DSN\": null, \"SENTRY_SAMPLE_RATE\": 1.0, \"MAX_UPLOAD_FILE_SIZE\": 104857600, \"SENDGRID_FROM_EMAIL\": null, \"SENDGRID_API_KEY\": null}\n</code></pre>"},{"location":"developer_guide/dev_tools/#the-dev-server-subcommand","title":"The <code>dev-server</code> subcommand","text":"<p>This command starts up a local development server for the Jobbergate API. It will be created using the configuration set up in the environment settings. This command is especially useful if you want to run the API locally but connect to remote services such as a database and s3 hosted on AWS.</p> <p>To start the server, run:</p> <pre><code>poetry run dev-tools dev-server\n</code></pre> <p>The command will produce some logging output that looks like this:</p> <pre><code>2022-09-07 16:15:05.830 | INFO     | dev_tools.dev_server:dev_server:50 - Waiting for the database\n2022-09-07 16:15:05.830 | DEBUG    | dev_tools.dev_server:_wait_for_db:23 - database url is: postgresql://compose-db-user:compose-db-pswd@localhost:5432/compose-db-name\n2022-09-07 16:15:05.830 | DEBUG    | dev_tools.dev_server:_wait_for_db:26 - Checking health of database at postgresql://compose-db-user:compose-db-pswd@localhost:5432/compose-db-name: Attempt #0\nINFO:     Will watch for changes in these directories: ['/home/dusktreader/git-repos/omnivector/jobbergate/jobbergate-api']\nINFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)\nINFO:     Started reloader process [27314] using statreload\n2022-09-07 16:15:06.555 | INFO     | jobbergate_api.main:&lt;module&gt;:39 - Skipping Sentry\nINFO:     Started server process [27319]\nINFO:     Waiting for application startup.\n2022-09-07 16:15:06.587 | INFO     | jobbergate_api.main:init_logger:71 - Logging configured \ud83d\udcdd Level: DEBUG\n2022-09-07 16:15:06.587 | DEBUG    | jobbergate_api.main:init_database:79 - Initializing database\nINFO:     Application startup complete.\n</code></pre> <p>There are additional options that can control some of the details of the settings of the dev server. These can be examined with the <code>--help</code> flag:</p> <pre><code>poetry run dev-tools dev-server --help\n</code></pre> <p>The dev server options will be printed like:</p> <pre><code>Usage: dev-tools dev-server [OPTIONS]\n\n  Start a development server locally.\n\nOptions:\n  --db-wait-count INTEGER   How many times to attempt a check  [default: 3]\n  --db-wait-interval FLOAT  Seconds to wait between checks  [default: 5.0]\n  --port INTEGER            The port where the server should listen  [default:\n                            5000]\n  --log-level TEXT          The level to log uvicorn output  [default: DEBUG]\n  --help                    Show this message and exit.\n</code></pre> <p>The <code>--db-wait-*</code> flags are used to make the dev server wait for the dev database to become available. These are mostly useful in the context of <code>docker-compose</code>.</p> <p>It should also be noted that a development uvicorn server will automatically reload the app if the source files of the app change. This is very helpful for debugging behavior in the app without having to manually stop and start the app after every source code modification.</p>"},{"location":"developer_guide/integration_testing/","title":"Integration Testing","text":"<p>While conducting integration testing for Jobbergate, it's critical to examine the entire cycle of the platform, ranging from the creation of an Application to remote Job Submission via the Jobbergate Agent.</p> <p>To test most of the platforms functionality, the <code>docker-compose</code> setup located in the Jobbergate Composed sub-project is sufficient. Begin by referring to the guide in that sub-project's README. Pay close attention to the execution of Jobbergate CLI commands as they play a significant role in integration testing. For testing you can use the pre-configured user credentials:</p> <ul> <li>Username: local-user</li> <li>Password: local</li> </ul> <p>Integration testing should cover the following work-flows:</p> <ul> <li>Logging in through the CLI</li> <li>Creating an Application</li> <li>Querying a single Application</li> <li>Updating an Application</li> <li>Rendering a Job Script from an Application</li> <li>Updating a Job Script</li> <li>Submitting a Job Script</li> <li>Verifying a Job Submission</li> <li>Deleting the Job Submission, Job Script, and Application</li> <li>Logging out through the CLI</li> </ul>"},{"location":"developer_guide/integration_testing/#setup","title":"Setup","text":"<p>To begin, you will need two separate terminals open. Change directory to the <code>jobbergate-composed</code> sub-project of the top-level <code>jobbergate</code> folder.</p> <p>First, you need to start up the Jobbergate platform with docker-compose. In one of your terminals, run the following command:</p> <pre><code>docker-compose up --build\n</code></pre> <p>Once all the services are started, jump into the prepared <code>jobbergate-cli</code> container to execute CLI commands. To do so, execute this command in the other terminal you have prepared:</p> <pre><code>docker-compose run jobbergate-cli bash\n</code></pre> <p>Now you may start executing commands with the Jobbergate CLI.</p> <p>To assist with some of the commands below, create a <code>NAME</code> environment variable that will help to identify resources that you create during the process. You should set the value based on the current date so that the associated resources are easy to identify. Run the following command to set it:</p> <pre><code>export NAME=\"test--$(whoami)--$(date -I)\"\n</code></pre> <p>You have now created a test name like <code>test--tbeck--2023-10-13</code>.</p>"},{"location":"developer_guide/integration_testing/#logging-in-through-the-cli","title":"Logging in through the CLI","text":"<p>The first work-flow you will test covers the auth mechanics of both the CLI and the API.</p> <p>Run the following command in the Jobbergate CLI:</p> <pre><code>jobbergate login\n</code></pre> <p>Next, open the link that is printed out and log in as <code>local-user</code> (password \"local\"). If asked, grant all of the permissions.</p> <p>Verify that the CLI reports that the user has been successfully logged in.</p> <p>At this point, verify that the token that has been retrieved for the user is correct.</p> <p>Run the following command in the CLI:</p> <pre><code>jobbergate show-token --decode\n</code></pre> <p>This command will pretty print the payload of the token. Verify that it contains:</p> <ul> <li>\"view\" and \"edit\" <code>permissions</code> for job-templates, job-scripts, and job-submissions</li> <li><code>email</code> equalling \"local-user@jobberate.local\"</li> <li><code>aud</code> includes \"https://local.omnivector.solutions\"</li> <li><code>azp</code> equals \"jobbergate-cli\"</li> </ul>"},{"location":"developer_guide/integration_testing/#creating-an-application","title":"Creating an Application","text":"<p>Next, test the command to create an Application through the CLI, and verify that the resource is created in the database. Also, verify that the files are successfully uploaded to the file store.</p> <p>For integration testing, use the built-in simple application. example. This example application has 3 simple template variables, and, when submitted, the rendered Job Script simply prints the values of those variables.</p> <p>Run the following command in the Jobbergate CLI:</p> <pre><code>jobbergate applications create --name=$NAME --identifier=$NAME --application-path=/example\n</code></pre> <p>Verify that output shows that a single application was inserted and that the files were uploaded:</p> <pre><code>                    Created Application\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key                  \u2503 Value                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id                   \u2502 1                                \u2502\n\u2502 name                 \u2502 test--root--2023-10-13           \u2502\n\u2502 owner_email          \u2502 local-user@jobbergate.local-mail \u2502\n\u2502 is_archived          \u2502 False                            \u2502\n\u2502 description          \u2502                                  \u2502\n\u2502 identifier           \u2502 test--root--2023-10-13           \u2502\n\u2502 application_uploaded \u2502 True                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer_guide/integration_testing/#querying-a-single-application","title":"Querying a single Application","text":"<p>Next, verify that we can look up a single Application by both its <code>id</code> and its <code>identifier</code>. Also include the <code>--full</code> argument to the base <code>jobbergate</code> command so that the output will show all the fields in the database including the source file, the config, and the timestamps.</p> <p>First, fetch the Application by <code>id</code> using the following command in the CLI:</p> <pre><code>jobbergate --full applications get-one --id=1\n</code></pre> <p>The output should look something like this:</p> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key            \u2503 Value                                                                                                                                 \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id             \u2502 1                                                                                                                                     \u2502\n\u2502 name           \u2502 test--root--2023-10-13                                                                                                                \u2502\n\u2502 owner_email    \u2502 local-user@jobbergate.local-mail                                                                                                      \u2502\n\u2502 created_at     \u2502 2023-10-13T19:44:21.935886                                                                                                            \u2502\n\u2502 updated_at     \u2502 2023-10-13T19:44:21.958325                                                                                                            \u2502\n\u2502 identifier     \u2502 test--root--2023-10-13                                                                                                                \u2502\n\u2502 description    \u2502                                                                                                                                       \u2502\n\u2502 template_vars  \u2502 {'bar': 'BAR', 'baz': 'BAZ', 'foo': 'FOO', 'workdir': '/nfs'}                                                                         \u2502\n\u2502 template_files \u2502 [{'parent_id': 5, 'filename': 'dummy-script.py.j2', 'file_type': 'ENTRYPOINT', 'created_at': '2023-10-13T19:44:22.020542',            \u2502\n\u2502                \u2502 'updated_at': '2023-10-13T19:44:22.020556'}]                                                                                          \u2502\n\u2502 workflow_files \u2502 [{'parent_id': 5, 'filename': 'jobbergate.py', 'runtime_config': {'template_files': None, 'job_script_name': None,                    \u2502\n\u2502                \u2502 'default_template': 'dummy-script.py.j2', 'output_directory': '.', 'supporting_files': None, 'supporting_files_output_name': None},   \u2502\n\u2502                \u2502 'created_at': '2023-10-13T19:44:22.110739', 'updated_at': '2023-10-13T19:44:22.110750'}]                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Verify that the <code>id</code>, <code>name</code>, <code>identifier</code>, and timestamps match the Application that was created.</p> <p>Next, fetch the same application by <code>identifier</code> and verify that it is the same Application:</p> <pre><code>jobbergate --full applications get-one --identifier=test--tbeck--2023-10-13\n</code></pre>"},{"location":"developer_guide/integration_testing/#updating-an-application","title":"Updating an Application","text":"<p>Next, verify that you can update the application through the CLI.</p> <p>Run this command to verify that we can change the name:</p> <pre><code>jobbergate applications update --id=1 --application-desc=\"Here is a test description\"\n</code></pre> <p>Verify that you can see the new description in the application when you fetch it via the <code>get-one</code> subcommand. Also, check the output with the <code>--full</code> parameter to make sure that the <code>updated_at</code> field is different and later than the <code>created_at</code> field.</p>"},{"location":"developer_guide/integration_testing/#rendering-a-job-script-from-an-application","title":"Rendering a Job Script from an Application","text":"<p>Now that an application has been uploaded uploaded, use it to render a new Job Script.</p> <p>There are a few different options to test here to check for correct behavior:</p> <ul> <li>Basic, interactive render</li> <li>Render in \"fast mode\" with a <code>--param-file</code></li> <li>Render with additional SBATCH params</li> </ul>"},{"location":"developer_guide/integration_testing/#basic-interactive-render","title":"Basic, interactive render","text":"<p>First, render an Application to a Job Script by executing the interactive code that gathers the values for template variables from the user.</p> <p>To start the rendering process, execute:</p> <pre><code>jobbergate job-scripts render --name=$NAME --application-id=1\n</code></pre> <p>Verify that you are shown 3 prompts to supply values for the template variables. Fill these in with any values you like. Notice that the third question has a default response supplied already. Accept this value or replace it with your preferred value:</p> <pre><code>   [?] gimme the foo!: FOO\n   [?] gimme the bar!: BAR\n   [?] gimme the foo!: BAZ\n   [?] gimme the workdir!: /nfs\n</code></pre> <p>When prompted if you would like to submit the job, decline with \"n\".</p> <p>After completing the questions, verify that the CLI reports that the new Job Script was created using the supplied values:</p> <pre><code>                 Created Job Script\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key            \u2503 Value                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id             \u2502 1                                \u2502\n\u2502 application_id \u2502 1                                \u2502\n\u2502 name           \u2502 test--root--2023-10-13           \u2502\n\u2502 description    \u2502                                  \u2502\n\u2502 owner_email    \u2502 local-user@jobbergate.local-mail \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now we need to verify that the Job Script was rendered with the correct values. Run the following command:</p> <pre><code>jobbergate job-scripts show-files --id=1\n</code></pre> <p>The output should show the Job Script with the provided template variable values rendered as expected:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 dummy-script.py \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                                                        \u2502\n\u2502   #!/bin/python3                                                                                                                                       \u2502\n\u2502                                                                                                                                                        \u2502\n\u2502   #SBATCH -J dummy_job                                                                                                                                 \u2502\n\u2502   #SBATCH -t 60                                                                                                                                        \u2502\n\u2502                                                                                                                                                        \u2502\n\u2502   print(\"Executing dummy job script\")                                                                                                                  \u2502\n\u2502   with open(\"/nfs/dummy-output.txt\", mode=\"w\") as dump_file:                                                                                           \u2502\n\u2502       print(\"I am a very, very dumb job script\", file=dump_file)                                                                                       \u2502\n\u2502       print(\"foo=FOO\", file=dump_file)                                                                                                                 \u2502\n\u2502       print(\"bar=BAR\", file=dump_file)                                                                                                                 \u2502\n\u2502       print(\"baz=BAZ\", file=dump_file)                                                                                                                 \u2502\n\u2502                                                                                                                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 This is the main job script file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"developer_guide/integration_testing/#render-in-fast-mode-with-a-param-file","title":"Render in \"fast mode\" with a <code>--param-file</code>","text":"<p>Next, verify that a Job Script can be rendered while skipping the interactive question answering segment by pre-supplying the application with the values to use for rendering. Since only the third question has a default, supply at least the other two questions with a param using the <code>--param-file</code> parameter.</p> <p>First, create a file to hold the params (hit <code>ctrl-d</code> to finish and write the file):</p> <pre><code>cat &gt; params.json\n{\n  \"foo\": \"FOO\",\n  \"bar\": \"BAR\"\n}\n</code></pre> <p>Now, render the Application using this file. Include the <code>--no-submit</code> flag because the Job Script shouldn't be submitted immediately. Verify only the rendering process for the new Job Script:</p> <pre><code>jobbergate job-scripts render --name=$NAME --application-id=1 --fast --param-file=params.json --no-submit\n</code></pre> <p>The output from the command will show you the default values that were used that you did not specify in the <code>params.json</code> file:</p> <pre><code>Default values used\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key     \u2503 Value \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 baz     \u2502 zab   \u2502\n\u2502 workdir \u2502 /nfs  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n                 Created Job Script\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key            \u2503 Value                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id             \u2502 2                                \u2502\n\u2502 application_id \u2502 1                                \u2502\n\u2502 name           \u2502 test--root--2023-10-13           \u2502\n\u2502 description    \u2502                                  \u2502\n\u2502 owner_email    \u2502 local-user@jobbergate.local-mail \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now check the rendered file again using the <code>show-files</code> sub-command.</p>"},{"location":"developer_guide/integration_testing/#render-with-additional-sbatch-params","title":"Render with additional SBATCH params","text":"<p>Finally, test that additional <code>SBATCH</code> params can be inserted at render time. The code will insert these additional parameters into the rendered Job Script files.</p> <p>To supply extra <code>SBATCH</code> params, they are provided on the command line using the <code>--sbatch-params</code> option. Use this command to test it out:</p> <pre><code>jobbergate job-scripts render --name=$NAME --application-id=1 --fast --param-file=params.json --no-submit --sbatch-params=\"--cluster=fake\" --sbatch-params=\"--partition=dummy\"\n</code></pre> <p>The output should look like:</p> <pre><code>Default values used\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key     \u2503 Value \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 baz     \u2502 zab   \u2502\n\u2502 workdir \u2502 /nfs  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n                 Created Job Script\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key            \u2503 Value                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id             \u2502 3                                \u2502\n\u2502 application_id \u2502 1                                \u2502\n\u2502 name           \u2502 test--root--2023-10-13           \u2502\n\u2502 description    \u2502                                  \u2502\n\u2502 owner_email    \u2502 local-user@jobbergate.local-mail \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now, review the rendered Job Script file using the <code>--show-files</code> command. You should see that the additional two SBATCH parameters are included:</p> <pre><code>#SBATCH --cluster=fake                                                                                                                               \u2502\n#SBATCH --partition=dummy\n</code></pre>"},{"location":"developer_guide/integration_testing/#updating-a-job-script","title":"Updating a Job Script","text":"<p>Next, verify that an existing Job Script can be updated.</p> <p>Run this command to verify that you can change the description:</p> <pre><code>jobbergate job-scripts update --id=1 --description=\"Here is a test description\"\n</code></pre> <p>Verify that you can see the new description in the Job Script when you fetch it via the <code>get-one</code> subcommand. Also, check the output with the <code>--full</code> parameter to make sure that the <code>updated_at</code> field is different and later than the <code>created_at</code> field.</p>"},{"location":"developer_guide/integration_testing/#submitting-a-job-script","title":"Submitting a Job Script","text":"<p>Next, test the process of submitting a Job Script to a slurm cluster for execution. Note that the <code>docker-compose.yaml</code> used for testing sets up a volume-mounted directory named <code>/nfs</code>. The <code>/nfs</code> directory in the container is mounted from the <code>slurm-fake-nfs</code> directory in the <code>jobbergate-composed</code> subproject. You can look in this directory after the job completes execution to check the results.</p> <p>You will need to verify that jobs are being submitted correctly vai the following steps:</p> <ul> <li>Submit the job through the CLI</li> <li>Verify that the agent submitted the job</li> <li>Verify that the agent updates the Job Submission status</li> <li>Verify the output from the job</li> </ul>"},{"location":"developer_guide/integration_testing/#submit-the-job-through-the-cli","title":"Submit the job through the CLI","text":"<p>Submit the Job Script using the CLI by running the following command:</p> <pre><code>jobbergate job-submissions create --name=$NAME --job-script-id=1 --cluster-name=local-slurm --execution-directory=/nfs\n</code></pre> <p>Verify that the output shows that the Job Submission has been created for the target Job Script</p> <pre><code>                  Created Job Submission\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Key                 \u2503 Value                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 id                  \u2502 1                                \u2502\n\u2502 job_script_id       \u2502 1                                \u2502\n\u2502 cluster_name        \u2502 local-slurm                      \u2502\n\u2502 slurm_job_id        \u2502 None                             \u2502\n\u2502 execution_directory \u2502 /nfs                             \u2502\n\u2502 name                \u2502 test--root--2023-10-13           \u2502\n\u2502 description         \u2502                                  \u2502\n\u2502 owner_email         \u2502 local-user@jobbergate.local-mail \u2502\n\u2502 status              \u2502 CREATED                          \u2502\n\u2502 report_message      \u2502 None                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer_guide/integration_testing/#verify-that-the-agent-submitted-the-job","title":"Verify that the agent submitted the job","text":"<p>To verify that the agent submitted the job correctly, review the log output from the agent.</p> <p>The agent performs the following process to complete a Job Submission with Slurm</p> <ul> <li>Fetch a pending job from the API</li> <li>Submit the job to slurm</li> <li>Mark the job as submitted and add the slurm job id to it</li> </ul> <p>You can access the log data by running the following command in a terminal that has changed directory to the <code>jobbergate-composed</code> folder:</p> <pre><code>docker-compose logs jobbergate-agent\n</code></pre> <p>It may be useful to pipe the output to a text viewer like <code>less</code>.</p> <p>If the agent has successfully submitted the job, you should see some log lines that look like this (ellipses indicate omitted content):</p> <pre><code>...Retrieved 1 pending job submission...\n...Submitting pending job submission 1\n...\n...Submitting pending job submission 1 to slurm...\n...\n...Received slurm job id 1 for job submission 1\n...Marking job job_submission_id=22 as SUBMITTED (slurm_job_id=1)\n</code></pre> <p>If you find those log lines, then the Agent has successfully submitted the job to slurm.</p>"},{"location":"developer_guide/integration_testing/#verify-that-the-job-was-completed","title":"Verify that the job was completed","text":"<p>To verify that the job completed successfully, review the log output from the agent.</p> <p>The agent performs the following process to complete Job Submissions</p> <ul> <li>Fetch the submitted job from the API</li> <li>Check the status of the job in slurm using the the <code>slurm_job_id</code></li> <li>If the job is completed, mark the Job Submission as COMPLETED</li> </ul> <p>You should look for log lines that look like this (ellipses indicate omitted content):</p> <pre><code>...Retrieved 1 active job submissions...\n...Fetching status of job_submission 1 from slurm\n...Fetching slurm job status for slurm job 1\n...\n...Status for slurm job 1 is job_id=1 job_state='COMPLETED'...\n...Updating job_submission with status=COMPLETED\n</code></pre>"},{"location":"developer_guide/integration_testing/#verify-the-output-from-the-job","title":"Verify the output from the job","text":"<p>In the terminal where you are running Jobbergate CLI commands, you can check the <code>/nfs</code> directory to see the results. You should see three output files in the directory:</p> <ul> <li>test--root--2023-10-13.out</li> <li>test--root--2023-10-13.err</li> <li>dummy-output.txt</li> </ul> <p>First, check the standard output from the script:</p> <pre><code>cat /nfs/test--root--2023-10-13.out\n</code></pre> <p>You should see a single line that says:</p> <pre><code>Executing dummy job script\n</code></pre> <p>The standard error from the script should be empty.</p> <p>The final file, <code>dummy-output.txt</code>, should contain the following content:</p> <pre><code>I am a very, very dumb job script\nfoo=FOO\nbar=BAR\nbaz=BAZ\n</code></pre>"},{"location":"developer_guide/integration_testing/#conclusion","title":"Conclusion","text":"<p>The process described in this document covers integration tests across the entire Jobbergate platform. These integration tests should be performed before new versions of Jobbergate are published and before Jobbergate is deployed to a new environment.</p>"},{"location":"developer_guide/keycloak_setup/","title":"Setting up Keycloak for Jobbergate","text":"<p>Jobbergate's security is provided by the Armasec package which should be compatible with any OIDC provider. However, the recommended provider is Keycloak.</p> <p>In this guide, we outline the steps to integrate an existing Keycloak instance (version 19.0.2 as used in this example) with Jobbergate to ensure a smooth user experience and enhanced security features.</p> <p>Although this tutorial focuses on integrating Keycloak with a locally deployed instance of Jobbergate, such as one housed in a Docker container via the <code>jobbergate-composed</code> sub-project, the procedures can be easily adapted to suit deployments on single-node Keycloak clusters or other complex configurations.</p>"},{"location":"developer_guide/keycloak_setup/#create-a-new-realm","title":"Create a new Realm","text":"<p>You have the option to utilize an existing realm for Jobbergate, but for a streamlined process, it's typically more advantageous to create a new realm specifically for your Jobbergate deployment.</p> <p>Once you're logged into the Keycloak interface, navigate and click the Add realm button, found beneath the Select realm dropdown menu on the left-hand side.</p> <p>For those using a local Jobbergate deployment, you should assign the Name as \"jobbergate-local\".</p> <p>You'll also need to specify a Frontend URL. Avoid using \"localhost\" because a valid domain is required for the redirection to function correctly. A suitable alternative is the .local special domain; this domain is ideal as it isn't subject to reservation on any DNS. For instance, your full Frontend URL would be http://keycloak.local:8080.</p> <p>The remaining realm settings can be left at their default configurations.</p>"},{"location":"developer_guide/keycloak_setup/#setup-hostfile","title":"Setup Hostfile","text":"<p>For the Keycloak admin UI to work correctly in a local deployment, it's essential to include the <code>keycloak.local</code> domain in your system\u2019s hostfile.</p> <p>For users on Linux or OSX, you can find this file at <code>/etc/hosts</code>. Windows users can locate it at <code>c:\\windows\\system32\\drivers\\etc\\hosts</code>.</p> <p>Editing this file requires administrative or sudo privileges.</p> <p>Upon accessing the file, append the following line and save your changes:</p> <pre><code>127.0.0.1   keycloak.local\n</code></pre> <p>This step ensures that the <code>Frontend URL</code> resolves correctly, facilitating seamless navigation and operation.</p>"},{"location":"developer_guide/keycloak_setup/#create-a-new-client-for-the-cli","title":"Create a new Client for the CLI","text":"<p>To facilitate login and JWT authentication for the Jobbergate CLI, it's essential to allocate a dedicated client.</p> <p>Begin by navigating to the <code>Clients</code> section, found on the left sidebar, and then proceed to click on the <code>Create</code> button located on the right.</p> <p>When adjusting the <code>Client Protocol</code> settings, select the <code>openid-connect</code> option. For the <code>Client ID</code> setting, which choosing an easy to identify name like \"jobbergate-cli\" is best even though this field can be any unique string.</p> <p>To ensure the CLI can utilize this client for login purposes, it's vital to activate the <code>OAuth 2.0 Device Authorization Grant</code> option.</p> <p>If you're working with a local deployment, simply input \"*\" in the <code>Valid Redirect URIs</code> section.</p>"},{"location":"developer_guide/keycloak_setup/#add-roles","title":"Add Roles","text":"<p>Next, we need to add the needed roles for Jobbergate endpoints. These represent the fine-grained permissions that are checked for each request to make sure that the user has permission to fulfill the request.</p> <p>Click the <code>Roles</code> tab at the top, and then click on <code>Add Role</code> on the right.</p> <p>Add the following roles:</p> Name Description jobbergate:job-templates:edit Allow to view job templates jobbergate:job-templates:view Allow to view job templates jobbergate:job-scripts:edit Allow to edit job scripts jobbergate:job-scripts:view Allow to view job scripts jobbergate:job-submissions:edit Allow to edit job submissions jobbergate:job-submissions:view Allow to view job submissions"},{"location":"developer_guide/keycloak_setup/#add-mappers","title":"Add Mappers","text":"<p>Jobbergate requires two claims that are not available by default. We will add them to the JWTs with Mappers.</p> <p>Click the <code>Mappers</code>  tab at the top, and then click the <code>Create</code> button to add a new Mapper.</p>"},{"location":"developer_guide/keycloak_setup/#audience","title":"Audience","text":"<p>First, we need to add an \"audience\" mapper. Select \"audience\" for the <code>Name</code> field. Next, select \"Audience\" for the <code>Mapper Type</code>.  The <code>Included Custom Audience</code> value may be whatever you like. The local deploy, by default, uses https://apis.omnivector.solutions. Make sure to enable the <code>Add to ID token</code> setting.</p>"},{"location":"developer_guide/keycloak_setup/#permissions","title":"Permissions","text":"<p>The <code>Armasec</code> package expects to find \"permissions\" in a claim at the root of the JWT payload. To facilitate this, we need to add a mapper that will copy the permissions to the correct place in the JWT. We will call the new mapper our \"permissions\" mapper.</p> <p>Enter \"Permissions\" under the <code>Name</code> field. Next, select \"User Client Role\" as the <code>Mapper Type</code>. Select \"jobbergatel-cli\" for the <code>Client ID</code>. The <code>Token Claim Name</code> must have the value \"permissions\". The <code>Claim JSON Type</code> field must be \"String\".</p>"},{"location":"developer_guide/keycloak_setup/#create-a-new-client-for-the-agent","title":"Create a new Client for the Agent","text":"<p>The Jobbergate Agent also requires its own client.</p> <p>Again, click the <code>Clients</code> section on the left navigation bar, and then click the <code>Create</code> button on the right.</p> <p>For the <code>Client Protocol</code> setting, choose the <code>openid-connect</code> protocol. The <code>Client ID</code> setting will be used to match jobs to the cluster they should be submitted to. So use the cluster name for this setting. For a local deployment, the <code>Client ID</code> should be \"local-slurm\".</p> <p>On the <code>Settings</code> tab, set <code>Access Type</code> to <code>confidential</code> and enter \"*\" for the <code>Valid Redirect URIs</code>. Scroll down and click on the <code>Save</code> button.</p>"},{"location":"developer_guide/keycloak_setup/#add-roles_1","title":"Add Roles","text":"<p>Click on the <code>Roles</code> tab, and click the <code>Add Role</code> button. Add all the following roles as above:</p> Name Description jobbergate:job-templates:edit Allow to view Jobbergate applications jobbergate:job-templates:view Allow to view applications jobbergate:job-scripts:edit Allow to edit job scripts jobbergate:job-scripts:view Allow to view job scripts jobbergate:job-submissions:edit Allow to edit job submissions jobbergate:job-submissions:view Allow to view job submissions"},{"location":"developer_guide/keycloak_setup/#add-mappers_1","title":"Add Mappers","text":"<p>Like the CLI client, the Agent's client also requires the \"Audience\" and \"Permissions\" mappers.</p> <p>Click the <code>Mappers</code>  tab at the top, and then click the <code>Create</code> button to add a new Mapper.</p>"},{"location":"developer_guide/keycloak_setup/#audience_1","title":"Audience","text":"<p>First, we need to add an \"audience\" mapper. Select \"audience\" for the <code>Name</code> field. Next, select \"Audience\" for the <code>Mapper Type</code>.  The <code>Included Custom Audience</code> value may be whatever you like. The local deploy, by default, uses \"https://apis.omnivector.solutions\". Make sure to enable the <code>Add to ID token</code> setting.</p>"},{"location":"developer_guide/keycloak_setup/#permissions_1","title":"Permissions","text":"<p>Next, add a \"permissions\" mapper. The <code>Armasec</code> package expects to find a \"permissions\" claims under a claim at the root of the JWT payload. Enter \"Permissions\" under the <code>Name</code> field. Next, select \"User Client Role\" as the <code>Mapper Type</code>. Select \"jobbergatel-cli\" for the <code>Client ID</code>. The <code>Token Claim Name</code> must have the value \"permissions\". The <code>Claim JSON Type</code> field must be \"String\".</p>"},{"location":"developer_guide/keycloak_setup/#add-service-account-roles","title":"Add Service Account Roles","text":"<p>To add the correct roles to the tokens issued for the Agent's client, we need to add some \"Service Account Roles\".</p> <p>Click the <code>Service Account Roles</code> tab. Then, from the <code>Client Roles</code> drop-down, select the <code>local-slurm</code> client. Select all of the Jobbergate roles created above and then click the <code>Add selected</code> button.</p>"},{"location":"developer_guide/keycloak_setup/#create-users","title":"Create User(s)","text":"<p>You will need to create some users that can use Jobbergate. These users will be able to sign-in through the Jobbergate CLI. Each user must have a unique email address. Other than that, no special settings are needed.</p> <p>To add a user, click <code>Users</code> on the left nav bar. Next, click the <code>Add user</code> button on the right.</p> <p>Use the following settings, and then click the <code>Save</code> button.</p> <p>| Username    | local-user                  | | Email       | local-user@jobbergate.local | | First Name  | Local                       | | Last Name   | User                        |</p> <p>After you have created the user, edit it by clicking on it in the list. You may need to click on the <code>View all users</code> button to see it.</p> <p>Click the <code>Credentials</code> tab at the top. Enter \"local\" for the <code>Password</code> and <code>Password Confirmation</code> field. Turn the <code>Temporary</code> setting to <code>OFF</code>, and click <code>Reset Password</code>. Click the <code>Set password</code> verification button.</p> <p>Next, click the <code>Role Mappings</code> tab at the top. Select the <code>jobbergate-local</code> entry in the <code>Client Roles</code> drop-down. Select all of the roles for jobbergate added above and click <code>Add selected</code> to add them to the user.</p>"},{"location":"developer_guide/keycloak_setup/#conclusion","title":"Conclusion","text":"<p>Your Keycloak instance is now prepared for use by Jobbergate! For additional information on configuring Keycloak and Armasec, consult documentation at:</p> <ul> <li>https://www.keycloak.org/documentation</li> <li>https://omnivector-solutions.github.io/armasec/</li> </ul>"},{"location":"developer_guide/qa_tools/","title":"Quality Assurance Tools","text":"<p>Jobbergate utilizes quality control tools across its three primary components (API, CLI, and Agent). The tools are invoked in the same way in each of the sub-projects, and may be invoked en masse from the root Jobbergate directory.</p>"},{"location":"developer_guide/qa_tools/#running-unit-tests","title":"Running Unit Tests","text":"<p>The main sub-projects each make use of pytest to apply unit testing. The unit tests for each are contained in a subdirectory named <code>tests/</code>.</p> <p>To invoke all of the unit tests for a sub-project, simply issue the following command:</p> <pre><code>make test\n</code></pre> <p>Once you enter the command above, the unit tests suite will start running. For the API, this process takes a few minutes. The others only take a few seconds. The status of the tests will be logged to the console as well as a coverage report for the unit tests:</p> <pre><code>================================================================== test session starts ===================================================================\nplatform linux -- Python 3.8.12, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\nUsing --random-order-bucket=module\nUsing --random-order-seed=650699\n\nrootdir: /home/dusktreader/git-repos/omnivector/jobbergate/jobbergate-api, configfile: pyproject.toml, testpaths: jobbergate_api/tests\nplugins: asyncio-0.12.0, random-order-1.0.4, respx-0.17.1, env-0.6.2, armasec-0.11.0, freezegun-0.4.2, cov-2.12.1, anyio-3.5.0\ncollecting ... 2022-09-07 16:31:37.548 | INFO     | jobbergate_api.main:&lt;module&gt;:39 - Skipping Sentry\ncollected 158 items\n\ntests/apps/job_scripts/test_routers.py ........................                                                                     [ 15%]\ntests/apps/applications/test_schemas.py ....                                                                                        [ 17%]\ntests/test_file_validation.py ...........                                                                                           [ 24%]\ntests/test_email_notification.py .......                                                                                            [ 29%]\ntests/apps/applications/test_application_files.py .........                                                                         [ 34%]\ntests/apps/job_submissions/test_routers.py .................................                                                        [ 55%]\ntests/apps/job_scripts/test_job_script_files.py .........                                                                           [ 61%]\ntests/apps/test_main.py .                                                                                                           [ 62%]\ntests/test_meta_mapper.py ...                                                                                                       [ 63%]\ntests/test_s3_manager.py ...                                                                                                        [ 65%]\ntests/test_config.py ................                                                                                               [ 75%]\ntests/test_pagination.py ........                                                                                                   [ 81%]\ntests/test_storage.py ..                                                                                                            [ 82%]\ntests/test_security.py ...                                                                                                          [ 84%]\ntests/apps/applications/test_routers.py .........................                                                                   [100%]\n\n==================================================================== warnings summary ====================================================================\ntests/conftest.py:53\n  /home/dusktreader/git-repos/omnivector/jobbergate/jobbergate-api/tests/conftest.py:53: PytestUnknownMarkWarning: Unknown pytest.mark.enforce_empty_database - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html\n    @pytest.mark.enforce_empty_database()\n\ntests/apps/job_scripts/test_routers.py: 37 warnings\ntests/apps/job_submissions/test_routers.py: 40 warnings\ntests/test_pagination.py: 10 warnings\ntests/apps/applications/test_routers.py: 42 warnings\n  /home/dusktreader/.cache/pypoetry/virtualenvs/jobbergate-api-zc2JKxO9-py3.8/lib/python3.8/site-packages/databases/backends/postgres.py:114: DeprecationWarning: The `Row.keys()` method is deprecated to mimic SQLAlchemy behaviour, use `Row._mapping.keys()` instead.\n    warnings.warn(\n\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\n\n---------- coverage: platform linux, python 3.8.12-final-0 -----------\nName                                                               Stmts   Miss  Cover   Missing\n------------------------------------------------------------------------------------------------\njobbergate_api/__init__.py                                             0      0   100%\njobbergate_api/apps/__init__.py                                        0      0   100%\njobbergate_api/apps/applications/__init__.py                           0      0   100%\njobbergate_api/apps/applications/application_files.py                 77      0   100%\njobbergate_api/apps/applications/models.py                             7      0   100%\njobbergate_api/apps/applications/routers.py                          136     14    90%   64-66, 129-131, 136-137, 210-212, 331-332, 341\njobbergate_api/apps/applications/schemas.py                           66      0   100%\njobbergate_api/apps/job_scripts/__init__.py                            0      0   100%\njobbergate_api/apps/job_scripts/job_script_files.py                  121      4    97%   67, 80-81, 270\njobbergate_api/apps/job_scripts/models.py                              7      0   100%\njobbergate_api/apps/job_scripts/routers.py                           132     11    92%   98-100, 108-109, 235-237, 267-269, 301\njobbergate_api/apps/job_scripts/schemas.py                            38      0   100%\njobbergate_api/apps/job_submissions/__init__.py                        0      0   100%\njobbergate_api/apps/job_submissions/constants.py                      11      0   100%\njobbergate_api/apps/job_submissions/models.py                          8      0   100%\njobbergate_api/apps/job_submissions/routers.py                       186     12    94%   101-103, 260-262, 382, 395-400, 406, 449\njobbergate_api/apps/job_submissions/schemas.py                        51      0   100%\njobbergate_api/apps/permissions.py                                     8      0   100%\njobbergate_api/config.py                                              58      1    98%   102\njobbergate_api/email_notification.py                                  28      0   100%\njobbergate_api/file_validation.py                                    102      6    94%   36-56, 111, 175\njobbergate_api/main.py                                                47      4    91%   31-37, 94\njobbergate_api/meta_mapper.py                                         24      1    96%   104\njobbergate_api/metadata.py                                             2      0   100%\njobbergate_api/pagination.py                                          31      0   100%\njobbergate_api/s3_manager.py                                          14      0   100%\njobbergate_api/security.py                                            22      0   100%\njobbergate_api/storage.py                                             52      1    98%   128\ntests/__init__.py                                       0      0   100%\ntests/apps/__init__.py                                  0      0   100%\ntests/apps/applications/__init__.py                     0      0   100%\ntests/apps/applications/test_application_files.py     104      0   100%\ntests/apps/applications/test_routers.py               368      0   100%\ntests/apps/applications/test_schemas.py                14      0   100%\ntests/apps/conftest.py                                 41      0   100%\ntests/apps/job_scripts/__init__.py                      0      0   100%\ntests/apps/job_scripts/conftest.py                     10      2    80%   32, 49\ntests/apps/job_scripts/test_job_script_files.py       102      0   100%\ntests/apps/job_scripts/test_routers.py                373      3    99%   48-64, 72\ntests/apps/job_submissions/__init__.py                  0      0   100%\ntests/apps/job_submissions/test_routers.py            483      0   100%\ntests/apps/test_main.py                                 7      0   100%\ntests/conftest.py                                     114      1    99%   127\ntests/test_config.py                                   33      0   100%\ntests/test_email_notification.py                       44      0   100%\ntests/test_file_validation.py                          17      0   100%\ntests/test_meta_mapper.py                              27      0   100%\ntests/test_pagination.py                               55      0   100%\ntests/test_s3_manager.py                               17      0   100%\ntests/test_security.py                                 39      0   100%\ntests/test_storage.py                                   7      0   100%\n------------------------------------------------------------------------------------------------\nTOTAL                                                               3083     60    98%\n\nRequired test coverage of 95.0% reached. Total coverage: 98.05%\n=========================================================== 158 passed, 130 warnings in 52.46s ===========================================================\n</code></pre> <p>Note</p> <p>The API unit tests require that a test database is already running. You can start one by using the dev-tools provided in the API sub-project.</p>"},{"location":"developer_guide/qa_tools/#running-linters","title":"Running Linters","text":"<p>The main sub-projects each use a group of linting tools to make sure that the code follows code quality standards. These linters will report any lines or segments of the code that do not meet the project's standards.</p> <p>To invoke all of the linters for a sub-project, issue the following command:</p> <pre><code>make lint\n</code></pre> <p>If any issues are reported, fix the reported error and try running it again. The linters will only succeed if all of the issues are fixed.</p>"},{"location":"developer_guide/qa_tools/#running-formatters","title":"Running Formatters","text":"<p>For most of the linting issues, the code can be auto-corrected using the configured code formatters.</p> <p>Currently, the sub-projects use the following formatters:</p> <ul> <li>black</li> <li>isort</li> </ul> <p>To apply the formatters, use this command:</p> <pre><code>make format\n</code></pre> <p>The formatters will report any files that were changed in their reports.</p>"},{"location":"developer_guide/qa_tools/#running-static-code-checkers","title":"Running Static Code Checkers","text":"<p>The Jobbergate sub-projects include type-hints that must be checked using the mypy static code checker. It may invoked using <code>make</code>:</p> <pre><code>make mypy\n</code></pre> <p>If any issues are located, they will be reported. Each type issue must be fixed before the static type checker passes.</p>"},{"location":"developer_guide/qa_tools/#running-all-quality-checks","title":"Running All Quality Checks","text":"<p>Finally, all of the quality checks can be run using this command:</p> <pre><code>make qa\n</code></pre>"},{"location":"developer_guide/template_workflows/","title":"Job Script Template Workflow Files","text":"<p>The main workflow file is a python script that is used within an interactive framework that gathers the values for template variables that will be needed when Job Scripts are rendered from Applications.</p> <p>Throughout the documentation, this file is referred to as the \"Workflow Source File.\"</p> <p>The entire purpose of the Workflow Source File is to construct a workflow of questions organized in a series of that can be changed dynamically according to the answers provided by the user.</p>"},{"location":"developer_guide/template_workflows/#the-jobbergateapplication-class","title":"The JobbergateApplication class","text":"<p>Each Workflow Source File script must define exactly one class named <code>JobbergateApplication</code>.</p> <p>This class should be a regular python class that inherits from the <code>JobbergateApplicationBase</code>. This base class is imported from the application_base module.</p> <p>The <code>JobbergateApplication</code> implementation may be a simple or complex as needed by the user. However, it must define a <code>mainflow()</code> method which is the first of the workflow methods that the Application processes.</p>"},{"location":"developer_guide/template_workflows/#the-workflow-methods","title":"The workflow methods","text":"<p>The <code>mainflow()</code> method is essentially the entry point for the Workflow Source File. It must return a list of questions that should be asked to the user in order. These questions will be used to gather the template variable values.</p> <p>The <code>mainflow()</code> method must take a dictionary named <code>data</code> as a keyword argument. This kwarg should default to <code>None</code>, and it should be set to an empty dict if the default is not overridden.</p> <p>Each workflow can also specify the net workflow method to call after its questions have been asked and answered. In this way, the workflows can be organized in a dynamic series where the path is dictated by the user responses.</p> <p>The workflow methods specify the next flow in the sequence by setting an item keyed by \"nextworkflow\" in the <code>data</code> dictionary. The value of this item is the name of the next workflow method to call.</p> <p>Each workflow method can examine the results from previous workflows by referencing the <code>data</code> dict. All of the key/value pairs in the dictionary (besides \"nextworkflow\") represent answers to previous questions.</p>"},{"location":"developer_guide/template_workflows/#the-questions","title":"The Questions","text":"<p>The Workflow Source File is built around a question asking framework that defines different sorts of questions that can be asked of the user.</p> <p>The question types are defined by classes that derive from a base <code>QuestionBase</code> class. The question types include:</p> <ul> <li>Text: gather a simple string response from the user</li> <li>Integer: gather a simple int response from the user</li> <li>List: prompt the user to select one item from a list</li> <li>Directory: prompt the user for a directory path</li> <li>File: prompt the user for a file path</li> <li>Checkbox: prompt the user to select as many items from a list as they want</li> <li>Confirm: prompt the user to offer a boolean response</li> <li>BooleanList: prompt a series of boolean responses</li> <li>Const: set the variable to the default value without even asking the user</li> </ul> <p>Note</p> <p>The BooleanList question has some very complex logic. The source code should be examined to understand what this does in detail.</p> <p>All of the implementation of the question classes (including the base class) can be found in the questions module of the Jobbergate source code.</p>"},{"location":"developer_guide/template_workflows/#other-class-attributes","title":"Other class attributes","text":"<p>Each Workflow Source File also has access to some attributes set up by the <code>JobbergateApplicationBase</code>.</p> <p>The <code>jobbergate_config</code> attribute will contain any of the properties that are set in the <code>jobbergate_config</code> section of the Application Config (<code>jobbergate.yaml</code>). These values can include anything set up by the user at application creation time.</p> <p>The <code>application_config</code> attribute contains all of the properties that are set in the <code>application_config</code> section of the Application config (<code>jobbergate.yaml</code>). This section may be empty. If it is, the <code>application_config</code> attribute will be an empty dictionary. This dictionary should only be populated by the template variables that the Workflow Source File seeks to collect from the user. The values for each item are the default values for that template variable.</p>"},{"location":"elements/apps/","title":"Jobbergate Apps","text":"<p>Jobbergate consists of three interconnected Python applications that operate harmoniously. These applications enable the creation and dispatch of Job Scripts to a Slurm cluster, eliminating the need for the Jobbergate user to engage directly with Slurm \u2013 a process that might be challenging or unfeasible.</p> <p>While the primary interface for user interaction with Jobbergate is the CLI, both the API and Core package can be employed to develop automation and craft tools leveraging Jobbergate's capabilities.</p> <p>The three apps in Jobbergate are:</p> <ul> <li>Jobbergate API</li> <li>Jobbergate CLI</li> <li>Jobbergate Agent</li> </ul> <p>And the SDK that provides python integration is:</p> <ul> <li>Jobbergate Core</li> </ul>"},{"location":"elements/apps/agent/","title":"Jobbergate Agent Overview","text":"<p>The Jobbergate Agent is a daemon application that is designed to be integrated into the slurm cluster.</p> <p>It predominantly fulfills two key roles:</p> <ul> <li>Submitting newly created Job Submissions to the Slurm cluster</li> <li>Monitoring and updating the status of Job Submissions as they undergo processing</li> </ul>"},{"location":"elements/apps/agent/#submitting-jobs","title":"Submitting Jobs","text":"<p>The Jobbergate Agent constantly monitors the Job Submissions resource for entries marked with a <code>CREATED</code> status. These are Job Submissions that the API has instantiated but are yet to be dispatched to Slurm.</p> <p>When submitting a job to Slurm, the Jobbergate Agent pulls the Job Script itself plus any supporting files associated with it down to the cluster. Once all the files have been downloaded, the Job Script is submitted to Slurm via it's RESTful API. The Job Submission saves the identifier for the Slurm Job so that it can be associated with the Job Script that was submitted. The Job Submission also tracks all of the supporting files and submission parameters that were submitted along with the Job Script.</p> <p>Upon job submission to Slurm, the Jobbergate Agent retrieves not only the Job Script but also any related supporting files, downloading them to the cluster. After ensuring all files are downloaded, the Job Script is dispatched to Slurm through its RESTful API. The Job Submission retains the unique identifier for the Slurm Job, ensuring it's linked to the submitted Job Script. Additionally, the Job Submission logs all the supporting files and submission parameters that were provided in tandem with the Job Script at submission time.</p>"},{"location":"elements/apps/agent/#updating-job-status","title":"Updating Job Status","text":"<p>Once submitted, the Jobbergate Agent updates the status of the Job Submission to <code>SUBMITTED</code>. If there is an error during the submission process, the Agent sets the Job Submission status to <code>REJECTED</code>.</p> <p>Upon completion of the job by the Slurm cluster, the Agent updates the status either to <code>DONE</code> if successful, or <code>ABORTED</code> if the job terminated without completion for any reason. This signifies the conclusion of tasks related to that particular Job Submission.</p>"},{"location":"elements/apps/agent/#usage","title":"Usage","text":"<p>The Jobbergate Agent operates in the background; it's designed to be initiated and left uninterrupted.</p> <p>For insights into its ongoing operations, the Agent offers detailed logging which can be analyzed.</p>"},{"location":"elements/apps/api/","title":"Jobbergate API Overview","text":"<p>The Jobbergate API is a RESTful API that functions as the Jobbergate platform's backbone. It offers access to the platform's data for various components, including the Jobbergate CLI, agent, and any other interfaces requiring interaction with Jobbergate assets.</p> <p>The API's endpoints are secured via OpenID Connect, and they require a valid auth token that is created when a user logs into the system.</p>"},{"location":"elements/apps/api/#usage","title":"Usage","text":"<p>The Jobbergate API is a standard RESTful API. It can be accessed vi a command-line tool like Curl or API testing tool like Postman.</p>"},{"location":"elements/apps/api/#getting-an-auth-token","title":"Getting an Auth Token","text":"<p>To use the Jobbergate API, you need to obtain an access token first. This token both authenticates your requests and provides authorization according to your user's rights.</p> <p>The authentication for Jobbergate API is managed by an affiliated OIDC service. While it's possible to directly interface with this service from your application to get an authentication token, the simplest method is via the Jobbergate CLI. Refer to the \"Logging In\" segment on the CLI usage page.</p>"},{"location":"elements/apps/api/#querying-the-api","title":"Querying the API","text":"<p>Once you have an auth token, you can interact with any of the Jobbergate API endpoints. The complete set of endpoints, parameters, and constraints are available through swagger documentation under <code>jobbergate/docs</code> wherever the API is deployed.</p> <p>For all requests made to secured endpoints, you must include the auth token in the <code>Authorization</code> header of your requests with a \"Bearer\" prefix.</p>"},{"location":"elements/apps/api/#query-examples","title":"Query Examples","text":"<p>To demonstrate how to use the API, the following examples will show how to fetch a list of all available Job Scripts.</p> <p>For these examples:</p> <ul> <li>The auth token will be \"XXXXXXXX\"</li> <li>The Jobbergate API is deployed at \"http://jobbergate.local\"</li> </ul>"},{"location":"elements/apps/api/#curl","title":"curl","text":"<p>From a linux terminal, you can use the curl command to make a request to the API:</p> <pre><code>curl --header \"Authorization: Bearer XXXXXXXX\"  http://jobbergate.local/jobbergate/job-scripts\n</code></pre> <p>The output of the above command should look something like: <pre><code>{\"results\":[{\"id\":1,\"created_at\":\"2022-09-09T21:34:16.889289\",\"updated_at\":\"2022-09-09T21:34:16.889289\",\"job_script_name\":\"test script\",\"job_script_description\":null,\"job_script_owner_email\":\"local-user@jobbergate.local\",\"application_id\":1}],\"pagination\":{\"total\":1,\"start\":null,\"limit\":null}}\n</code></pre></p> <p>To see the result more clearly, you can use a tool like <code>jq</code> to format the JSON response:</p> <pre><code>{\n  \"results\": [\n    {\n      \"id\": 1,\n      \"created_at\": \"2022-09-09T21:34:16.889289\",\n      \"updated_at\": \"2022-09-09T21:34:16.889289\",\n      \"job_script_name\": \"test script\",\n      \"job_script_description\": null,\n      \"job_script_owner_email\": \"local-user@jobbergate.local\",\n      \"application_id\": 1\n    }\n  ],\n  \"pagination\": {\n    \"total\": 1,\n    \"start\": null,\n    \"limit\": null\n  }\n}\n</code></pre>"},{"location":"elements/apps/api/#python-and-httpx","title":"Python and httpx","text":"<p>In python, you can use the httpx package to send requests to and process responses from the API:</p> <pre><code>import json\nimport httpx\n\n\ntoken = \"XXXXXXXX\"\n\nresp = httpx.get(\n    \"http://localhost:8000/jobbergate/job-scripts\",\n    headers=dict(Authorization=f\"Bearer {token}\"),\n)\n\nprint(json.dumps(resp.json(), indent=2))\n</code></pre> <p>The script will print out results like this:</p> <pre><code>{\n  \"results\": [\n    {\n      \"id\": 1,\n      \"created_at\": \"2022-09-09T21:34:16.889289\",\n      \"updated_at\": \"2022-09-09T21:34:16.889289\",\n      \"job_script_name\": \"foo\",\n      \"job_script_description\": null,\n      \"job_script_owner_email\": \"local-user@jobbergate.local\",\n      \"application_id\": 1\n    }\n  ],\n  \"pagination\": {\n    \"total\": 1,\n    \"start\": null,\n    \"limit\": null\n  }\n}\n</code></pre>"},{"location":"elements/apps/cli/","title":"Jobbergate CLI Overview","text":"<p>The Jobbergate CLI offers an interactive gateway to the functionalities of the Jobbergate API's. Users can utilize the CLI to manage resources and execute various tasks.</p> <p>The CLI operates under two primary modes:</p> <ul> <li>Resource Creation: The CLI introduces <code>create</code> subcommands for every resource, allowing users to establish new    instances.</li> <li>Resource Viewing: With <code>list</code> and <code>get-one</code> subcommands available for each resource, users can inspect different    detail levels about the resource entities stored in the database.</li> </ul> <p>To ensure secure access, the Jobbergate CLI offers a sign-in mechanism to the Jobbergate API. Once authenticated, users may use all the resources in Jobbergate that their account has been granted access to.</p>"},{"location":"elements/apps/cli/#discovering-command-details","title":"Discovering Command details","text":"<p>You can start learning about the commands and usage of the Jobbergate CLI by starting with this command:</p> <pre><code>$ jobbergate --help\nUsage: jobbergate [OPTIONS] COMMAND [ARGS]...\n\n  Welcome to the Jobbergate CLI!\n\n  More information can be shown for each command listed below by running it\n  with the --help option.\n\nOptions:\n  --verbose / --no-verbose        Enable verbose logging to the terminal\n                                  [default: no-verbose]\n  --full / --no-full              Print all fields from CRUD commands\n                                  [default: no-full]\n  --raw / --no-raw                Print output from CRUD commands as raw json\n                                  [default: no-raw]\n  --version / --no-version        Print the version of jobbergate-cli and exit\n                                  [default: no-version]\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n\nCommands:\n  applications     Commands to interact with applications\n  job-scripts      Commands to interact with job scripts\n  job-submissions  Commands to interact with job submissions\n  login            Log in to the jobbergate-cli by storing the supplied...\n  logout           Logs out of the jobbergate-cli.\n  show-token       Show the token for the logged in user.\n</code></pre> <p>If you want to delve deeper and understand the usage of a specific subcommand, you can use the <code>--help</code> flag with that particular subcommand. For example, to better understand the usage of the <code>job-scripts create</code> subcommand, you would run:</p> <pre><code>$ jobbergate job-scripts create --help\n</code></pre>"},{"location":"elements/apps/cli/#logging-in","title":"Logging In","text":"<p>The first thing you need to do with the Jobbergate CLI is to log in:</p> <p><pre><code>jobbergate login\n</code></pre> Upon executing the command, a message will appear like:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Waiting for login \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                      \u2502\n\u2502   To complete login, please open the following link in a browser:                                                    \u2502\n\u2502                                                                                                                      \u2502\n\u2502     http://keycloak.local:8080/realms/jobbergate-local/device?user_code=BMVJ-NLZS                                    \u2502\n\u2502                                                                                                                      \u2502\n\u2502   Waiting up to 5.0 minutes for you to complete the process...                                                       \u2502\n\u2502                                                                                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nWaiting for web login... \u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   3% 0:04:50\n</code></pre> <p>Next, you will need to:</p> <ol> <li>Open the provided link by either clicking on it (if your terminal supports it) or copy/paste it into a browser.</li> <li>Enter your login credentials</li> <li>Complete the sign in process</li> <li>Return to your terminal</li> </ol> <p>You should see a message like:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Logged in! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                      \u2502\n\u2502   User was logged in with email 'local-user@jobbergate.local'                                                        \u2502\n\u2502                                                                                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"elements/apps/cli/#checking-the-auth-token","title":"Checking the Auth Token","text":"<p>To get access to the auth token you acquired by logging in, run this command:</p> <p><pre><code>jobbergate show-token --plain\n</code></pre> Executing this command will display the authentication token in a plain text format, without any additional characters or formatting. This makes it easier for you to manually select and copy the token, especially in environments where clipboard access might be restricted, such as when using docker-compose or an SSH connection.</p> <p>Once the token is displayed, you can copy the token to your clipboard to use with API requests.</p> <p>It's essential to treat this token with care, as it provides access to the Jobbergate system under your user account. Ensure you don't share it with unauthorized individuals and avoid unintentionally exposing it in logs or scripts.</p>"},{"location":"elements/apps/cli/#resource-commands","title":"Resource Commands","text":"<p>Now that you are logged in, you can interact with any of the three main Jobbergate resources. Most of the resources provide the following sub-commands:</p> <ul> <li>create: Create a new instance of the resource</li> <li>delete: Delete an instance of the resource</li> <li>get-one: Fetch details about a single instance of the resource</li> <li>list: Fetch a listing of all the resources limited by filters</li> <li>update: Update an instance of the resource.</li> </ul> <p>Details for each subcommand can be viewed by passing the <code>--help</code> flag to any of them.</p> <p>Use the <code>--help</code> option to explore the CLI and disccover the usage and options for all the subcommands.</p>"},{"location":"elements/apps/cli/#usability","title":"Usability","text":"<p>When rendering a job-script from a template, the user will be asked a series of questions to fill in the template variables.</p> <p>The library used for the questionnaire has a limitation that messages can only be displayed in a single line. This means that some of the questions can be truncated and will not be fully visible if the message is too long.</p> <p>Note</p> <p>To ensure that you can see the full output of the CLI, we recommend that you use a terminal in a maximized window.</p>"},{"location":"elements/apps/cli/#submission-modes","title":"Submission Modes","text":"<p>The Jobbergate CLI supports two modes for submitting jobs:</p> <ul> <li> <p>Remote Job Submission:</p> <ul> <li><code>SBATCH_PATH</code> is configured on the CLI, so the payload to create a new submission does not include <code>slurm_job_id</code>.</li> <li>The API processes the creation as usual, giving it the status <code>CREATED</code> and adding the new entry on the database.</li> <li>The agent pulls pending jobs (<code>status=CREATED</code>) and submit them to slurm on every cycle.</li> <li>The agent pulls active jobs (<code>STATUS=SUBMITTED</code>) and update their status on every cycle.</li> </ul> </li> <li> <p>Aiming to provide backward compatibility with Jobbergate-cli v1, on-site submissions are also available (new in 4.2.0):</p> <ul> <li><code>SBATCH_PATH</code> is configured on the CLI, so it downloads job-script files, submits them to slurm using <code>sbatch</code>, and includes <code>slurm_job_id</code> on the payload to create a new submissions.</li> <li>The API processes the creation giving it the status <code>SUBMITTED</code> and adding the new entry on the database. No need to parse any job-property, since all <code>#SBATCH</code> directives were processed at submission time by sbatch.</li> <li>These jobs won't be processed as pending by the agent since their status is not <code>CREATED</code>, remember it was already submitted.</li> <li>Just like on remote submissions, the agent will still keep track of active jobs (<code>STATUS=SUBMITTED</code>) and update them as needed.</li> </ul> </li> </ul>"},{"location":"elements/apps/core/","title":"Jobbergate Core Overview","text":"<p>Jobbergate-core is an SDK designed to offer seamless access to Jobbergate's features within any Python project. It is ideal for constructing automation atop the Jobbergate platform or tailoring workflows that hinge on Jobbergate components.</p> <p>Coming Soon: More in-depth documentation of Jobbergate Core</p>"},{"location":"elements/resources/","title":"Jobbergate Resources","text":"<p>Jobbergate utilizes three primary resources for the efficient management of job script creation, templating, and submission. These resources are maintained in distinct database tables and can be accessed via individual API endpoints or through specific subcommands in the CLI.</p> <p>The principal resources of Jobbergate include:</p> <ul> <li>Job Scripts</li> <li>Job Script Templates</li> <li>Job Submissions</li> </ul>"},{"location":"elements/resources/job_script_templates/","title":"Job Script Templates","text":"<p>Job Script Templates serve as adaptable blueprints for Job Scripts, allowing for the dynamic replacement of crucial values upon rendering. The end result of this process is a Job Script primed for cluster submission.</p> <p>The specific values incorporated into the template to generate a Job Script are termed \"template variables.\" Users can define constrains and default settings for these values within the Job Script Template's workflow script.</p> <p>Additionally, Job Script Templates provide a framework that allows for the interactive collection of values from users via the Jobbergate CLI.</p>"},{"location":"elements/resources/job_scripts/","title":"Job Scripts","text":"<p>In Jobbergate, the primary resource is the Job Script. These scripts dictate the instructions for jobs intended to execute on the Slurm cluster. They can either be Python files or shell scripts. Jobbergate facilitates the generation, modification, and submission of these Job Scripts to the cluster.</p> <p>Job Scripts can either be uploaded directly from a user's workstation or be derived by rendering the Job Script Templates.</p> <p>Submission of Job Scripts to any affiliated Slurm cluster can be accomplished through the CLI, API, or Core integrations. After submission, the execution status of a Job Script can be monitored using the Job Submission resource.</p>"},{"location":"elements/resources/job_submissions/","title":"Job Submissions","text":""},{"location":"elements/resources/job_submissions/#job-submissions","title":"Job Submissions","text":"<p>Job Submissions primarily monitor the status and metadata of a Job Script dispatched by Jobbergate to a Slurm cluster. They possess identifying details linking them to the Job Script that was submitted and to the corresponding Job objects created by Slurm.</p>"},{"location":"reference/agent/","title":"Jobbergate Agent Reference","text":""},{"location":"reference/agent/#jobbergate_agent","title":"jobbergate_agent","text":""},{"location":"reference/agent/#jobbergate_agent.clients","title":"clients","text":""},{"location":"reference/agent/#jobbergate_agent.clients.cluster_api","title":"cluster_api","text":"<p>Core module for Jobbergate API clients management</p>"},{"location":"reference/agent/#jobbergate_agent.clients.cluster_api.AsyncBackendClient","title":"AsyncBackendClient","text":"<p>             Bases: <code>AsyncClient</code></p> <p>Extends the httpx.AsyncClient class with automatic token acquisition for requests. The token is acquired lazily on the first httpx request issued. This client should be used for most agent actions.</p> request <code>async</code> <pre><code>request(*args, **kwargs)\n</code></pre> <p>Request wrapper that captures request errors and sends them to Sentry.</p> <p>This ensures events are sent to Sentry even if the caller handles the exception.</p>"},{"location":"reference/agent/#jobbergate_agent.clients.cluster_api.acquire_token","title":"acquire_token","text":"<pre><code>acquire_token(token: Token) -&gt; Token\n</code></pre> <p>Retrieves a token from OIDC based on the app settings.</p>"},{"location":"reference/agent/#jobbergate_agent.internals","title":"internals","text":""},{"location":"reference/agent/#jobbergate_agent.internals.update","title":"update","text":""},{"location":"reference/agent/#jobbergate_agent.internals.update.self_update_agent","title":"self_update_agent  <code>async</code>","text":"<pre><code>self_update_agent()\n</code></pre> <p>Fetch the upstream version and update the agent if necessary.</p> <p>In case the agent is updated, the scheduler is shutdown and restarted with the new version.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate","title":"jobbergate","text":""},{"location":"reference/agent/#jobbergate_agent.jobbergate.constants","title":"constants","text":""},{"location":"reference/agent/#jobbergate_agent.jobbergate.constants.FileType","title":"FileType","text":"<p>             Bases: <code>AutoNameEnum</code></p> <p>File type enum.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.report_health","title":"report_health","text":""},{"location":"reference/agent/#jobbergate_agent.jobbergate.report_health.report_health_status","title":"report_health_status  <code>async</code>","text":"<pre><code>report_health_status(interval: int) -&gt; None\n</code></pre> <p>Ping the API to report the agent's status.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas","title":"schemas","text":""},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.ActiveJobSubmission","title":"ActiveJobSubmission","text":"<p>             Bases: <code>BaseModel</code></p> <p>Specialized model for the cluster-agent to pull an active job_submission.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.JobScript","title":"JobScript","text":"<p>             Bases: <code>BaseModel</code></p> <p>Model to match database for the JobScript resource.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.JobScriptFile","title":"JobScriptFile","text":"<p>             Bases: <code>BaseModel</code></p> <p>Model for the job_script_files field of the JobScript resource.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.PendingJobSubmission","title":"PendingJobSubmission","text":"<p>             Bases: <code>BaseModel</code></p> <p>Specialized model for the cluster-agent to pull a pending job_submission along with data from its job_script and application sources.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.SlurmJobData","title":"SlurmJobData","text":"<p>             Bases: <code>BaseModel</code></p> <p>Specialized model for the cluster-agent to pull job state information from slurm and post the data as an update to the Jobbergate API.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.SlurmSubmitError","title":"SlurmSubmitError","text":"<p>             Bases: <code>BaseModel</code></p> <p>Specialized model for error content in a SlurmSubmitResponse.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.schemas.SlurmSubmitResponse","title":"SlurmSubmitResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Specialized model for the cluster-agent to pull a pending job_submission along with data from its job_script and application sources.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit","title":"submit","text":""},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.SubprocessAsUserHandler","title":"SubprocessAsUserHandler  <code>dataclass</code>","text":"<p>             Bases: <code>SubprocessHandler</code></p> <p>Subprocess handler that runs as a given user.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.fetch_pending_submissions","title":"fetch_pending_submissions  <code>async</code>","text":"<pre><code>fetch_pending_submissions() -&gt; list[PendingJobSubmission]\n</code></pre> <p>Retrieve a list of pending job_submissions.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.get_job_script_file","title":"get_job_script_file  <code>async</code>","text":"<pre><code>get_job_script_file(\n    pending_job_submission: PendingJobSubmission,\n    submit_dir: Path,\n) -&gt; Path\n</code></pre> <p>Get the job script file from the backend.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.mark_as_rejected","title":"mark_as_rejected  <code>async</code>","text":"<pre><code>mark_as_rejected(\n    job_submission_id: int, report_message: str\n)\n</code></pre> <p>Mark job_submission as rejected in the Jobbergate API.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.mark_as_submitted","title":"mark_as_submitted  <code>async</code>","text":"<pre><code>mark_as_submitted(\n    job_submission_id: int,\n    slurm_job_id: int,\n    slurm_job_data: SlurmJobData,\n)\n</code></pre> <p>Mark job_submission as submitted in the Jobbergate API.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.process_supporting_files","title":"process_supporting_files  <code>async</code>","text":"<pre><code>process_supporting_files(\n    pending_job_submission: PendingJobSubmission,\n    submit_dir: Path,\n) -&gt; list[Path]\n</code></pre> <p>Process the submission support files.</p> <p>Write the support files to the submit_dir if WRITE_SUBMISSION_FILES is set to True. Reject the submission if there are support files with WRITE_SUBMISSION_FILES set to False.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.retrieve_submission_file","title":"retrieve_submission_file  <code>async</code>","text":"<pre><code>retrieve_submission_file(file: JobScriptFile) -&gt; str\n</code></pre> <p>Get a submission file from the backend and return the decoded file content.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.submit_job_script","title":"submit_job_script  <code>async</code>","text":"<pre><code>submit_job_script(\n    pending_job_submission: PendingJobSubmission,\n    user_mapper: SlurmUserMapper,\n) -&gt; int\n</code></pre> <p>Submit a Job Script to slurm via the sbatch command.</p> <p>:param: pending_job_submission: A job_submission with fields needed to submit. :returns: The <code>slurm_job_id</code> for the submitted job</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.submit_pending_jobs","title":"submit_pending_jobs  <code>async</code>","text":"<pre><code>submit_pending_jobs()\n</code></pre> <p>Submit all pending jobs and update them with <code>SUBMITTED</code> status and slurm_job_id.</p> <p>:returns: The <code>slurm_job_id</code> for the submitted job</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.submit.write_submission_file","title":"write_submission_file  <code>async</code>","text":"<pre><code>write_submission_file(\n    file_content: str, filename: str, submit_dir: Path\n) -&gt; Path\n</code></pre> <p>Write a decoded file content to the submit_dir.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.update","title":"update","text":""},{"location":"reference/agent/#jobbergate_agent.jobbergate.update.fetch_active_submissions","title":"fetch_active_submissions  <code>async</code>","text":"<pre><code>fetch_active_submissions() -&gt; List[ActiveJobSubmission]\n</code></pre> <p>Retrieve a list of active job_submissions.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.update.update_active_jobs","title":"update_active_jobs  <code>async</code>","text":"<pre><code>update_active_jobs()\n</code></pre> <p>Update slurm job state for active jobs.</p>"},{"location":"reference/agent/#jobbergate_agent.jobbergate.update.update_job_data","title":"update_job_data  <code>async</code>","text":"<pre><code>update_job_data(\n    job_submission_id: int, slurm_job_data: SlurmJobData\n) -&gt; None\n</code></pre> <p>Update a job submission with the job state</p>"},{"location":"reference/agent/#jobbergate_agent.main","title":"main","text":""},{"location":"reference/agent/#jobbergate_agent.settings","title":"settings","text":""},{"location":"reference/agent/#jobbergate_agent.settings.Settings","title":"Settings","text":"<p>             Bases: <code>BaseSettings</code></p>"},{"location":"reference/agent/#jobbergate_agent.settings.Settings.Config","title":"Config","text":"<p>Provide configuration for the project settings.</p> <p>Note that we disable use of <code>dotenv</code> if we are in test mode.</p>"},{"location":"reference/agent/#jobbergate_agent.settings.Settings.compute_extra_settings","title":"compute_extra_settings","text":"<pre><code>compute_extra_settings(values)\n</code></pre> <p>Compute settings values that are based on other settings values.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks","title":"tasks","text":"<p>Task definitions for the Jobbergate Agent.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks.active_submissions_task","title":"active_submissions_task","text":"<pre><code>active_submissions_task(scheduler: BaseScheduler) -&gt; Job\n</code></pre> <p>Schedule a task to handle active jobs every <code>TASK_JOBS_INTERVAL_SECONDS</code> seconds.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks.garbage_collection_task","title":"garbage_collection_task","text":"<pre><code>garbage_collection_task(\n    scheduler: BaseScheduler,\n) -&gt; Union[Job, None]\n</code></pre> <p>Schedule a task to perform garbage collection every dat at.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks.pending_submissions_task","title":"pending_submissions_task","text":"<pre><code>pending_submissions_task(scheduler: BaseScheduler) -&gt; Job\n</code></pre> <p>Schedule a task to submit pending jobs every <code>TASK_JOBS_INTERVAL_SECONDS</code> seconds.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks.self_update_task","title":"self_update_task","text":"<pre><code>self_update_task(scheduler: BaseScheduler) -&gt; Job\n</code></pre> <p>Schedule a task to self update the agent every <code>TASK_SELF_UPDATE_INTERVAL_SECONDS</code> seconds.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks.status_report_task","title":"status_report_task","text":"<pre><code>status_report_task(scheduler: BaseScheduler) -&gt; Job\n</code></pre> <p>Schedule a task to report the status.</p>"},{"location":"reference/agent/#jobbergate_agent.tasks.trigger_garbage_collections","title":"trigger_garbage_collections  <code>async</code>","text":"<pre><code>trigger_garbage_collections(\n    interval_between_calls: int = 60,\n) -&gt; None\n</code></pre> <p>Trigger maintenance tasks on the Jobbergate API.</p>"},{"location":"reference/agent/#jobbergate_agent.utils","title":"utils","text":""},{"location":"reference/agent/#jobbergate_agent.utils.exception","title":"exception","text":"<p>Core module for exception related operations</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.AuthTokenError","title":"AuthTokenError","text":"<p>             Bases: <code>ClusterAgentError</code></p> <p>Raise exception when there are connection issues with the backend</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.ClusterAgentError","title":"ClusterAgentError","text":"<p>             Bases: <code>Buzz</code></p> <p>Raise exception when execution command returns an error</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.JobSubmissionError","title":"JobSubmissionError","text":"<p>             Bases: <code>ClusterAgentError</code></p> <p>Raise exception when a job cannot be submitted raises any error</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.JobbergateApiError","title":"JobbergateApiError","text":"<p>             Bases: <code>ClusterAgentError</code></p> <p>Raise exception when communication with Jobbergate API fails</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.ProcessExecutionError","title":"ProcessExecutionError","text":"<p>             Bases: <code>ClusterAgentError</code></p> <p>Raise exception when execution command returns an error</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.SbatchError","title":"SbatchError","text":"<p>             Bases: <code>ClusterAgentError</code></p> <p>Raise exception when sbatch raises any error</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.SlurmParameterParserError","title":"SlurmParameterParserError","text":"<p>             Bases: <code>ClusterAgentError</code></p> <p>Raise exception when Slurm mapper or SBATCH parser face any error</p>"},{"location":"reference/agent/#jobbergate_agent.utils.exception.handle_errors_async","title":"handle_errors_async  <code>async</code>","text":"<pre><code>handle_errors_async(\n    message: str,\n    raise_exc_class: Union[\n        Type[Exception], None\n    ] = Exception,\n    raise_args: Optional[Iterable[Any]] = None,\n    raise_kwargs: Optional[Mapping[str, Any]] = None,\n    handle_exc_class: Union[\n        Type[Exception], Tuple[Type[Exception], ...]\n    ] = Exception,\n    do_finally: Callable[[], None] = noop,\n    do_except: Callable[[DoExceptParams], None] = noop,\n    do_else: Callable[[], None] = noop,\n) -&gt; Iterator[None]\n</code></pre> <p>Async context manager that will intercept exceptions and repackage them with a message attached.</p> <p>Example:</p> <p>.. code-block:: python</p> <p>with handle_errors(\"It didn't work\"):        some_code_that_might_raise_an_exception()</p> <p>:param: message:           The message to attach to the raised exception. :param: raise_exc_class:   The exception type to raise with the constructed message                            if an exception is caught in the managed context.</p> <pre><code>                       Defaults to Exception.\n\n                       If ``None`` is passed, no new exception will be raised and only the\n                       ``do_except``, ``do_else``, and ``do_finally``\n                       functions will be called.\n</code></pre> <p>:param: raise_args:        Additional positional args (after the constructed message) that will                            passed when raising an instance of the <code>raise_exc_class</code>. :param: raise_kwargs:      Keyword args that will be passed when raising an instance of the                            <code>raise_exc_class</code>. :param: handle_exc_class:  Limits the class of exceptions that will be intercepted                            Any other exception types will not be caught and re-packaged.                            Defaults to Exception (will handle all exceptions). May also be                            provided as a tuple of multiple exception types to handle. :param: do_finally:        A function that should always be called at the end of the block.                            Should take no parameters. :param: do_except:         A function that should be called only if there was an exception.                            Must accept one parameter that is an instance of the                            <code>DoExceptParams</code> dataclass. Note that the <code>do_except</code>                            method is passed the original exception. :param: do_else:           A function that should be called only if there were no                            exceptions encountered.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.logging","title":"logging","text":"<p>Core module for logging operations</p>"},{"location":"reference/agent/#jobbergate_agent.utils.logging.log_error","title":"log_error","text":"<pre><code>log_error(params: DoExceptParams)\n</code></pre> <p>Provide a utility function to log a Buzz-based exception and the stack-trace of the error's context.</p> <p>:param: params: A DoExceptParams instance containing the original exception, a                 message describing it, and the stack trace of the error.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.logging.logger_wraps","title":"logger_wraps","text":"<pre><code>logger_wraps(\n    *,\n    entry: bool = True,\n    exit: bool = True,\n    level: str = \"DEBUG\"\n)\n</code></pre> <p>Decorator to wrap a function with logging statements.</p> Reference <p>https://loguru.readthedocs.io/en/stable/resources/recipes.html</p>"},{"location":"reference/agent/#jobbergate_agent.utils.plugin","title":"plugin","text":"<p>Provide to the agent the ability to load custom plugins that are installed on the same environment.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.plugin.load_plugins","title":"load_plugins","text":"<pre><code>load_plugins(plugin_name: str) -&gt; Dict[str, Any]\n</code></pre> <p>Discover and load plugins available to the agent, allowing for third party ones to be included.</p> <p>Notice the ones shipped with the agent are also declared on the <code>pyproject.toml</code> file as plugins, even though they could be easily loaded directly from source. This aims to support tests and to demonstrate how to use the plugin system.</p> Reference <p>https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/</p>"},{"location":"reference/agent/#jobbergate_agent.utils.scheduler","title":"scheduler","text":"<p>Provide the task scheduler for the agent and the main loop to run it.</p> <p>Custom tasks can be added to the agent as installable plugins, which are discovered at runtime.</p> References <p>https://github.com/agronholm/apscheduler https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins</p>"},{"location":"reference/agent/#jobbergate_agent.utils.scheduler.JobbergateTask","title":"JobbergateTask","text":"<p>             Bases: <code>Protocol</code></p> <p>Protocol to be implemented by any task that is expected to run on the scheduler.</p> __call__ <pre><code>__call__(scheduler: BaseScheduler) -&gt; Union[Job, None]\n</code></pre> <p>Specify a callable used to schedule a task and return the resulting job.</p> <p>This is handled to client code to give them the opportunity to handle their own configuration and to access the rich flexibility of the scheduler API.</p> <p>None can also be returned if no task is going to be scheduled due to internal business logic.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.scheduler.init_scheduler","title":"init_scheduler","text":"<pre><code>init_scheduler() -&gt; BaseScheduler\n</code></pre> <p>Initialize the scheduler and schedule all tasks.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.scheduler.schedule_tasks","title":"schedule_tasks","text":"<pre><code>schedule_tasks(scheduler: BaseScheduler) -&gt; None\n</code></pre> <p>Discovery and schedule all tasks to be run by the agent.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.scheduler.shut_down_scheduler","title":"shut_down_scheduler","text":"<pre><code>shut_down_scheduler(\n    scheduler: BaseScheduler, wait: bool = True\n) -&gt; None\n</code></pre> <p>Shutdown the scheduler.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.user_mapper","title":"user_mapper","text":"<p>Provide to the agent a way to map email addresses from Jobbergate local Slurm users.</p> <p>Custom mappers can be added to the agent as installable plugins, which are discovered at runtime.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.user_mapper.SlurmUserMapper","title":"SlurmUserMapper  <code>module-attribute</code>","text":"<pre><code>SlurmUserMapper = Mapping[str, str]\n</code></pre> <p>Slurm user mappers are mappings from email addresses to local Slurm users.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.user_mapper.SingleUserMapper","title":"SingleUserMapper  <code>dataclass</code>","text":"<p>             Bases: <code>Mapping</code></p> <p>A user mapper that always returns the same user.</p> __post_init__ <pre><code>__post_init__()\n</code></pre> <p>Validate the user mapper by asserting it is not an empty string.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.user_mapper.SlurmUserMapperFactory","title":"SlurmUserMapperFactory","text":"<p>             Bases: <code>Protocol</code></p> <p>Protocol to be implemented by plugins on client code.</p> <p>A callable with no arguments is expected in order to handle to client code the configuration and initialization of any custom user mapper. Any object that implements the <code>Mapping</code> protocol can be returned.</p> __call__ <pre><code>__call__() -&gt; SlurmUserMapper\n</code></pre> <p>Specify the signature to build a user mapper.</p>"},{"location":"reference/agent/#jobbergate_agent.utils.user_mapper.manufacture","title":"manufacture","text":"<pre><code>manufacture() -&gt; SlurmUserMapper\n</code></pre> <p>Create an instance of a Slurm user mapper given the app configuration.</p>"},{"location":"reference/api/","title":"Jobbergate API Reference","text":""},{"location":"reference/api/#jobbergate_api","title":"jobbergate_api","text":"<p>Main components of the application: routers, config, main, pagination and create super user script.</p>"},{"location":"reference/api/#jobbergate_api.apps","title":"apps","text":"<p>Resources of the API.</p>"},{"location":"reference/api/#jobbergate_api.apps.clusters","title":"clusters","text":"<p>Module to track agent's health on the clusters.</p>"},{"location":"reference/api/#jobbergate_api.apps.clusters.models","title":"models","text":"<p>Database models for the cluster health resource.</p> ClusterStatus <p>             Bases: <code>CommonMixin</code>, <code>TimestampMixin</code>, <code>Base</code></p> <p>Cluster status table definition.</p> is_healthy <code>property</code> <pre><code>is_healthy: bool\n</code></pre> <p>Return True if the last_reported time is before now plus the interval in seconds between pings.</p>"},{"location":"reference/api/#jobbergate_api.apps.clusters.routers","title":"routers","text":"<p>Cluster status API endpoints.</p> get_cluster_status <code>async</code> <pre><code>get_cluster_status(\n    secure_session: SecureSession = Depends(\n        secure_session(\n            Permissions.CLUSTERS_READ, commit=False\n        )\n    )\n)\n</code></pre> <p>Get the status of the cluster.</p> report_cluster_status <code>async</code> <pre><code>report_cluster_status(\n    interval: int = Query(\n        description=\"The interval in seconds between pings.\",\n        gt=0,\n    ),\n    secure_session: SecureSession = Depends(\n        secure_session(\n            Permissions.CLUSTERS_UPDATE,\n            ensure_client_id=True,\n        )\n    ),\n)\n</code></pre> <p>Report the status of the cluster.</p>"},{"location":"reference/api/#jobbergate_api.apps.clusters.schemas","title":"schemas","text":"<p>Schema definitions for the cluster app.</p> ClusterStatusView <p>             Bases: <code>BaseModel</code></p> <p>Describes the status of a cluster.</p>"},{"location":"reference/api/#jobbergate_api.apps.constants","title":"constants","text":"<p>Constants to be shared by all models.</p>"},{"location":"reference/api/#jobbergate_api.apps.constants.FileType","title":"FileType","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>File type enum.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies","title":"dependencies","text":"<p>Router dependencies shared for multiple resources.</p> Note <p>The dependencies can be reused multiple times, since FastAPI caches the results.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.CrudServices","title":"CrudServices","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Provide a container class for the CRUD services.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.FileServices","title":"FileServices","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Provide a container class for the file services.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.SecureService","title":"SecureService  <code>dataclass</code>","text":"<p>             Bases: <code>SecureSession</code></p> <p>Dataclass to hold the secure session and the bucket.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.Services","title":"Services","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Provide a container class for the services.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.get_bucket_name","title":"get_bucket_name","text":"<pre><code>get_bucket_name(\n    override_bucket_name: str | None = None,\n) -&gt; str\n</code></pre> <p>Get the bucket name based on the environment.</p> <p>The name can be overridden when multi tenancy is enabled by passing a bucket name.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.get_bucket_url","title":"get_bucket_url","text":"<pre><code>get_bucket_url() -&gt; str | None\n</code></pre> <p>Get the bucket url based on the environment.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.s3_bucket","title":"s3_bucket  <code>async</code>","text":"<pre><code>s3_bucket(\n    bucket_name: str, s3_url: str | None\n) -&gt; AsyncIterator[Bucket]\n</code></pre> <p>Create a bucket using a context manager.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.secure_services","title":"secure_services","text":"<pre><code>secure_services(\n    *scopes: str,\n    permission_mode: PermissionMode = PermissionMode.ALL,\n    commit: bool = True,\n    ensure_email: bool = False,\n    ensure_client_id: bool = False\n)\n</code></pre> <p>Dependency to bind database services to a secure session.</p>"},{"location":"reference/api/#jobbergate_api.apps.dependencies.service_factory","title":"service_factory","text":"<pre><code>service_factory(\n    session: AsyncSession, bucket: Bucket\n) -&gt; Iterator[Services]\n</code></pre> <p>Create the services and bind them to a db section and s3 bucket.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation","title":"file_validation","text":"<p>Validation methods for the uploaded files.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.SyntaxValidationEquation","title":"SyntaxValidationEquation  <code>module-attribute</code>","text":"<pre><code>SyntaxValidationEquation = Callable[\n    [Union[str, bytes]], bool\n]\n</code></pre> <p>Type alias describing the function signature used to validate file syntax.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.syntax_validation_dispatch","title":"syntax_validation_dispatch  <code>module-attribute</code>","text":"<pre><code>syntax_validation_dispatch: dict[\n    str, SyntaxValidationEquation\n] = {}\n</code></pre> <p>Dictionary mapping file extensions to the function used to validate their syntax.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.check_uploaded_file_syntax","title":"check_uploaded_file_syntax","text":"<pre><code>check_uploaded_file_syntax(\n    file_obj: BinaryIO, filename: str\n) -&gt; bool\n</code></pre> <p>Check the syntax of a given file.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.get_suffix","title":"get_suffix","text":"<pre><code>get_suffix(filename: str) -&gt; str\n</code></pre> <p>Get the suffix (file extension) from a given filename.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.is_valid_jinja2_template","title":"is_valid_jinja2_template","text":"<pre><code>is_valid_jinja2_template(\n    template: Union[str, bytes]\n) -&gt; bool\n</code></pre> <p>Check if a given jinja2 template is valid by creating a Template object and trying to render it.</p> <p>:param str template: Jinja2 template. :return bool: Boolean indicating if the template is valid or not.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.is_valid_python_file","title":"is_valid_python_file","text":"<pre><code>is_valid_python_file(\n    source_code: Union[str, bytes]\n) -&gt; bool\n</code></pre> <p>Check if a given Python source code is valid by parsing it into an AST node.</p> <p>:param Union[str, bytes] source_code: Python source code. :return bool: Boolean indicating if the source code is valid or not.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.is_valid_yaml_file","title":"is_valid_yaml_file","text":"<pre><code>is_valid_yaml_file(yaml_file: Union[str, bytes]) -&gt; bool\n</code></pre> <p>Check if a given YAML file is valid by parsing it with yaml.safe_load.</p> <p>:param Union[str, bytes] yaml_file: YAML file. :return bool: Boolean indicating if the file is valid or not.</p>"},{"location":"reference/api/#jobbergate_api.apps.file_validation.register_syntax_validator","title":"register_syntax_validator","text":"<pre><code>register_syntax_validator(*file_extensions: str)\n</code></pre> <p>Use this decorator to register file syntax validation functions.</p> <p>It creates a new entry on <code>validation_dispatch</code>, mapping the equation to the file extensions that are provided as arguments.</p> <p>Raise ValueError if the provided file extensions do not start with a dot.</p> <p>:return ValidationEquation: The decorated function.</p>"},{"location":"reference/api/#jobbergate_api.apps.garbage_collector","title":"garbage_collector","text":"<p>Delete unused files from jobbergate's file storage.</p>"},{"location":"reference/api/#jobbergate_api.apps.garbage_collector.delete_files_from_bucket","title":"delete_files_from_bucket  <code>async</code>","text":"<pre><code>delete_files_from_bucket(\n    bucket, files_to_delete: set[str]\n) -&gt; None\n</code></pre> <p>Delete files from the bucket.</p>"},{"location":"reference/api/#jobbergate_api.apps.garbage_collector.garbage_collect","title":"garbage_collect  <code>async</code>","text":"<pre><code>garbage_collect(\n    session,\n    bucket,\n    list_of_tables,\n    background_tasks: BackgroundTasks,\n) -&gt; None\n</code></pre> <p>Delete unused files from jobbergate's file storage.</p>"},{"location":"reference/api/#jobbergate_api.apps.garbage_collector.get_files_to_delete","title":"get_files_to_delete  <code>async</code>","text":"<pre><code>get_files_to_delete(session, table, bucket) -&gt; set[str]\n</code></pre> <p>Get a set of files to delete.</p>"},{"location":"reference/api/#jobbergate_api.apps.garbage_collector.get_set_of_files_from_bucket","title":"get_set_of_files_from_bucket  <code>async</code>","text":"<pre><code>get_set_of_files_from_bucket(bucket, table) -&gt; set[str]\n</code></pre> <p>Get a set of files from the bucket.</p>"},{"location":"reference/api/#jobbergate_api.apps.garbage_collector.get_set_of_files_from_database","title":"get_set_of_files_from_database  <code>async</code>","text":"<pre><code>get_set_of_files_from_database(session, table) -&gt; set[str]\n</code></pre> <p>Get a set of files from the database.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_script_templates","title":"job_script_templates","text":"<p>Module for the job script templates.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_script_templates.constants","title":"constants","text":"<p>Describe constants for the job script templates module.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_script_templates.models","title":"models","text":"<p>Database models for the job_script_templates resource.</p> JobScriptTemplate <p>             Bases: <code>CrudMixin</code>, <code>Base</code></p> <p>Job script template table definition.</p> <p>Notice all relationships are lazy=\"raise\" to prevent n+1 implicit queries. This means that the relationships must be explicitly eager loaded using helper functions in the class.</p> <p>Attributes:</p> Name Type Description <code>identifier</code> <code>Mapped[Optional[str]]</code> <p>The identifier of the job script template.</p> <code>template_vars</code> <code>Mapped[dict[str, Any]]</code> <p>The template variables of the job script template.</p> <p>See Mixin class definitions for other columns.</p> include_files <code>classmethod</code> <pre><code>include_files(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load files.</p> searchable_fields <code>classmethod</code> <pre><code>searchable_fields()\n</code></pre> <p>Add identifier as a searchable field.</p> sortable_fields <code>classmethod</code> <pre><code>sortable_fields()\n</code></pre> <p>Add identifier as a sortable field.</p> JobScriptTemplateFile <p>             Bases: <code>FileMixin</code>, <code>Base</code></p> <p>Job script template files table definition.</p> <p>Attributes:</p> Name Type Description <code>parent_id</code> <code>Mapped[int]</code> <p>A foreign key to the parent job script template row.</p> <code>file_type</code> <code>Mapped[FileType]</code> <p>The type of the file.</p> <p>See Mixin class definitions for other columns</p> WorkflowFile <p>             Bases: <code>FileMixin</code>, <code>Base</code></p> <p>Workflow file table definition.</p> <p>Attributes:</p> Name Type Description <code>parent_id</code> <code>Mapped[int]</code> <p>A foreign key to the parent job script template row.</p> <code>runtime_config</code> <code>Mapped[dict[str, Any]]</code> <p>The runtime configuration of the workflow.</p> <p>See Mixin class definitions for other columns</p>"},{"location":"reference/api/#jobbergate_api.apps.job_script_templates.routers","title":"routers","text":"<p>Router for the Job Script Template resource.</p> job_script_template_clone <code>async</code> <pre><code>job_script_template_clone(\n    id_or_identifier: int | str = Path(),\n    clone_request: JobTemplateCloneRequest | None = None,\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Clone a job script template by id or identifier.</p> job_script_template_create <code>async</code> <pre><code>job_script_template_create(\n    create_request: JobTemplateCreateRequest,\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Create a new job script template.</p> job_script_template_delete <code>async</code> <pre><code>job_script_template_delete(\n    id_or_identifier: int | str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_DELETE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Delete a job script template by id or identifier.</p> job_script_template_delete_file <code>async</code> <pre><code>job_script_template_delete_file(\n    id_or_identifier: int | str = Path(),\n    file_name: str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_DELETE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Delete a file from a job script template by id or identifier.</p> job_script_template_garbage_collector <code>async</code> <pre><code>job_script_template_garbage_collector(\n    background_tasks: BackgroundTasks,\n    secure_services: SecureService = Depends(\n        secure_services(Permissions.JOB_TEMPLATES_DELETE)\n    ),\n)\n</code></pre> <p>Delete all unused files from jobbergate templates on the file storage.</p> job_script_template_get <code>async</code> <pre><code>job_script_template_get(\n    id_or_identifier: int | str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a job script template by id or identifier.</p> job_script_template_get_file <code>async</code> <pre><code>job_script_template_get_file(\n    id_or_identifier: int | str = Path(),\n    file_name: str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a job script template file by id or identifier.</p> Note <p>See https://fastapi.tiangolo.com/advanced/custom-response/#streamingresponse</p> job_script_template_get_list <code>async</code> <pre><code>job_script_template_get_list(\n    list_params: ListParams = Depends(),\n    include_null_identifier: bool = Query(False),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a list of job script templates.</p> job_script_template_update <code>async</code> <pre><code>job_script_template_update(\n    update_request: JobTemplateUpdateRequest,\n    id_or_identifier: int | str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_UPDATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Update a job script template by id or identifier.</p> job_script_template_upload_file <code>async</code> <pre><code>job_script_template_upload_file(\n    id_or_identifier: int | str = Path(),\n    file_type: FileType = Path(),\n    filename: str | None = Query(None, max_length=255),\n    upload_file: UploadFile | None = File(\n        None, description=\"File to upload\"\n    ),\n    previous_filename: str | None = Query(\n        None,\n        description=\"Previous name of the file in case a rename is needed\",\n        max_length=255,\n    ),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Upload a file to a job script template by id or identifier.</p> job_script_workflow_delete_file <code>async</code> <pre><code>job_script_workflow_delete_file(\n    id_or_identifier: int | str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_DELETE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Delete a workflow file from a job script template by id or identifier.</p> job_script_workflow_get_file <code>async</code> <pre><code>job_script_workflow_get_file(\n    id_or_identifier: int | str = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a workflow file by id or identifier.</p> Note <p>See https://fastapi.tiangolo.com/advanced/custom-response/#streamingresponse</p> job_script_workflow_upload_file <code>async</code> <pre><code>job_script_workflow_upload_file(\n    id_or_identifier: int | str = Path(),\n    runtime_config: RunTimeConfig | None = Body(\n        None,\n        description=\"Runtime configuration is optional when the workflow file already exists\",\n    ),\n    upload_file: UploadFile = File(\n        ..., description=\"File to upload\"\n    ),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_TEMPLATES_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Upload a file to a job script workflow by id or identifier.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_script_templates.schemas","title":"schemas","text":"<p>Provide schemas for the job script templates component.</p> JobTemplateCloneRequest <p>             Bases: <code>BaseModel</code></p> <p>Schema for the request to clone a job template.</p> empty_str_to_none <pre><code>empty_str_to_none(value)\n</code></pre> <p>Coerce an empty string value to None.</p> not_empty_str <pre><code>not_empty_str(value)\n</code></pre> <p>Do not allow a string value to be empty.</p> JobTemplateCreateRequest <p>             Bases: <code>BaseModel</code></p> <p>Schema for the request to create a job template.</p> empty_str_to_none <pre><code>empty_str_to_none(value)\n</code></pre> <p>Coerce an empty string value to None.</p> not_empty_str <pre><code>not_empty_str(value)\n</code></pre> <p>Do not allow a string value to be empty.</p> JobTemplateDetailedView <p>             Bases: <code>JobTemplateListView</code></p> <p>Schema for the request to an entry.</p> <p>Notice the files default to None, as they are not always requested, to differentiate between an empty list when they are requested, but no file is found.</p> JobTemplateListView <p>             Bases: <code>TableResource</code></p> <p>Schema for the response to get a list of entries.</p> JobTemplateUpdateRequest <p>             Bases: <code>BaseModel</code></p> <p>Schema for the request to update a job template.</p> empty_str_to_none <pre><code>empty_str_to_none(value)\n</code></pre> <p>Coerce an empty string value to None.</p> not_empty_str <pre><code>not_empty_str(value)\n</code></pre> <p>Do not allow a string value to be empty.</p> RunTimeConfig <p>             Bases: <code>BaseModel</code></p> <p>Schema for the runtime config of a job template.</p> <p>Notice this includes user supplied variables, so it has no predefined field. It also loads the contend directly from the json at the request payload.</p> __get_validators__ <code>classmethod</code> <pre><code>__get_validators__()\n</code></pre> <p>Get the validators.</p> validate_to_json <code>classmethod</code> <pre><code>validate_to_json(value)\n</code></pre> <p>Validate the produced json.</p> TemplateFileDetailedView <p>             Bases: <code>BaseModel</code></p> <p>Schema for the response to get a template file.</p> WorkflowFileDetailedView <p>             Bases: <code>BaseModel</code></p> <p>Schema for the response to get a workflow file.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_script_templates.services","title":"services","text":"<p>Services for the job_script_templates resource, including module specific business logic.</p> JobScriptTemplateFileService <p>             Bases: <code>FileService</code></p> <p>Provide an empty derived class of FileService.</p> <p>Although it doesn't do anything, it fixes errors with mypy:     error: Value of type variable \"FileModel\" of \"FileService\" cannot be \"JobScriptTemplateFile\"     error: Value of type variable \"FileModel\" of \"FileService\" cannot be \"WorkflowFile\"</p> JobScriptTemplateService <p>             Bases: <code>CrudService</code></p> <p>Provide a CrudService that overloads the list query builder and locator logic.</p> build_list_query <pre><code>build_list_query(\n    sort_ascending: bool = True,\n    search: str | None = None,\n    sort_field: str | None = None,\n    include_archived: bool = True,\n    include_files: bool = False,\n    include_parent: bool = False,\n    include_null_identifier: bool = True,\n    **additional_filters\n) -&gt; Select\n</code></pre> <p>List all job_script_templates.</p> create <code>async</code> <pre><code>create(**incoming_data) -&gt; CrudModel\n</code></pre> <p>Add a new row for the model to the database.</p> locate_where_clause <pre><code>locate_where_clause(id_or_identifier: Any) -&gt; Any\n</code></pre> <p>Locate an instance using the id or identifier field.</p> update <code>async</code> <pre><code>update(locator: Any, **incoming_data) -&gt; CrudModel\n</code></pre> <p>Update a row by locator with supplied data.</p> validate_identifier <pre><code>validate_identifier(identifier: str | None) -&gt; None\n</code></pre> <p>Validate that the identifier is not an empty string nor composed only by digits.</p> <p>Raise a ServiceError with status code 422 if the validation fails.</p> <p>Many of the job-script-template endpoints use the id or identifier interchangeably as a path parameter. With that, we need to ensure that the identifier is not a number, as that would be identified as id.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_scripts","title":"job_scripts","text":"<p>Provide module for job_scripts.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_scripts.models","title":"models","text":"<p>Database model for the JobScript resource.</p> JobScript <p>             Bases: <code>CrudMixin</code>, <code>Base</code></p> <p>Job script table definition.</p> <p>Notice all relationships are lazy=\"raise\" to prevent n+1 implicit queries. This means that the relationships must be explicitly eager loaded using helper functions in the class.</p> <p>Attributes:</p> Name Type Description <code>parent_template_id</code> <code>Mapped[int]</code> <p>The id of the parent template.</p> <p>See Mixin class definitions for other columns.</p> include_files <code>classmethod</code> <pre><code>include_files(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load files.</p> include_parent <code>classmethod</code> <pre><code>include_parent(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load parent data.</p> sortable_fields <code>classmethod</code> <pre><code>sortable_fields()\n</code></pre> <p>Add parent_template_id as a sortable field.</p> JobScriptFile <p>             Bases: <code>FileMixin</code>, <code>Base</code></p> <p>Job script files table definition.</p> <p>Attributes:</p> Name Type Description <code>parent_template_id</code> <p>The id of the parent template.</p> <code>file_type</code> <code>Mapped[FileType]</code> <p>The type of the file.</p> <p>See Mixin class definitions for other columns</p>"},{"location":"reference/api/#jobbergate_api.apps.job_scripts.routers","title":"routers","text":"<p>Router for the Job Script Template resource.</p> job_script_auto_clean_unused_entries <pre><code>job_script_auto_clean_unused_entries(\n    background_tasks: BackgroundTasks,\n    secure_services: SecureService = Depends(\n        secure_services(Permissions.JOB_SCRIPTS_DELETE)\n    ),\n)\n</code></pre> <p>Automatically clean unused job scripts depending on a threshold.</p> job_script_clone <code>async</code> <pre><code>job_script_clone(\n    id: int = Path(),\n    clone_request: JobScriptCloneRequest | None = None,\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Clone a job script by its id.</p> job_script_create <code>async</code> <pre><code>job_script_create(\n    create_request: JobScriptCreateRequest,\n    secure_services: SecureService = Depends(\n        secure_services(Permissions.JOB_SCRIPTS_CREATE)\n    ),\n)\n</code></pre> <p>Create a stand alone job script.</p> job_script_create_from_template <code>async</code> <pre><code>job_script_create_from_template(\n    create_request: JobScriptCreateRequest,\n    render_request: RenderFromTemplateRequest,\n    id_or_identifier: int | str = Path(...),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Create a new job script from a job script template.</p> job_script_delete <code>async</code> <pre><code>job_script_delete(\n    id: int = Path(...),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_DELETE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Delete a job script template by id or identifier.</p> job_script_delete_file <code>async</code> <pre><code>job_script_delete_file(\n    id: int = Path(...),\n    file_name: str = Path(...),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_DELETE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Delete a file from a job script template by id or identifier.</p> job_script_garbage_collector <pre><code>job_script_garbage_collector(\n    background_tasks: BackgroundTasks,\n    secure_services: SecureService = Depends(\n        secure_services(Permissions.JOB_SCRIPTS_DELETE)\n    ),\n)\n</code></pre> <p>Delete all unused files from job scripts on the file storage.</p> job_script_get <code>async</code> <pre><code>job_script_get(\n    id: int = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a job script by id.</p> job_script_get_file <code>async</code> <pre><code>job_script_get_file(\n    id: int = Path(...),\n    file_name: str = Path(...),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a job script file.</p> Note <p>See https://fastapi.tiangolo.com/advanced/custom-response/#streamingresponse</p> job_script_get_list <code>async</code> <pre><code>job_script_get_list(\n    list_params: ListParams = Depends(),\n    from_job_script_template_id: int | None = Query(\n        None,\n        description=\"Filter job-scripts by the job-script-template-id they were created from.\",\n    ),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Get a list of job scripts.</p> job_script_update <code>async</code> <pre><code>job_script_update(\n    update_params: JobScriptUpdateRequest,\n    id: int = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_UPDATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Update a job script template by id or identifier.</p> job_script_upload_file <code>async</code> <pre><code>job_script_upload_file(\n    id: int = Path(...),\n    file_type: FileType = Path(...),\n    filename: str | None = Query(None, max_length=255),\n    upload_file: UploadFile | None = File(\n        None, description=\"File to upload\"\n    ),\n    previous_filename: str | None = Query(\n        None,\n        description=\"Previous name of the file in case a rename is needed\",\n        max_length=255,\n    ),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SCRIPTS_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Upload a file to a job script.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_scripts.schemas","title":"schemas","text":"<p>JobScript resource schema.</p> JobScriptCloneRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for cloning JobScript instances.</p> JobScriptCreateRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for creating JobScript instances.</p> JobScriptDetailedView <p>             Bases: <code>JobScriptListView</code></p> <p>Model to match database for the JobScript resource.</p> JobScriptFileDetailedView <p>             Bases: <code>BaseModel</code></p> <p>Model for the job_script_files field of the JobScript resource.</p> JobScriptListView <p>             Bases: <code>TableResource</code></p> <p>Model to match database for the JobScript resource.</p> JobScriptUpdateRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for updating JobScript instances.</p> RenderFromTemplateRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for creating a JobScript entry from a template.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_scripts.services","title":"services","text":"<p>Services for the job_scripts resource, including module specific business logic.</p> AutoCleanResponse <p>             Bases: <code>NamedTuple</code></p> <p>Named tuple for the response of auto_clean_unused_job_scripts.</p> JobScriptCrudService <p>             Bases: <code>CrudService</code></p> <p>Provide an empty derived class of CrudService.</p> <p>Although it doesn't do anything, it fixes an error with mypy:     error: Value of type variable \"CrudModel\" of \"CrudService\" cannot be \"JobScript\"</p> auto_clean_unused_job_scripts <code>async</code> <pre><code>auto_clean_unused_job_scripts() -&gt; AutoCleanResponse\n</code></pre> <p>Automatically clean unused job scripts depending on a threshold.</p> <p>Based on the last time each job script was updated or used to create a job submission, this will archived job scripts that were unarchived and delete jos script that were archived.</p> delete <code>async</code> <pre><code>delete(locator: Any) -&gt; None\n</code></pre> <p>Extend delete a row by locator.</p> <p>Orphaned job-scripts are now allowed on Jobbergate. However, the agent relies on them to submit jobs after requesting GET /agent/pending. This creates a race condition and errors occur when a job-script is deleted before the agent handles its submissions.</p> <p>To avoid this, they are marked as reject in this scenario.</p> JobScriptFileService <p>             Bases: <code>FileService</code></p> <p>Provide an empty derived class of FileService.</p> <p>Although it doesn't do anything, it fixes an error with mypy:     error: Value of type variable \"FileModel\" of \"FileService\" cannot be \"JobScriptFile\"</p> upsert <code>async</code> <pre><code>upsert(\n    parent_id: int,\n    filename: str,\n    upload_content: str | bytes | UploadFile | None,\n    previous_filename: str | None = None,\n    **upsert_kwargs\n) -&gt; FileModel\n</code></pre> <p>Upsert a file instance.</p> validate_entrypoint_file <code>async</code> <pre><code>validate_entrypoint_file(parent_id: int, filename: str)\n</code></pre> <p>Validate that the entrypoint file is unique.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_scripts.tools","title":"tools","text":"<p>Provide a convenience class for managing job-script files.</p> inject_sbatch_params <pre><code>inject_sbatch_params(\n    job_script_data_as_string: str, sbatch_params: list[str]\n) -&gt; str\n</code></pre> <p>Inject sbatch params into job script.</p> <p>Given the job script as job_script_data_as_string, inject the sbatch params in the correct location.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_submissions","title":"job_submissions","text":"<p>Provide module for job_submissions.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_submissions.constants","title":"constants","text":"<p>Describe constants for the job_submissions module.</p> JobSubmissionStatus <p>             Bases: <code>AutoNameEnum</code></p> <p>Defines the set of possible statuses for a Job Submission.</p> SlurmJobState <p>             Bases: <code>AutoNameEnum</code></p> <p>Defines the set of possible states for a job submitted to Slurm.</p> SlurmJobStateDetails <code>dataclass</code> <p>Defines the details for a given SlurmJobState including abbreviation and description.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_submissions.models","title":"models","text":"<p>Database model for the JobSubmission resource.</p> JobSubmission <p>             Bases: <code>CrudMixin</code>, <code>Base</code></p> <p>Job submission table definition.</p> <p>Notice all relationships are lazy=\"raise\" to prevent n+1 implicit queries. This means that the relationships must be explicitly eager loaded using helper functions in the class.</p> <p>Attributes:</p> Name Type Description <code>job_script_id</code> <code>Mapped[int]</code> <p>Id number of the job scrip this submissions is based on.</p> <code>execution_directory</code> <code>Mapped[str]</code> <p>The directory where the job is executed.</p> <code>slurm_job_id</code> <code>Mapped[int]</code> <p>The id of the job in the slurm queue.</p> <code>slurm_job_state</code> <code>Mapped[SlurmJobState]</code> <p>The Slurm Job state as reported by the agent</p> <code>slurm_job_info</code> <code>Mapped[str]</code> <p>Detailed information about the  Slurm Job as reported by the agent</p> <code>client_id</code> <code>Mapped[str]</code> <p>The id of the custer this submission runs on.</p> <code>status</code> <code>Mapped[JobSubmissionStatus]</code> <p>The status of the job submission.</p> <code>report_message</code> <code>Mapped[str]</code> <p>The message returned by the job.</p> <code>sbatch_arguments</code> <code>Mapped[list[str]]</code> <p>The arguments used to submit the job to the slurm queue.</p> <p>See Mixin class definitions for other columns</p> include_files <code>classmethod</code> <pre><code>include_files(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load files.</p> include_parent <code>classmethod</code> <pre><code>include_parent(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load parent data.</p> searchable_fields <code>classmethod</code> <pre><code>searchable_fields()\n</code></pre> <p>Add client_id as a searchable field.</p> sortable_fields <code>classmethod</code> <pre><code>sortable_fields()\n</code></pre> <p>Add additional sortable fields.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_submissions.routers","title":"routers","text":"<p>Router for the JobSubmission resource.</p> job_submission_agent_update <code>async</code> <pre><code>job_submission_agent_update(\n    update_params: JobSubmissionAgentUpdateRequest,\n    id: int = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_UPDATE,\n            ensure_client_id=True,\n        )\n    ),\n)\n</code></pre> <p>Update a job_submission with slurm_job_state and slurm_job_info.</p> <p>Note that if the new slurm_job_state is a termination state, the job submission status will be updated.</p> job_submission_create <code>async</code> <pre><code>job_submission_create(\n    create_request: JobSubmissionCreateRequest,\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_CREATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Create a new job submission.</p> <p>Make a post request to this endpoint with the required values to create a new job submission.</p> job_submission_delete <code>async</code> <pre><code>job_submission_delete(\n    id: int = Path(\n        ...,\n        description=\"id of the job submission to delete\",\n    ),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_DELETE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Delete job_submission given its id.</p> job_submission_get <code>async</code> <pre><code>job_submission_get(\n    id: int = Path(...),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>Return the job_submission given it's id.</p> job_submission_get_list <code>async</code> <pre><code>job_submission_get_list(\n    list_params: ListParams = Depends(),\n    slurm_job_ids: str | None = Query(\n        None,\n        description=\"Comma-separated list of slurm-job-ids to match active job_submissions\",\n    ),\n    submit_status: JobSubmissionStatus | None = Query(\n        None,\n        description=\"Limit results to those with matching status\",\n    ),\n    from_job_script_id: int | None = Query(\n        None,\n        description=\"Filter job-submissions by the job-script-id they were created from.\",\n    ),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_READ, commit=False\n        )\n    ),\n)\n</code></pre> <p>List job_submissions for the authenticated user.</p> job_submission_update <code>async</code> <pre><code>job_submission_update(\n    update_params: JobSubmissionUpdateRequest,\n    id: int = Path(),\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_UPDATE,\n            ensure_email=True,\n        )\n    ),\n)\n</code></pre> <p>Update a job_submission given its id.</p> job_submissions_agent_active <code>async</code> <pre><code>job_submissions_agent_active(\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_READ,\n            commit=False,\n            ensure_client_id=True,\n        )\n    )\n)\n</code></pre> <p>Get a list of active job submissions for the cluster-agent.</p> job_submissions_agent_pending <code>async</code> <pre><code>job_submissions_agent_pending(\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_READ,\n            commit=False,\n            ensure_client_id=True,\n        )\n    )\n)\n</code></pre> <p>Get a list of pending job submissions for the cluster-agent.</p> job_submissions_agent_rejected <code>async</code> <pre><code>job_submissions_agent_rejected(\n    rejected_request: JobSubmissionAgentRejectedRequest,\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_UPDATE,\n            ensure_client_id=True,\n        )\n    ),\n)\n</code></pre> <p>Update a job_submission to indicate that it was rejected by Slurm.</p> job_submissions_agent_submitted <code>async</code> <pre><code>job_submissions_agent_submitted(\n    submitted_request: JobSubmissionAgentSubmittedRequest,\n    secure_services: SecureService = Depends(\n        secure_services(\n            Permissions.JOB_SUBMISSIONS_UPDATE,\n            ensure_client_id=True,\n        )\n    ),\n)\n</code></pre> <p>Update a job_submission to indicate that it was submitted to Slurm.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_submissions.schemas","title":"schemas","text":"<p>JobSubmission resource schema.</p> ActiveJobSubmission <p>             Bases: <code>BaseModel</code></p> <p>Specialized model for the cluster-agent to pull an active job_submission.</p> JobSubmissionAgentRejectedRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for marking JobSubmission instances as REJECTED.</p> JobSubmissionAgentSubmittedRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for marking JobSubmission instances as SUBMITTED.</p> JobSubmissionAgentUpdateRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for updating JobSubmission instances.</p> JobSubmissionCreateRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for creating JobSubmission instances.</p> empty_str_to_none <pre><code>empty_str_to_none(v)\n</code></pre> <p>Ensure empty strings are converted to None to avoid problems with Path downstream.</p> JobSubmissionDetailedView <p>             Bases: <code>JobSubmissionListView</code></p> <p>Complete model to match the database for the JobSubmission resource.</p> JobSubmissionListView <p>             Bases: <code>TableResource</code></p> <p>Partial model to match the database for the JobSubmission resource.</p> JobSubmissionUpdateRequest <p>             Bases: <code>BaseModel</code></p> <p>Request model for updating JobSubmission instances.</p> empty_str_to_none <pre><code>empty_str_to_none(v)\n</code></pre> <p>Ensure empty strings are converted to None to avoid problems with Path downstream.</p> PendingJobSubmission <p>             Bases: <code>BaseModel</code></p> <p>Specialized model for the cluster-agent to pull pending job_submissions.</p> <p>Model also includes data from its job_script and application sources.</p>"},{"location":"reference/api/#jobbergate_api.apps.job_submissions.services","title":"services","text":"<p>Services for the job_submissions resource, including module specific business logic.</p> JobSubmissionService <p>             Bases: <code>CrudService</code></p> <p>Provide a CrudService that overloads the list query builder.</p> build_list_query <pre><code>build_list_query(\n    sort_ascending: bool = True,\n    search: str | None = None,\n    sort_field: str | None = None,\n    include_archived: bool = True,\n    include_files: bool = False,\n    include_parent: bool = False,\n    filter_slurm_job_ids: list[int] | None = None,\n    **additional_filters\n) -&gt; Select\n</code></pre> <p>List all job_script_templates.</p>"},{"location":"reference/api/#jobbergate_api.apps.models","title":"models","text":"<p>Functionalities to be shared by all models.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.ArchiveMixin","title":"ArchiveMixin","text":"<p>Add is_archived column to a table.</p> <p>Attributes:</p> Name Type Description <code>is_archived</code> <code>Mapped[bool]</code> <p>Specify is a row is considered archived, hidden it by default when listing rows.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.Base","title":"Base","text":"<p>             Bases: <code>DeclarativeBase</code></p> <p>Base class for all models.</p> References <p>https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html</p>"},{"location":"reference/api/#jobbergate_api.apps.models.CommonMixin","title":"CommonMixin","text":"<p>Provide a dynamic table and helper methods for displaying instances.</p> __str__ <pre><code>__str__()\n</code></pre> <p>Produce a pretty string representation of the class instance.</p> __tablename__ <code>classmethod</code> <pre><code>__tablename__() -&gt; str\n</code></pre> <p>Dynamically create table name based on the class name.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.CrudMixin","title":"CrudMixin","text":"<p>             Bases: <code>CommonMixin</code>, <code>IdMixin</code>, <code>TimestampMixin</code>, <code>OwnerMixin</code>, <code>NameMixin</code>, <code>ArchiveMixin</code></p> <p>Add needed columns and declared attributes for all models that support a CrudService.</p> include_files <code>classmethod</code> <pre><code>include_files(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load files.</p> <p>This should be overridden by derived classes.</p> include_parent <code>classmethod</code> <pre><code>include_parent(query: Select) -&gt; Select\n</code></pre> <p>Include custom options on a query to eager load parent data.</p> <p>This should be overridden by derived classes.</p> searchable_fields <code>classmethod</code> <pre><code>searchable_fields()\n</code></pre> <p>Describe the fields that may be used in search queries.</p> sortable_fields <code>classmethod</code> <pre><code>sortable_fields()\n</code></pre> <p>Describe the fields that may be used for sorting queries.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.FileMixin","title":"FileMixin","text":"<p>             Bases: <code>CommonMixin</code>, <code>TimestampMixin</code></p> <p>Add needed columns and declared attributes for all models that support a FileService.</p> <p>Attributes:</p> Name Type Description <code>parent_id</code> <code>Mapped[int]</code> <p>The id of the parent row in another table.          Note: Derived classes should override this attribute to make it a foreign key as well.</p> <code>description</code> <code>Mapped[int]</code> <p>The description of the job script template.</p> file_key <pre><code>file_key() -&gt; str\n</code></pre> <p>Dynamically define the s3 key for the file.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.IdMixin","title":"IdMixin","text":"<p>Provide an id primary_key column.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Mapped[int]</code> <p>The id of the job script template.</p> <code>cloned_from</code> <code>Mapped[int]</code> <p>Specify the id of the row that this row was cloned from.</p> cloned_from_id <pre><code>cloned_from_id() -&gt; Mapped[int | None]\n</code></pre> <p>Dynamically create a cloned_from_id column.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.NameMixin","title":"NameMixin","text":"<p>Add name and description columns to a table.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>Mapped[str]</code> <p>The name of the job script template.</p> <code>description</code> <code>Mapped[str | None]</code> <p>The description of the job script template.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.OwnerMixin","title":"OwnerMixin","text":"<p>Add an owner email columns to a table.</p> <p>Attributes:</p> Name Type Description <code>owner_email</code> <code>Mapped[str]</code> <p>The email of the owner of the job script template.</p>"},{"location":"reference/api/#jobbergate_api.apps.models.TimestampMixin","title":"TimestampMixin","text":"<p>Add timestamp columns to a table.</p> <p>Attributes:</p> Name Type Description <code>created_at</code> <code>Mapped[DateTime]</code> <p>The date and time when the job script template was created.</p> <code>updated_at</code> <code>Mapped[DateTime]</code> <p>The date and time when the job script template was updated.</p>"},{"location":"reference/api/#jobbergate_api.apps.permissions","title":"permissions","text":"<p>Provide a module that describes permissions in the API.</p>"},{"location":"reference/api/#jobbergate_api.apps.permissions.Permissions","title":"Permissions","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Describe the permissions that may be used for protecting Jobbergate routes.</p>"},{"location":"reference/api/#jobbergate_api.apps.schemas","title":"schemas","text":"<p>Define app-wide, reusable pydantic schemas.</p>"},{"location":"reference/api/#jobbergate_api.apps.schemas.IgnoreLazyGetterDict","title":"IgnoreLazyGetterDict","text":"<p>             Bases: <code>GetterDict</code></p> <p>A custom GetterDict to avoid triggering lazy-loads when accessing attributes.</p> <p>In this way, only explicitly joined relationships will be loaded and included in the response.</p> References <p>https://github.com/tiangolo/fastapi/discussions/5942</p> __getitem__ <pre><code>__getitem__(key: str) -&gt; Any\n</code></pre> <p>Customize getitem to avoid triggering lazy-loads when accessing attributes.</p> get <pre><code>get(key: Any, default: Any = None) -&gt; Any\n</code></pre> <p>Get an attribute value from the object, or return a default value if the attribute does not exist.</p>"},{"location":"reference/api/#jobbergate_api.apps.schemas.ListParams","title":"ListParams","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describe the shared parameters for a list request.</p>"},{"location":"reference/api/#jobbergate_api.apps.schemas.TableResource","title":"TableResource","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes a base for table models that include basic, common info.</p>"},{"location":"reference/api/#jobbergate_api.apps.services","title":"services","text":"<p>Provide a generic services for CRUD and file operations in routers.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.BucketBoundService","title":"BucketBoundService","text":"<p>Provide base class for services that bind to an s3 bucket.</p> <p>This class holds a reference to the bucket and provides methods to bind and unbind the bucket. It also keeps track of all instances of the service so that they can be iterated over.</p> bucket <code>property</code> <pre><code>bucket: Bucket\n</code></pre> <p>Fetch the currently bound bucket.</p> <p>Raise an exception if the service is not bound to a bucket.</p> __init__ <pre><code>__init__()\n</code></pre> <p>Initialize the service with a null bucket.</p> bind_bucket <pre><code>bind_bucket(bucket: Bucket)\n</code></pre> <p>Bind the service to a bucket.</p> bound_bucket <pre><code>bound_bucket(bucket: Bucket)\n</code></pre> <p>Provide a context within which the service is bound to a bucket.</p> unbind_bucket <pre><code>unbind_bucket()\n</code></pre> <p>Unbind the service from a bucket.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.CrudModelProto","title":"CrudModelProto","text":"<p>             Bases: <code>Protocol</code></p> <p>Provide a protocol for models that can be operated on by the CrudService.</p> <p>This protocol enables type hints for editors and type checking with mypy.</p> <p>These services would best be served by an intersection type so that the model_type is actually specified to inherit from both the mixins and the Base. This would allow static type checkers to recognize that all of the columns in a mixin are available and that the class can be instantiated in the create method. However, intersection types are not supported yet. For more information, see this discussion: https://github.com/python/typing/issues/213</p> __init__ <pre><code>__init__(**kwargs)\n</code></pre> <p>Declare that the protocol can be instantiated.</p> __tablename__ <pre><code>__tablename__() -&gt; str\n</code></pre> <p>Declare that the protocol has a method to dynamically produce the table name.</p> include_files <code>classmethod</code> <pre><code>include_files(query: Select) -&gt; Select\n</code></pre> <p>Declare that the protocol has a method to include files in a query.</p> include_parent <code>classmethod</code> <pre><code>include_parent(query: Select) -&gt; Select\n</code></pre> <p>Declare that the protocol has a method to include details about the parent entry in a query.</p> searchable_fields <code>classmethod</code> <pre><code>searchable_fields() -&gt; set[str]\n</code></pre> <p>Declare that the protocol has searchable fields.</p> sortable_fields <code>classmethod</code> <pre><code>sortable_fields() -&gt; set[str]\n</code></pre> <p>Declare that the protocol has sortable fields.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.CrudService","title":"CrudService","text":"<p>             Bases: <code>DatabaseBoundService</code>, <code>Generic[CrudModel]</code></p> <p>Provide a service that can perform various crud operations using a supplied ORM model type.</p> name <code>property</code> <pre><code>name\n</code></pre> <p>Helper property to recover the name of the table.</p> __init__ <pre><code>__init__(model_type: type[CrudModel])\n</code></pre> <p>Initialize the instance with an ORM model type.</p> build_list_query <pre><code>build_list_query(\n    sort_ascending: bool = True,\n    search: str | None = None,\n    sort_field: str | None = None,\n    include_archived: bool = True,\n    include_files: bool = False,\n    include_parent: bool = False,\n    **additional_filters\n) -&gt; Select\n</code></pre> <p>Build the query to list matching rows.</p> <p>Decomposed into a separate function so that deriving subclasses can add additional logic into the query.</p> clone_instance <code>async</code> <pre><code>clone_instance(\n    original_instance: CrudModel, **incoming_data\n) -&gt; CrudModel\n</code></pre> <p>Clone an instance and update it with the supplied data.</p> count <code>async</code> <pre><code>count() -&gt; int\n</code></pre> <p>Count the number of rows in the table on the database.</p> create <code>async</code> <pre><code>create(**incoming_data) -&gt; CrudModel\n</code></pre> <p>Add a new row for the model to the database.</p> delete <code>async</code> <pre><code>delete(locator: Any) -&gt; None\n</code></pre> <p>Delete a row by locator.</p> <p>In almost all cases, the locator will just be an <code>id</code> value.</p> ensure_attribute <pre><code>ensure_attribute(instance: CrudModel, **attributes) -&gt; None\n</code></pre> <p>Ensure that a model instance has the specified values on key attributes.</p> <p>Raises HTTPException if the instance does not have the specified values.</p> get <code>async</code> <pre><code>get(\n    locator: Any,\n    include_files: bool = False,\n    include_parent: bool = False,\n    ensure_attributes: dict[str, Any] | None = None,\n) -&gt; CrudModel\n</code></pre> <p>Get a row by locator.</p> <p>In almost all cases, the locator will just be an <code>id</code> value.</p> <p>Key value pairs can be provided as <code>ensure_attributes</code> to assert that the key fields have the specified values. This is useful to assert email ownership of a row before modifying it, besides any other attribute.</p> list <code>async</code> <pre><code>list(**filter_kwargs) -&gt; list[CrudModel]\n</code></pre> <p>List all crud rows matching specified filters.</p> <p>For details on the supported filters, see the <code>build_list_query()</code> method.</p> locate_where_clause <pre><code>locate_where_clause(locator: Any) -&gt; Any\n</code></pre> <p>Provide the where clause expression to locate a row by locator.</p> <p>This method allows derived classes to locate by alternative identifiers, though locator is an <code>id</code> value in almost all cases. compound primary keys.</p> paginated_list <code>async</code> <pre><code>paginated_list(**filter_kwargs) -&gt; Page[CrudModel]\n</code></pre> <p>List all crud rows matching specified filters with pagination.</p> <p>For details on the supported filters, see the <code>build_list_query()</code> method.</p> update <code>async</code> <pre><code>update(locator: Any, **incoming_data) -&gt; CrudModel\n</code></pre> <p>Update a row by locator with supplied data.</p> <p>In almost all cases, the locator will just be an <code>id</code> value.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.DatabaseBoundService","title":"DatabaseBoundService","text":"<p>Provide base class for services that bind to a database session.</p> <p>This class holds a reference to the session and provides methods to bind and unbind the session. It also keeps track of all instances of the service so that they can be iterated over.</p> session <code>property</code> <pre><code>session: AsyncSession\n</code></pre> <p>Fetch the currently bound session.</p> <p>Raise an exception if the service is not bound to a session.</p> __init__ <pre><code>__init__()\n</code></pre> <p>Instantiate the service with a null session.</p> bind_session <pre><code>bind_session(session: AsyncSession)\n</code></pre> <p>Bind the service to a session.</p> bound_session <pre><code>bound_session(session: AsyncSession)\n</code></pre> <p>Provide a context within which the service is bound to a session.</p> unbind_session <pre><code>unbind_session()\n</code></pre> <p>Unbind the service from a session.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.FileModelProto","title":"FileModelProto","text":"<p>             Bases: <code>Protocol</code></p> <p>Provide a protocol for models that can be operated on by the FileService.</p> <p>This protocol enables type hints for editors and type checking with mypy.</p> <p>These services would best be served by an intersection type so that the model_type is actually specified to inherit from both the mixins and the Base. This would allow static type checkers to recognize that all of the columns in a mixin are available and that the class can be instantiated in the create method. However, intersection types are not supported yet. For more information, see this discussion: https://github.com/python/typing/issues/213</p> __init__ <pre><code>__init__(**kwargs)\n</code></pre> <p>Declare that the protocol can be instantiated.</p> __tablename__ <pre><code>__tablename__() -&gt; str\n</code></pre> <p>Declare that the protocol has a method to dynamically produce the table name.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.FileService","title":"FileService","text":"<p>             Bases: <code>DatabaseBoundService</code>, <code>BucketBoundService</code>, <code>Generic[FileModel]</code></p> <p>Proide a service that can perform various file management operations using a supplied ORM model type.</p> __init__ <pre><code>__init__(model_type: type[FileModel])\n</code></pre> <p>Initialize the instance with an ORM model type.</p> add_instance <code>async</code> <pre><code>add_instance(\n    parent_id, filename, upsert_kwargs\n) -&gt; FileModel\n</code></pre> <p>Add a file instance to the database.</p> clone_instance <code>async</code> <pre><code>clone_instance(\n    original_instance: FileModel, new_parent_id: int\n) -&gt; FileModel\n</code></pre> <p>Clone a file instance and assign it to a new parent-id.</p> copy_file_content <code>async</code> <pre><code>copy_file_content(\n    source_instance: FileModel,\n    destination_instance: FileModel,\n) -&gt; None\n</code></pre> <p>Copy the content of a file from one instance to another.</p> delete <code>async</code> <pre><code>delete(instance: FileModel) -&gt; None\n</code></pre> <p>Delete a file from s3 and from the corresponding table.</p> find_children <code>async</code> <pre><code>find_children(parent_id: int) -&gt; list[FileModel]\n</code></pre> <p>Find matching instances by parent_id.</p> get <code>async</code> <pre><code>get(parent_id: int, filename: str) -&gt; FileModel\n</code></pre> <p>Get a single instances by its parent id and filename (primary keys).</p> <p>Requires that one and only one result is found.</p> get_file_content <code>async</code> <pre><code>get_file_content(instance: FileModel) -&gt; bytes\n</code></pre> <p>Get the full contents for a file entry.</p> render <code>async</code> <pre><code>render(\n    instance: FileModel, parameters: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Render the file using Jinja2.</p> <p>The parameters are passed to the template as the context, and two of them are supported: * Directly as the context, for instance, if the template contains <code>{{ foo }}</code>. * As a <code>data</code> key for backward compatibility, for instance, if the   template contains <code>{{ data.foo }}</code>.</p> stream_file_content <code>async</code> <pre><code>stream_file_content(instance: FileModel) -&gt; StreamingBody\n</code></pre> <p>Stream the content of a file using a boto3 StreamingBody.</p> <p>The StreamingBody is an async generator that can be used for a StreamingResponse in a FastAPI app.</p> upload_file_content <code>async</code> <pre><code>upload_file_content(\n    instance: FileModel,\n    upload_content: str | bytes | UploadFile,\n) -&gt; None\n</code></pre> <p>Upload the content of a file to s3.</p> upsert <code>async</code> <pre><code>upsert(\n    parent_id: int,\n    filename: str,\n    upload_content: str | bytes | UploadFile | None,\n    previous_filename: str | None = None,\n    **upsert_kwargs\n) -&gt; FileModel\n</code></pre> <p>Upsert a file instance.</p> <p>This method will either create a new file instance or update an existing one.</p> <p>If a 'previous_filename' is provided, it is replaced by the new one, being deleted in the process. In this case, the 'upload_content' is optional, as the content can be copied from the previous file.</p>"},{"location":"reference/api/#jobbergate_api.apps.services.ServiceError","title":"ServiceError","text":"<p>             Bases: <code>HTTPException</code></p> <p>Make HTTPException more friendly by changing the default behavior so that the first arg is a message.</p> <p>Also needed to play nice with py-buzz methods.</p> __init__ <pre><code>__init__(\n    message,\n    status_code=status.HTTP_400_BAD_REQUEST,\n    **kwargs\n)\n</code></pre> <p>Instantiate the HTTPException super class by setting detail to the message provided.</p>"},{"location":"reference/api/#jobbergate_api.config","title":"config","text":"<p>Provide configuration settings for the app.</p> <p>Pull settings from environment variables or a .env file if available.</p>"},{"location":"reference/api/#jobbergate_api.config.LogLevelEnum","title":"LogLevelEnum","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Provide an enumeration class describing the available log levels.</p>"},{"location":"reference/api/#jobbergate_api.config.Settings","title":"Settings","text":"<p>             Bases: <code>BaseSettings</code></p> <p>Provide a pydantic <code>BaseSettings</code> model for the application settings.</p>"},{"location":"reference/api/#jobbergate_api.config.Settings.remove_blank_env","title":"remove_blank_env","text":"<pre><code>remove_blank_env(values)\n</code></pre> <p>Remove any settings from the environment that are blank strings.</p> <p>This allows the defaults to be set if <code>docker-compose</code> defaults a missing environment variable to a blank string.</p>"},{"location":"reference/api/#jobbergate_api.config.check_none_or_all_keys_exist","title":"check_none_or_all_keys_exist","text":"<pre><code>check_none_or_all_keys_exist(\n    input_dict: dict, target_keys: set\n) -&gt; bool\n</code></pre> <p>Verify if none or all of the target keys exist in the input dictionary.</p>"},{"location":"reference/api/#jobbergate_api.email_notification","title":"email_notification","text":"<p>Email notification system for Jobbergate.</p>"},{"location":"reference/api/#jobbergate_api.email_notification.EmailManager","title":"EmailManager  <code>dataclass</code>","text":"<p>Email manager.</p>"},{"location":"reference/api/#jobbergate_api.email_notification.EmailManager.send_email","title":"send_email","text":"<pre><code>send_email(\n    to_emails: Union[str, List[str]],\n    subject: str,\n    skip_on_failure: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Send an email using this manager.</p>"},{"location":"reference/api/#jobbergate_api.email_notification.EmailNotificationError","title":"EmailNotificationError","text":"<p>             Bases: <code>Buzz</code></p> <p>Custom error to be raised for problems at the email notification system.</p>"},{"location":"reference/api/#jobbergate_api.email_notification.notify_submission_rejected","title":"notify_submission_rejected","text":"<pre><code>notify_submission_rejected(\n    job_submission_id: Union[str, int],\n    report_message: str,\n    to_emails: Union[str, List[str]],\n) -&gt; None\n</code></pre> <p>Notify an email or a list of emails about a job submission that has been rejected.</p>"},{"location":"reference/api/#jobbergate_api.logging","title":"logging","text":"<p>Provide functions to configure logging.</p>"},{"location":"reference/api/#jobbergate_api.logging.InterceptHandler","title":"InterceptHandler","text":"<p>             Bases: <code>Handler</code></p> <p>Specialized handler to intercept log lines sent to standard logging by 3rd party tools.</p>"},{"location":"reference/api/#jobbergate_api.logging.InterceptHandler.emit","title":"emit","text":"<pre><code>emit(record: logging.LogRecord) -&gt; None\n</code></pre> <p>Handle emission of the log record.</p>"},{"location":"reference/api/#jobbergate_api.logging.init_logging","title":"init_logging","text":"<pre><code>init_logging()\n</code></pre> <p>Initialize logging by setting log level for normal logger and for the SQL logging.</p>"},{"location":"reference/api/#jobbergate_api.main","title":"main","text":"<p>Main file to startup the fastapi server.</p>"},{"location":"reference/api/#jobbergate_api.main.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Provide a health-check endpoint for the app.</p>"},{"location":"reference/api/#jobbergate_api.main.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan(_: FastAPI)\n</code></pre> <p>Provide a lifespan context for the app.</p> <p>Will set up logging and cleanup database engines when the app is shut down.</p> <p>This is the preferred method of handling lifespan events in FastAPI. For mor details, see: https://fastapi.tiangolo.com/advanced/events/</p>"},{"location":"reference/api/#jobbergate_api.main.validation_exception_handler","title":"validation_exception_handler  <code>async</code>","text":"<pre><code>validation_exception_handler(\n    request: Request, err: RequestValidationError\n)\n</code></pre> <p>Handle exceptions from pydantic validators.</p>"},{"location":"reference/api/#jobbergate_api.meta_mapper","title":"meta_mapper","text":"<p>Provides a metadata-mapper for re-using descriptions and examples across many pydantic models.</p>"},{"location":"reference/api/#jobbergate_api.meta_mapper.MetaField","title":"MetaField  <code>dataclass</code>","text":"<p>Provides a dataclass that describes the metadata that will be mapped for an individual field.</p>"},{"location":"reference/api/#jobbergate_api.meta_mapper.MetaMapper","title":"MetaMapper","text":"<p>Maps re-usable metadata for fields. Should be used with the <code>schema_extra</code> property of a Model's Config.</p> <p>Example::</p> <pre><code>foo_meta = MetaMapper(\n    id=MetaField(\n        description=\"The unique identifier of this Foo\",\n        example=13,\n    ),\n    name=MetaField(\n        description=\"The name of this Foo\",\n        example=\"Bar\",\n    ),\n    is_active=MetaField(\n        description=\"Indicates if this Foo is active\",\n        example=True,\n    ),\n    created_at=MetaField(\n        description=\"The timestamp indicating when this Foo was created\",\n        example=\"2023-08-18T13:55:37.172285\",\n    ),\n)\n\n\nclass CreateFooRequest(BaseModel):\n    name: str\n    is_active: Optional[bool]\n\n    class Config:\n        schema_extra = foo_meta\n\n\nclass UpdateFooRequest(BaseModel):\n    name: Optional[str] = None\n    is_active: Optional[bool] = None\n\n    class Config:\n        schema_extra = foo_meta\n\n\nclass FooResponse(BaseModel):\n    id: int\n    name: str\n    is_active: bool\n    created_at: DateTime\n\n    class Config:\n        schema_extra = foo_meta\n</code></pre> <p>Notice in this example that the fields may be required in some models and optional in others. Further, not all the fields are present in all the models. The MetaMapper allows the models to share field metadata and yet define the fields independently.</p>"},{"location":"reference/api/#jobbergate_api.meta_mapper.MetaMapper.__call__","title":"__call__","text":"<pre><code>__call__(schema: Dict[str, Any], *_) -&gt; None\n</code></pre> <p>Map the MetaFields onto the metadata properties of a schema.</p> <p>Should be used in a pydantic Model's Config class.</p>"},{"location":"reference/api/#jobbergate_api.meta_mapper.MetaMapper.__init__","title":"__init__","text":"<pre><code>__init__(**kwargs: MetaField)\n</code></pre> <p>Map the kwargs into the field_dict.</p> <p>All kwargs should be MetaFields, but any object duck-typed to include all the attributes of a MetaField will be accepted.</p>"},{"location":"reference/api/#jobbergate_api.rabbitmq_notification","title":"rabbitmq_notification","text":"<p>RabbitMQ notification system for Jobbergate.</p>"},{"location":"reference/api/#jobbergate_api.rabbitmq_notification.publish_status_change","title":"publish_status_change  <code>async</code>","text":"<pre><code>publish_status_change(\n    job_submission: JobSubmission,\n    organization_id: Optional[str] = None,\n)\n</code></pre> <p>Publish a status change for a JobSubmission to the RabbitMQ exchange used for notifications.</p>"},{"location":"reference/api/#jobbergate_api.rabbitmq_notification.rabbitmq_connect","title":"rabbitmq_connect  <code>async</code>","text":"<pre><code>rabbitmq_connect(exchange_name=None, do_purge=False)\n</code></pre> <p>Connect to a RabbitMQ queue and exchange.</p>"},{"location":"reference/api/#jobbergate_api.safe_types","title":"safe_types","text":"<p>Provide \"safe\" type annotatons to avoid issues with mypy and Fast api.</p> Regarding the JobScript and JobSubmission type <p>These are needed for the relationships in the models. This avoids issues with circular imports at runtime.</p> Regarding the Bucket type <p>This is necessary because the Bucket type isn't importable from the normal boto3 modules. Instead, it must be imported from the mypy typing plugin for boto3.</p> <p>The \"type\" must be bound to Any when not type checking because FastAPI does type inspection for its dependency injection system. Thus, there must be a type associated with Bucket even when not type checking.</p>"},{"location":"reference/api/#jobbergate_api.security","title":"security","text":"<p>Instantiates armasec resources for auth on api endpoints using project settings.</p> <p>Also provides a factory function for TokenSecurity to reduce boilerplate.</p>"},{"location":"reference/api/#jobbergate_api.security.IdentityPayload","title":"IdentityPayload","text":"<p>             Bases: <code>TokenPayload</code></p> <p>Provide an extension of TokenPayload that includes the user's identity.</p>"},{"location":"reference/api/#jobbergate_api.security.IdentityPayload.extract_organization","title":"extract_organization","text":"<pre><code>extract_organization(values)\n</code></pre> <p>Extract the organization_id from the organization payload.</p> <p>The payload is expected to look like: {     ...,     \"organization\": {         \"adf99e01-5cd5-41ac-a1af-191381ad7780\": {             ...         }     } }</p>"},{"location":"reference/api/#jobbergate_api.security.get_domain_configs","title":"get_domain_configs","text":"<pre><code>get_domain_configs() -&gt; list[DomainConfig]\n</code></pre> <p>Return a list of DomainConfig objects based on the input variables for the Settings class.</p>"},{"location":"reference/api/#jobbergate_api.security.lockdown_with_identity","title":"lockdown_with_identity","text":"<pre><code>lockdown_with_identity(\n    *scopes: str,\n    permission_mode: PermissionMode = PermissionMode.ALL,\n    ensure_email: bool = False,\n    ensure_organization: bool = False,\n    ensure_client_id: bool = False\n)\n</code></pre> <p>Provide a wrapper to be used with dependency injection to extract identity on a secured route.</p>"},{"location":"reference/api/#jobbergate_api.storage","title":"storage","text":"<p>Provide functions to interact with persistent data storage.</p>"},{"location":"reference/api/#jobbergate_api.storage.EngineFactory","title":"EngineFactory","text":"<p>Provide a factory class that creates engines and keeps track of them in an engine mapping.</p> <p>This is used for multi-tenancy and database URL creation at request time.</p>"},{"location":"reference/api/#jobbergate_api.storage.EngineFactory.__init__","title":"__init__","text":"<pre><code>__init__()\n</code></pre> <p>Initialize the EngineFactory.</p>"},{"location":"reference/api/#jobbergate_api.storage.EngineFactory.auto_session","title":"auto_session  <code>async</code>","text":"<pre><code>auto_session(\n    override_db_name: str | None = None, commit: bool = True\n) -&gt; typing.AsyncIterator[AsyncSession]\n</code></pre> <p>Get an asynchronous database session.</p> <p>Gets a new session from the correct engine in the engine map.</p>"},{"location":"reference/api/#jobbergate_api.storage.EngineFactory.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Close all engines stored in the engine map and clears the engine_map.</p>"},{"location":"reference/api/#jobbergate_api.storage.EngineFactory.get_engine","title":"get_engine","text":"<pre><code>get_engine(\n    override_db_name: str | None = None,\n) -&gt; AsyncEngine\n</code></pre> <p>Get a database engine.</p> <p>If the database url is already in the engine map, return the engine stored there. Otherwise, build a new one, store it, and return the new engine.</p>"},{"location":"reference/api/#jobbergate_api.storage.SecureSession","title":"SecureSession  <code>dataclass</code>","text":"<p>Provide a container class for an IdentityPayload and AsyncSesson for the current request.</p>"},{"location":"reference/api/#jobbergate_api.storage.build_db_url","title":"build_db_url","text":"<pre><code>build_db_url(\n    override_db_name: str | None = None,\n    force_test: bool = False,\n    asynchronous: bool = True,\n) -&gt; str\n</code></pre> <p>Build a database url based on settings.</p> <p>If <code>force_test</code> is set, build from the test database settings. If <code>asynchronous</code> is set, use asyncpg. If <code>override_db_name</code> replace the database name in the settings with the supplied value.</p>"},{"location":"reference/api/#jobbergate_api.storage.handle_fk_error","title":"handle_fk_error","text":"<pre><code>handle_fk_error(\n    _: fastapi.Request,\n    err: asyncpg.exceptions.ForeignKeyViolationError,\n)\n</code></pre> <p>Unpack metadata from a ForeignKeyViolationError and return a 409 response.</p>"},{"location":"reference/api/#jobbergate_api.storage.render_sql","title":"render_sql","text":"<pre><code>render_sql(session: AsyncSession, query) -&gt; str\n</code></pre> <p>Render a sqlalchemy query into a string for debugging.</p>"},{"location":"reference/api/#jobbergate_api.storage.search_clause","title":"search_clause","text":"<pre><code>search_clause(\n    search_terms: str, searchable_fields: set\n) -&gt; ColumnElement[bool]\n</code></pre> <p>Create search clause across searchable fields with search terms.</p> <p>Regarding the False first argument to or_():     The or_() function must have one fixed positional argument.     See: https://docs.sqlalchemy.org/en/20/core/sqlelement.html#sqlalchemy.sql.expression.or_</p>"},{"location":"reference/api/#jobbergate_api.storage.secure_session","title":"secure_session","text":"<pre><code>secure_session(\n    *scopes: str,\n    permission_mode: PermissionMode = PermissionMode.ALL,\n    commit: bool = True,\n    ensure_email: bool = False,\n    ensure_organization: bool = False,\n    ensure_client_id: bool = False\n)\n</code></pre> <p>Provide an injectable for FastAPI that checks permissions and returns a database session for this request.</p> <p>This should be used for all secured routes that need access to the database. It will commit the transaction upon completion of the request. If an exception occurs, it will rollback the transaction. If multi-tenancy is enabled, it will retrieve a database session for the database associated with the client_id found in the requesting user's auth token.</p> <p>If testing mode is enabled, it will flush the session instead of committing changes to the database.</p> <p>Note that the session should NEVER be explicitly committed anywhere else in the source code.</p>"},{"location":"reference/api/#jobbergate_api.storage.sort_clause","title":"sort_clause","text":"<pre><code>sort_clause(\n    sort_field: str,\n    sortable_fields: set,\n    sort_ascending: bool,\n) -&gt; typing.Union[Mapped, UnaryExpression, Case]\n</code></pre> <p>Create a sort clause given a sort field, the list of sortable fields, and a sort_ascending flag.</p>"},{"location":"reference/api/#jobbergate_api.version","title":"version","text":"<p>Provide the version of the package.</p>"},{"location":"reference/api/#jobbergate_api.version.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Get the version from the metadata if available, otherwise from pyproject.toml.</p> <p>Returns \"unknown\" if both methods fail.</p>"},{"location":"reference/api/#jobbergate_api.version.get_version_from_metadata","title":"get_version_from_metadata","text":"<pre><code>get_version_from_metadata() -&gt; str\n</code></pre> <p>Get the version from the metadata.</p> <p>This is the preferred method of getting the version, but only works if the package is properly installed in a Python environment.</p>"},{"location":"reference/api/#jobbergate_api.version.get_version_from_poetry","title":"get_version_from_poetry","text":"<pre><code>get_version_from_poetry() -&gt; str\n</code></pre> <p>Get the version from pyproject.toml.</p> <p>This is a fallback method if the package is not installed, but just copied and accessed locally, like in a Docker image.</p>"},{"location":"reference/cli/","title":"Jobbergate CLI Reference","text":""},{"location":"reference/cli/#jobbergate_cli","title":"jobbergate_cli","text":"<p>Jobbergate command-line interface and app library</p>"},{"location":"reference/cli/#jobbergate_cli.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(name: str)\n</code></pre> <p>Overload module attribute lookup to warn if 'appform' is being imported because it is deprecated.</p>"},{"location":"reference/cli/#jobbergate_cli.application_base","title":"application_base","text":"<p>Provide a stub module to maintain compatibility with previous versions.</p> <p>Issue a deprecation warning when this module is imported from if JOBBERGATE_COMPATIBILITY_MODE is enabled.</p> <p>If JOBBERGATE_COMPATIBILITY_MODE is not enabled, raise an import error when this module is imported.</p>"},{"location":"reference/cli/#jobbergate_cli.auth","title":"auth","text":"<p>Utilities for handling auth in jobbergate-cli.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.clear_token_cache","title":"clear_token_cache","text":"<pre><code>clear_token_cache()\n</code></pre> <p>Clears the token cache.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.fetch_auth_tokens","title":"fetch_auth_tokens","text":"<pre><code>fetch_auth_tokens(ctx: JobbergateContext) -&gt; TokenSet\n</code></pre> <p>Fetch an access token (and possibly a refresh token) from Auth0.</p> <p>Prints out a URL for the user to use to authenticate and polls the token endpoint to fetch it when the browser-based process finishes</p>"},{"location":"reference/cli/#jobbergate_cli.auth.init_persona","title":"init_persona","text":"<pre><code>init_persona(\n    ctx: JobbergateContext,\n    token_set: Optional[TokenSet] = None,\n)\n</code></pre> <p>Initializes the \"persona\" which contains the tokens and email address for a user.</p> <p>Retrieves the access token for the user from the cache.</p> <p>Token is retrieved from the cache, validated, and user email is extracted.</p> <p>If the access token is expired, a new one will be acquired via the cached refresh token (if there is one).</p> <p>Saves token_set to cache.</p> <p>Returns the persona.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.load_tokens_from_cache","title":"load_tokens_from_cache","text":"<pre><code>load_tokens_from_cache() -&gt; TokenSet\n</code></pre> <p>Loads an access token (and a refresh token if one exists) from the cache.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.open_on_browser","title":"open_on_browser","text":"<pre><code>open_on_browser(url: str) -&gt; bool\n</code></pre> <p>Open the url on the browser using webbrowser.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.refresh_access_token","title":"refresh_access_token","text":"<pre><code>refresh_access_token(\n    ctx: JobbergateContext, token_set: TokenSet\n)\n</code></pre> <p>Attempt to fetch a new access token given a refresh token in a token_set.</p> <p>Sets the access token in-place.</p> <p>If refresh fails, notify the user that they need to log in again.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.save_tokens_to_cache","title":"save_tokens_to_cache","text":"<pre><code>save_tokens_to_cache(token_set: TokenSet)\n</code></pre> <p>Saves tokens from a token_set to the cache.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.show_login_message","title":"show_login_message","text":"<pre><code>show_login_message(verification_uri: str)\n</code></pre> <p>Show a message to the user with a link to the auth provider to login.</p>"},{"location":"reference/cli/#jobbergate_cli.auth.validate_token_and_extract_identity","title":"validate_token_and_extract_identity","text":"<pre><code>validate_token_and_extract_identity(\n    token_set: TokenSet,\n) -&gt; IdentityData\n</code></pre> <p>Validate the access_token from a TokenSet and extract the user's identity data.</p> Validations <ul> <li>Checks if access_token is not empty.</li> <li>Checks timestamp on the access token.</li> <li>Checks that the client_id is present</li> <li>Checks that email is present</li> </ul> <p>Reports an error in the logs and to the user if there is an issue with the access_token.</p>"},{"location":"reference/cli/#jobbergate_cli.compat","title":"compat","text":"<p>Provide compatibility to the previous version of Jobbergate CLI for users who have automation or are familiar with the old commands</p>"},{"location":"reference/cli/#jobbergate_cli.compat.add_legacy_compatible_commands","title":"add_legacy_compatible_commands","text":"<pre><code>add_legacy_compatible_commands(app: typer.Typer)\n</code></pre> <p>Add commands from the restructured CLI under the previous names for the commands to the root <code>typer</code> app.</p>"},{"location":"reference/cli/#jobbergate_cli.config","title":"config","text":"<p>Configuration file, sets all the necessary environment variables. Can load configuration from a dotenv file if supplied.</p>"},{"location":"reference/cli/#jobbergate_cli.config.Settings","title":"Settings","text":"<p>             Bases: <code>BaseSettings</code></p> <p>Provide a <code>pydantic</code> settings model to hold configuration values loaded from the environment.</p>"},{"location":"reference/cli/#jobbergate_cli.config.Settings.is_onsite_mode","title":"is_onsite_mode  <code>property</code>","text":"<pre><code>is_onsite_mode: bool\n</code></pre> <p>Check if the SBATCH_PATH is set, indicating that the CLI is running in on-site mode.</p>"},{"location":"reference/cli/#jobbergate_cli.config.Settings.Config","title":"Config","text":"<p>Customize behavior of the Settings class. Especially, enable the use of dotenv to load settings from a <code>.env</code> file instead of the environment.</p>"},{"location":"reference/cli/#jobbergate_cli.config.Settings.compute_extra_settings","title":"compute_extra_settings","text":"<pre><code>compute_extra_settings(values)\n</code></pre> <p>Compute settings values that are based on other settings values.</p>"},{"location":"reference/cli/#jobbergate_cli.config.build_settings","title":"build_settings","text":"<pre><code>build_settings(*args, **kwargs)\n</code></pre> <p>Return a Setting object and handle ValidationError with a message to the user.</p>"},{"location":"reference/cli/#jobbergate_cli.constants","title":"constants","text":"<p>Provide constants that may be used throughout the CLI modules.</p>"},{"location":"reference/cli/#jobbergate_cli.constants.FileType","title":"FileType","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>File type enum.</p>"},{"location":"reference/cli/#jobbergate_cli.constants.PaginationChoices","title":"PaginationChoices","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enum describing the type of pagination that is available for list commands.</p>"},{"location":"reference/cli/#jobbergate_cli.constants.PaginationChoices.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the string representation of the enum.</p>"},{"location":"reference/cli/#jobbergate_cli.constants.SortOrder","title":"SortOrder","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enum descring the type of sort orders that are available for list commands.</p>"},{"location":"reference/cli/#jobbergate_cli.exceptions","title":"exceptions","text":"<p>Provide exceptions and custom handlers for the CLI.</p>"},{"location":"reference/cli/#jobbergate_cli.exceptions.Abort","title":"Abort","text":"<p>             Bases: <code>Buzz</code></p> <p>A special exception used to abort the Jobbergate CLI.</p> <p>Collects information provided for use in the <code>handle_abort</code> context manager.</p>"},{"location":"reference/cli/#jobbergate_cli.exceptions.Abort.__init__","title":"__init__","text":"<pre><code>__init__(\n    message,\n    *args,\n    subject=None,\n    support=False,\n    log_message=None,\n    sentry_context=None,\n    original_error=None,\n    warn_only=False,\n    **kwargs\n)\n</code></pre> <p>Initialize the Abort error.</p>"},{"location":"reference/cli/#jobbergate_cli.exceptions.JobbergateCliError","title":"JobbergateCliError","text":"<p>             Bases: <code>Buzz</code></p> <p>A generic exception base class to use in Jobbergate CLI</p>"},{"location":"reference/cli/#jobbergate_cli.exceptions.handle_abort","title":"handle_abort","text":"<pre><code>handle_abort(func)\n</code></pre> <p>Apply a decorator to gracefully handle any Abort errors that happen within the context.</p> <p>Will log the error, dispatch it to Sentry, show a helpful message to the user about the error, and exit.</p>"},{"location":"reference/cli/#jobbergate_cli.jobberappslib","title":"jobberappslib","text":"<p>Provide a stub module to maintain compatibility with previous versions.</p> <p>Issue a deprecation warning when this module is imported from if JOBBERGATE_COMPATIBILITY_MODE is enabled.</p> <p>If JOBBERGATE_COMPATIBILITY_MODE is not enabled, raise an import error when this module is imported.</p>"},{"location":"reference/cli/#jobbergate_cli.logging","title":"logging","text":"<p>Provide initializers for logging.</p>"},{"location":"reference/cli/#jobbergate_cli.logging.init_logs","title":"init_logs","text":"<pre><code>init_logs(verbose=False)\n</code></pre> <p>Initialize logging.</p> <p>If JOBBERGATE_LOG_PATH is set in the config, add a rotatating file log handler. Logs will be retained for 1 week.</p> <p>If verbose is supplied, add a stdout handler at the DEBUG level.</p>"},{"location":"reference/cli/#jobbergate_cli.logging.init_sentry","title":"init_sentry","text":"<pre><code>init_sentry()\n</code></pre> <p>Initialize Sentry if the <code>SENTRY_DSN</code> environment variable is present.</p>"},{"location":"reference/cli/#jobbergate_cli.main","title":"main","text":"<p>Provide main entry point for the Jobbergate CLI App.</p>"},{"location":"reference/cli/#jobbergate_cli.main.login","title":"login","text":"<pre><code>login(ctx: typer.Context)\n</code></pre> <p>Log in to the jobbergate-cli by storing the supplied token argument in the cache.</p>"},{"location":"reference/cli/#jobbergate_cli.main.logout","title":"logout","text":"<pre><code>logout()\n</code></pre> <p>Logs out of the jobbergate-cli. Clears the saved user credentials.</p>"},{"location":"reference/cli/#jobbergate_cli.main.main","title":"main","text":"<pre><code>main(\n    ctx: typer.Context,\n    verbose: bool = typer.Option(\n        False, help=\"Enable verbose logging to the terminal\"\n    ),\n    full: bool = typer.Option(\n        False, help=\"Print all fields from CRUD commands\"\n    ),\n    raw: bool = typer.Option(\n        False,\n        help=\"Print output from CRUD commands as raw json\",\n    ),\n    version: bool = typer.Option(\n        False,\n        help=\"Print the version of jobbergate-cli and exit\",\n    ),\n    ignore_extra_args: str = typer.Option(\n        None,\n        \"--username\",\n        \"-u\",\n        \"--password\",\n        \"-p\",\n        hidden=True,\n        help=\"Ignore extra arguments passed to the command for backward compatibility with the legacy app.\",\n    ),\n)\n</code></pre> <p>Welcome to the Jobbergate CLI!</p> <p>More information can be shown for each command listed below by running it with the --help option.</p>"},{"location":"reference/cli/#jobbergate_cli.main.show_token","title":"show_token","text":"<pre><code>show_token(\n    plain: bool = typer.Option(\n        False, help=\"Show the token in plain text.\"\n    ),\n    refresh: bool = typer.Option(\n        False,\n        help=\"Show the refresh token instead of the access token.\",\n    ),\n    show_prefix: bool = typer.Option(\n        False,\n        \"--prefix\",\n        help=\"Include the 'Bearer' prefix in the output.\",\n    ),\n    show_header: bool = typer.Option(\n        False,\n        \"--header\",\n        help=\"Show the token as it would appear in a request header.\",\n    ),\n    decode: bool = typer.Option(\n        False,\n        \"--decode\",\n        help=\"Show the content of the decoded access token.\",\n    ),\n)\n</code></pre> <p>Show the token for the logged in user.</p> <p>Token output is automatically copied to your clipboard.</p>"},{"location":"reference/cli/#jobbergate_cli.render","title":"render","text":"<p>Provide helpers to render output for users.</p>"},{"location":"reference/cli/#jobbergate_cli.render.StyleMapper","title":"StyleMapper","text":"<p>Provide a mapper that can set <code>rich</code> styles for rendered output of data tables and dicts.</p> <p>The subapps have list endpoints that return sets of values. These are rendered as tables in the output. The StyleMapper class provides a way to simply define styles that should be applied to the columns of the table.</p> <p>Example:</p> <p>The following code will print a table where the columns are colored according to the style_mapper</p> <p>.. code-block: python</p> <p>style_mapper = StyleMapper(        a=\"bold green\",        b=\"red\",        c=\"blue\",    )    envelope = dict(        results=[            dict(a=1, b=2, c=3),            dict(a=4, b=5, c=6),            dict(a=7, b=8, c=9),        ],        pagination=dict(total=3)    )    render_list_results(jb_ctx, envelope, style_mapper)</p>"},{"location":"reference/cli/#jobbergate_cli.render.StyleMapper.__init__","title":"__init__","text":"<pre><code>__init__(**colors: str)\n</code></pre> <p>Initialize the StyleMapper.</p>"},{"location":"reference/cli/#jobbergate_cli.render.StyleMapper.map_style","title":"map_style","text":"<pre><code>map_style(column: str) -&gt; Dict[str, Any]\n</code></pre> <p>Map a column name from the table to display to the style that should be used to render it.</p>"},{"location":"reference/cli/#jobbergate_cli.render.render_dict","title":"render_dict","text":"<pre><code>render_dict(\n    data: Dict[str, Any],\n    title: str = \"Data\",\n    hidden_fields: Optional[List[str]] = None,\n)\n</code></pre> <p>Render a dictionary in a <code>rich</code> <code>Table</code> That shows the key and value of each item.</p> <p>:param: data: The dictionary to render :param: title: The title header to include above the <code>Table</code> output :param: hidden_fields: Keys that should be hidden in the <code>Table</code> output</p>"},{"location":"reference/cli/#jobbergate_cli.render.render_json","title":"render_json","text":"<pre><code>render_json(data: Any)\n</code></pre> <p>Print nicely formatted representation of a JSON serializable python primitive.</p>"},{"location":"reference/cli/#jobbergate_cli.render.render_list_results","title":"render_list_results","text":"<pre><code>render_list_results(\n    ctx: JobbergateContext,\n    envelope: ListResponseEnvelope,\n    style_mapper: Optional[StyleMapper] = None,\n    hidden_fields: Optional[List[str]] = None,\n    title: str = \"Results List\",\n)\n</code></pre> <p>Render a list of result data items in a <code>rich</code> <code>Table</code>.</p> <p>:param: ctx:           The JobbergateContext. This is needed to detect if <code>full</code> or <code>raw</code> output is needed :param: envelope:      A ListResponseEnvelope containing the data items :param: style_mapper:  The style mapper that should be used to apply styles to the columns of the table :param: hidden_fields: Columns that should (if not using <code>full</code> mode) be hidden in the <code>Table</code> output :param: title:         The title header to include above the <code>Table</code> output</p>"},{"location":"reference/cli/#jobbergate_cli.render.render_single_result","title":"render_single_result","text":"<pre><code>render_single_result(\n    ctx: JobbergateContext,\n    result: Union[Dict[str, Any], pydantic.BaseModel],\n    hidden_fields: Optional[List[str]] = None,\n    title: str = \"Result\",\n    value_mappers: Optional[\n        Dict[str, Callable[[Any], Any]]\n    ] = None,\n)\n</code></pre> <p>Render a single data item in a <code>rich</code> ``Table.</p> <p>:param: ctx:           The JobbergateContext. This is needed to detect if <code>full` or</code>raw<code>output is needed :param: result:        The data item to display. May be a dict or a pydantic model. :param: hidden_fields: Rows that should (if not using</code>full<code>mode) be hidden in the</code>Table<code>output :param: title:         The title header to include above the</code>Tale`` output :param: value_mappers: Mapping functions to change fields before rendering</p>"},{"location":"reference/cli/#jobbergate_cli.render.terminal_message","title":"terminal_message","text":"<pre><code>terminal_message(\n    message,\n    subject=None,\n    color=\"green\",\n    footer=None,\n    indent=True,\n)\n</code></pre> <p>Print a nicely formatted message as output to the user using a <code>rich</code> <code>Panel</code>.</p> <p>:param: message: The message to print out :param: subject: An optional subject line to add in the header of the <code>Panel</code> :param: color:   An optional color to style the <code>subject</code> header with :param: footer:  An optional message to display in the footer of the <code>Panel</code> :param: indent:  Adds padding to the left of the message</p>"},{"location":"reference/cli/#jobbergate_cli.requests","title":"requests","text":"<p>Provide utilities for making requests against the Jobbergate API.</p>"},{"location":"reference/cli/#jobbergate_cli.requests.format_response_error","title":"format_response_error","text":"<pre><code>format_response_error(\n    response: httpx.Response, default_text\n) -&gt; str\n</code></pre> <p>Format a response into a human-readable error message, including the cause, and a possible solution.</p>"},{"location":"reference/cli/#jobbergate_cli.requests.get_possible_solution_to_error","title":"get_possible_solution_to_error","text":"<pre><code>get_possible_solution_to_error(error_code: int) -&gt; str\n</code></pre> <p>Get a possible solution to an error code.</p>"},{"location":"reference/cli/#jobbergate_cli.requests.make_request","title":"make_request","text":"<pre><code>make_request(\n    client: httpx.Client,\n    url_path: str,\n    method: str,\n    *,\n    expected_status: int | None = None,\n    expect_response: bool = True,\n    abort_message: str = \"There was an error communicating with the API\",\n    abort_subject: str = \"REQUEST FAILED\",\n    support: bool = True,\n    response_model_cls: Type[ResponseModel] | None = None,\n    request_model: pydantic.BaseModel | None = None,\n    save_to_file: Path | None = None,\n    **request_kwargs: Any\n) -&gt; Union[ResponseModel, dict, int]\n</code></pre> <p>Make a request against the Jobbergate API.</p> <p>:param: client:              The Httpx client to use for the request :param: url_path:            The path to add to the base url of the client where the request should be sent :param: method:              The REST method to use for the request (GET, PUT, UPDATE, POST, DELETE, etc) :param: expected_status:     The status code to expect on the response. If it is not received, raise an Abort :param: expect_response:     Indicates if response data (JSON) is expected from the API endpoint :param: abort_message:       The message to show the user if there is a problem and the app must be aborted :param: abort_subject:       The subject to use in Abort output to the user :param: support:             If true, add a message to the output instructing the user to seek help :param: response_model_cls:  If supplied, serialize the response data into this Pydantic model class :param: request_model:       Use a pydantic model instance as the data body for the request :param: request_kwargs:      Any additional keyword arguments that need to be passed on to the client</p>"},{"location":"reference/cli/#jobbergate_cli.schemas","title":"schemas","text":"<p>Provide Pydantic models for various data items.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.ApplicationResponse","title":"ApplicationResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes the format of data for applications retrieved from the Jobbergate API endpoints.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.ClusterCacheData","title":"ClusterCacheData","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes the format of data stored in the clusters cache file.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.DeviceCodeData","title":"DeviceCodeData","text":"<p>             Bases: <code>BaseModel</code></p> <p>A model representing the data that is returned from the OIDC provider's device code endpoint.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.IdentityData","title":"IdentityData","text":"<p>             Bases: <code>BaseModel</code></p> <p>A model representing the identifying data for a user from an auth token.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobScriptCreateRequest","title":"JobScriptCreateRequest","text":"<p>             Bases: <code>BaseModel</code></p> <p>Request model for creating JobScript instances.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobScriptFile","title":"JobScriptFile","text":"<p>             Bases: <code>BaseModel</code></p> <p>Model containing job-script files.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobScriptRenderRequestData","title":"JobScriptRenderRequestData","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes the data that will be sent to the <code>create</code> endpoint of the Jobbergate API for job scripts.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobScriptResponse","title":"JobScriptResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes the format of data for job_scripts retrieved from the Jobbergate API endpoints.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobScriptResponse.null_files","title":"null_files","text":"<pre><code>null_files(value)\n</code></pre> <p>Remap a <code>None</code> value in files to an empty list.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobSubmissionCreateRequestData","title":"JobSubmissionCreateRequestData","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes the data that will be sent to the <code>create</code> endpoint of the Jobbergate API for job submissions.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobSubmissionResponse","title":"JobSubmissionResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Describes the format of data for job_submissions retrieved from the Jobbergate API endpoints.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobbergateApplicationConfig","title":"JobbergateApplicationConfig","text":"<p>             Bases: <code>BaseModel</code></p> <p>A data object describing the config data needed to instantiate a JobbergateApplication class.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobbergateConfig","title":"JobbergateConfig","text":"<p>             Bases: <code>BaseModel</code></p> <p>A data object describing the config values needed in the \"jobbergate_config\" section of the JobbergateApplicationConfig model.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobbergateConfig.compute_extra_settings","title":"compute_extra_settings","text":"<pre><code>compute_extra_settings(values)\n</code></pre> <p>Compute missing values and extra operations to enhance the user experience and backward compatibility.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.JobbergateContext","title":"JobbergateContext","text":"<p>             Bases: <code>BaseModel</code></p> <p>A data object describing context passed from the main entry point.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.ListResponseEnvelope","title":"ListResponseEnvelope","text":"<p>             Bases: <code>GenericModel</code>, <code>Generic[EnvelopeT]</code></p> <p>A model describing the structure of response envelopes from \"list\" endpoints.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.LocalApplication","title":"LocalApplication","text":"<p>             Bases: <code>BaseModel</code></p> <p>Application retrieved from a local folder.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.LocalTemplateFile","title":"LocalTemplateFile","text":"<p>             Bases: <code>BaseModel</code></p> <p>Template file retrieved from a local folder.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.LocalWorkflowFile","title":"LocalWorkflowFile","text":"<p>             Bases: <code>BaseModel</code></p> <p>Workflow file retrived from a local folder.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.Persona","title":"Persona","text":"<p>             Bases: <code>BaseModel</code></p> <p>A model representing a pairing of a TokenSet and user email. This is a convenience to combine all of the identifying data and credentials for a given user.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.RenderFromTemplateRequest","title":"RenderFromTemplateRequest","text":"<p>             Bases: <code>BaseModel</code></p> <p>Request model for creating a JobScript entry from a template.</p>"},{"location":"reference/cli/#jobbergate_cli.schemas.TokenSet","title":"TokenSet","text":"<p>             Bases: <code>BaseModel</code></p> <p>A model representing a pairing of access and refresh tokens</p>"},{"location":"reference/cli/#jobbergate_cli.subapps","title":"subapps","text":"<p>Subapps that are added to the base <code>Typer</code> application.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.applications","title":"applications","text":"<p>Provide a sub-app for interacting with Applications data.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.applications.app","title":"app","text":"<p>Provide a <code>typer</code> app that can interact with Application data in a cruddy manner.</p> clone <pre><code>clone(\n    ctx: typer.Context,\n    id: Optional[int] = typer.Option(\n        None,\n        help=f\"The specific id of the application. {ID_NOTE}\",\n    ),\n    identifier: Optional[str] = typer.Option(\n        None,\n        help=f\"The human-friendly identifier of the application. {IDENTIFIER_NOTE}\",\n    ),\n    application_identifier: Optional[str] = typer.Option(\n        None,\n        help=\"\\n        Optional new application identifier to override the original.\\n\\n        Notice this can not match an existing identifier, including the one this entry is going to be cloned from.\\n        \",\n    ),\n    application_desc: Optional[str] = typer.Option(\n        None,\n        help=\"Optional new application description to override the original\",\n    ),\n    application_name: Optional[str] = typer.Option(\n        None,\n        help=\"Optional new application name to override the original\",\n    ),\n)\n</code></pre> <p>Clone an application, so the user can own and modify a copy of it.</p> create <pre><code>create(\n    ctx: typer.Context,\n    name: str = typer.Option(\n        ...,\n        \"--name\",\n        \"-n\",\n        help=\"The name of the application to create\",\n    ),\n    identifier: Optional[str] = typer.Option(\n        None,\n        help=f\"The human-friendly identifier of the application. {IDENTIFIER_NOTE}\",\n    ),\n    application_path: pathlib.Path = typer.Option(\n        ...,\n        \"--application-path\",\n        \"-a\",\n        help=\"The path to the directory where the application files are located\",\n    ),\n    application_desc: Optional[str] = typer.Option(\n        None,\n        help=\"A helpful description of the application\",\n    ),\n)\n</code></pre> <p>Create a new application.</p> delete <pre><code>delete(\n    ctx: typer.Context,\n    id: Optional[int] = typer.Option(\n        None,\n        \"--id\",\n        \"-i\",\n        help=f\"The specific id of the application to delete. {ID_NOTE}\",\n    ),\n    identifier: Optional[str] = typer.Option(\n        None,\n        help=f\"The human-friendly identifier of the application to update. {IDENTIFIER_NOTE}\",\n    ),\n)\n</code></pre> <p>Delete an existing application.</p> download_files <pre><code>download_files(\n    ctx: typer.Context,\n    id: Optional[int] = typer.Option(\n        None,\n        help=f\"The specific id of the application. {ID_NOTE}\",\n    ),\n    identifier: Optional[str] = typer.Option(\n        None,\n        help=f\"The human-friendly identifier of the application. {IDENTIFIER_NOTE}\",\n    ),\n)\n</code></pre> <p>Download the files from an application to the current working directory.</p> get_one <pre><code>get_one(\n    ctx: typer.Context,\n    id: Optional[int] = typer.Option(\n        None,\n        \"--id\",\n        \"-i\",\n        help=f\"The specific id of the application. {ID_NOTE}\",\n    ),\n    identifier: Optional[str] = typer.Option(\n        None,\n        help=f\"The human-friendly identifier of the application. {IDENTIFIER_NOTE}\",\n    ),\n)\n</code></pre> <p>Get a single application by id or identifier</p> list_all <pre><code>list_all(\n    ctx: typer.Context,\n    show_all: bool = typer.Option(\n        False,\n        \"--all\",\n        help=\"Show all applications, even the ones without identifier\",\n    ),\n    user_only: bool = typer.Option(\n        False,\n        \"--user\",\n        help=\"Show only applications owned by the current user\",\n    ),\n    search: Optional[str] = typer.Option(\n        None, help=\"Apply a search term to results\"\n    ),\n    sort_order: SortOrder = typer.Option(\n        SortOrder.DESCENDING, help=\"Specify sort order\"\n    ),\n    sort_field: Optional[str] = typer.Option(\n        \"id\",\n        help=\"The field by which results should be sorted\",\n    ),\n)\n</code></pre> <p>Show available applications</p> update <pre><code>update(\n    ctx: typer.Context,\n    id: Optional[int] = typer.Option(\n        None,\n        \"--id\",\n        \"-i\",\n        help=f\"The specific id of the application to update. {ID_NOTE}\",\n    ),\n    identifier: Optional[str] = typer.Option(\n        None,\n        help=f\"The human-friendly identifier of the application to update. {IDENTIFIER_NOTE}\",\n    ),\n    application_path: Optional[pathlib.Path] = typer.Option(\n        None,\n        \"--application-path\",\n        \"-a\",\n        help=\"The path to the directory where the application files are located\",\n    ),\n    update_identifier: Optional[str] = typer.Option(\n        None,\n        help=\"Optional new application identifier to be set\",\n    ),\n    application_desc: Optional[str] = typer.Option(\n        None,\n        help=\"Optional new application description to be set\",\n    ),\n    application_name: Optional[str] = typer.Option(\n        None, help=\"Optional new application name to be set\"\n    ),\n)\n</code></pre> <p>Update an existing application.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.applications.application_base","title":"application_base","text":"<p>ApplicationBase.</p> JobbergateApplicationBase <p>JobbergateApplicationBase.</p> __init__ <pre><code>__init__(jobbergate_yaml: Dict[str, Any])\n</code></pre> <p>Initialize class attributes.</p> find_templates <code>staticmethod</code> <pre><code>find_templates(\n    application_path: pathlib.Path,\n) -&gt; List[pathlib.Path]\n</code></pre> <p>Finds templates a given application path.</p> mainflow <pre><code>mainflow(data: Dict[str, Any])\n</code></pre> <p>Implements the main question asking workflow.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.applications.application_helpers","title":"application_helpers","text":"<p>Helper functions that may be used inside of Jobbergate applications.</p> get_file_list <pre><code>get_file_list(path=None, search_term='*.*')\n</code></pre> <p>Return a list of input files in a directory that match a search term.</p> <p>Ignore casing when comparing against the search term.</p> <p>Default to searching for all files in the current directory.</p> get_running_jobs <pre><code>get_running_jobs(user_only=True)\n</code></pre> <p>Return a list of the user's currently running jobs, as given by SLURM's squeue command.</p> <p>The format returned is: [job ID, 8 chars] [job name]</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.applications.questions","title":"questions","text":"<p>Abstraction layer for questions. Each class represents different question types.</p> <p>The questions describe literal questions that are asked of the user in an interactive mode via the <code>inquirer</code> package.</p> <p>Questions will be skipped and use the default value if the <code>ignore</code> property resolves to True.</p> <p>Questions will also resolve to their default values if running in \"fast mode\".</p> BooleanList <p>             Bases: <code>Confirm</code></p> <p>Asks a confirmation question that is followed up by a certain question list when true and a different list if false.</p> __init__ <pre><code>__init__(\n    variablename: str,\n    message: str,\n    whentrue=None,\n    whenfalse=None,\n    **kwargs\n)\n</code></pre> <p>Initialize the Checkbox question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param whentrue:       List of questions to ask if user answers 'true' on this question :param whentrue:       List of questions to show if user answers 'false' on this question</p> ignore_child <pre><code>ignore_child(\n    child: QuestionBase, answers: Dict[str, Any]\n) -&gt; bool\n</code></pre> <p>Dynamically check if a child question should be ignored based on the questions that have already been answered.</p> <p>:param: child:   The child question that might be ignored :param: answers: Answer values to previously asked questions</p> make_ignore_partial <pre><code>make_ignore_partial(\n    child: QuestionBase,\n) -&gt; Callable[[Dict[str, Any]], bool]\n</code></pre> <p>Build a partial method for checking if a child should be ignored.</p> <p>This method just makes the code more readable so that a non-descriptive lambda does not need to be used inline.</p> make_prompts <pre><code>make_prompts(**override_kwargs)\n</code></pre> <p>Create <code>inquirer</code> prompts from this instance of <code>BooleanList</code> and for all its child questions.</p> <p>:param: override_kwargs: A collection of keyword arguments to override in the base <code>make_prompts</code> method</p> Checkbox <p>             Bases: <code>QuestionBase</code></p> <p>Gives the user a list to choose multiple entries from.</p> __init__ <pre><code>__init__(\n    variablename: str, message: str, choices: list, **kwargs\n)\n</code></pre> <p>Initialize the Checkbox question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param: choices:       A list of the possible values from which the Question will allow the user to select many</p> Confirm <p>             Bases: <code>QuestionBase</code></p> <p>Asks a question with a boolean answer (true/false).</p> __init__ <pre><code>__init__(variablename: str, message: str, **kwargs)\n</code></pre> <p>Initialize the Confirm question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering</p> Const <p>             Bases: <code>Text</code></p> <p>Sets the variable to the <code>default</code> value. Doesn't show anything.</p> __init__ <pre><code>__init__(variablename: str, **kwargs)\n</code></pre> <p>Initialize the Const \"question\".</p> <p>:param: variablename:  The key in the config dictionary that this question will set</p> make_prompts <pre><code>make_prompts()\n</code></pre> <p>Create <code>inquirer</code> prompts from this instance of <code>Const</code>.</p> Directory <p>             Bases: <code>QuestionBase</code></p> <p>Asks for a directory name. If <code>exists</code> is <code>True</code> it checks if path exists and is a directory.</p> <p>:param exists: Checks if given directory exists</p> __init__ <pre><code>__init__(\n    variablename: str,\n    message: str,\n    exists: Optional[bool] = None,\n    **kwargs\n)\n</code></pre> <p>Initialize the Directory question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param: exists:        If True, ensure that the directory exists on the system</p> File <p>             Bases: <code>QuestionBase</code></p> <p>Asks for a file name.</p> __init__ <pre><code>__init__(\n    variablename: str,\n    message: str,\n    exists: Optional[bool] = None,\n    **kwargs\n)\n</code></pre> <p>Initialize the File question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param: exists:        If True, ensure that the file path exists on the system</p> Integer <p>             Bases: <code>QuestionBase</code></p> <p>Asks for an integer value. Could have min and/or max constrains.</p> __init__ <pre><code>__init__(\n    variablename: str,\n    message: str,\n    minval: Optional[int] = None,\n    maxval: Optional[int] = None,\n    **kwargs\n)\n</code></pre> <p>Initialize the Integer question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param: minval:        The minimum value the integer may be set to. If not specified, use negative infinity. :param: minval:        The maximum value the integer may be set to. If not specified, use infinity.</p> List <p>             Bases: <code>QuestionBase</code></p> <p>Gives the user a list to choose one from.</p> __init__ <pre><code>__init__(\n    variablename: str, message: str, choices: list, **kwargs\n)\n</code></pre> <p>Initialize the List question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param: choices:       A list of the possible values from which the Question will allow the user to select one</p> QuestionBase <p>Baseclass for questions.</p> <p>All questions have variablename, message and an optional default.</p> __init__ <pre><code>__init__(\n    variablename: str,\n    message: str,\n    ignore: bool = False,\n    default: Optional[Any] = None,\n    inquirer_type: Type[TInquirerType] = inquirer.Text,\n)\n</code></pre> <p>Initialize the Question.</p> <p>:param: variablename:  The key in the config dictionary that this question will set :param: message:       The message to show the user that describes what the question is gathering :param: ignore:        If true, do not ask the question and just use the default value instead :param: default:       The default value for the variablename in the answers dict :param: inquirer_type: The <code>inquirer</code> question type that this <code>QuestionBase</code> wraps</p> make_prompts <pre><code>make_prompts(**override_kwargs)\n</code></pre> <p>Create <code>inquirer</code> prompts from this instance of <code>QuestionBase</code>.</p> <p>:param: override_kwargs: A collection of keyword arguments to override in intializing the <code>inquirer</code> question</p> Text <p>             Bases: <code>QuestionBase</code></p> <p>Asks for a text value.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.applications.tools","title":"tools","text":"<p>Provide tool functions for working with Application data.</p> ApplicationRuntime <code>dataclass</code> <p>Prepare and execute a Jobbergate application gathering the answers to the questions.</p> <p>:param app_data: The application data, can be either an ApplicationResponse or a LocalApplication. :param app_source_code: The source code of the application, often coming from jobbergate.py file. :param supplied_params: The parameters supplied to the application, defaults to an empty dictionary. :param fast_mode: A flag indicating whether the application is in fast mode, defaults to False.</p> as_flatten_param_dict <pre><code>as_flatten_param_dict() -&gt; Dict[str, Any]\n</code></pre> <p>Flatten the internal data to support the rendering process.</p> execute_application <pre><code>execute_application()\n</code></pre> <p>Execute the jobbergate application python module.</p> fetch_application_data <pre><code>fetch_application_data(\n    jg_ctx: JobbergateContext,\n    id: Optional[int] = None,\n    identifier: Optional[str] = None,\n) -&gt; ApplicationResponse\n</code></pre> <p>Retrieve an application from the API by <code>id</code> or <code>identifier</code>.</p> <p>:param: jg_ctx:     The JobbergateContext. Needed to access the Httpx client with which to make API calls :param: id:         The id of the application to fetch :param: identifier: If supplied, look for an application instance with the provided identifier :returns: An instance of ApplicationResponse containing the application data</p> fetch_application_data_locally <pre><code>fetch_application_data_locally(\n    application_path: pathlib.Path,\n) -&gt; LocalApplication\n</code></pre> <p>Retrieve an application from a local directory.</p> <p>:param: application_path: The directory containing the application files :returns: A LocalApplication instance containing the application data</p> get_upload_files <pre><code>get_upload_files(application_path: pathlib.Path)\n</code></pre> <p>Context manager to build the <code>files</code> parameter.</p> <p>Open the supplied file(s) and build a <code>files</code> param appropriate for using multi-part file uploads with the client.</p> load_application_config_from_source <pre><code>load_application_config_from_source(\n    config_source: str,\n) -&gt; JobbergateApplicationConfig\n</code></pre> <p>Load the JobbergateApplicationConfig from a text string containing the config as YAML.</p> <p>:param: config_source: The YAML containing the config :returns: A JobbergateApplicationConfig instance with the config values</p> load_application_data <pre><code>load_application_data(\n    app_data: Union[ApplicationResponse, LocalApplication],\n    application_source_file: str,\n) -&gt; Tuple[\n    JobbergateApplicationConfig, JobbergateApplicationBase\n]\n</code></pre> <p>Validates and loads the data for an application returned from the API's applications GET endpoint.</p> <p>As part of the Jobbergate data restructure, sections of the legacy jobbergate.yaml are now stored in different tables in the backend. This function reconstructs them from app_data.workflow_file.runtime_config and app_data.template_vars for backward compatibility.</p> <p>:param: app_data: A dictionary containing the application data :returns: A tuple containing the application config and the application module</p> load_application_from_source <pre><code>load_application_from_source(\n    app_source: str, app_config: JobbergateApplicationConfig\n) -&gt; JobbergateApplicationBase\n</code></pre> <p>Load the JobbergateApplication class from a text string containing the source file.</p> <p>Creates the module in a temporary file and imports it with importlib.</p> <p>Adapted from: https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly</p> <p>:param: app_source: The JobbergateApplication source code to load :param: app_config: The JobbergateApplicationConfig needed to instantiate the JobbergateApplication</p> load_default_config <pre><code>load_default_config() -&gt; Dict[str, Any]\n</code></pre> <p>Load the default config for an application.</p> save_application_files <pre><code>save_application_files(\n    jg_ctx: JobbergateContext,\n    application_data: ApplicationResponse,\n    destination_path: pathlib.Path,\n) -&gt; List[pathlib.Path]\n</code></pre> <p>Save the application files from the API response into a local destination.</p> upload_application <pre><code>upload_application(\n    jg_ctx: JobbergateContext,\n    application_path: pathlib.Path,\n    application_id: Optional[int],\n    application_identifier: Optional[str],\n)\n</code></pre> <p>Upload an application given an application path and the application id.</p> <p>:param: jg_ctx:                 The JobbergateContext. Needed to access the Httpx client with which to make API calls :param: application_path:       The directory where the application files to upload may be found :param: application_id:         The id of the application for which to upload  data :param: application_identifier: The identifier of the application for which to upload  data</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.clusters","title":"clusters","text":"<p>Provide a sub-app for interacting with Cluster data.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.clusters.app","title":"app","text":"<p>Provide a <code>typer</code> app that can interact with Cluster data in a cruddy manner.</p> list_all <pre><code>list_all(ctx: typer.Context)\n</code></pre> <p>Show available clusters</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.clusters.tools","title":"tools","text":"<p>Provide tool functions for working with Cluster data</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.job_scripts","title":"job_scripts","text":"<p>Provide a sub-app for interacting with Job Script data.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.job_scripts.app","title":"app","text":"<p>Provide a <code>typer</code> app that can interact with Job Script data in a cruddy manner.</p> clone <pre><code>clone(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ...,\n        \"--id\",\n        \"-i\",\n        help=\"The id of the job script to update\",\n    ),\n    name: Optional[str] = typer.Option(\n        None, help=\"Optional new name of the job script.\"\n    ),\n    description: Optional[str] = typer.Option(\n        None,\n        help=\"Optional new text describing the job script.\",\n    ),\n)\n</code></pre> <p>Clone an existing job script, so the user can own and modify a copy of it.</p> delete <pre><code>delete(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ...,\n        \"--id\",\n        \"-i\",\n        help=\"The id of the job script to delete\",\n    ),\n)\n</code></pre> <p>Delete an existing job script.</p> download_files <pre><code>download_files(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ..., help=\"The specific id of the job script.\"\n    ),\n)\n</code></pre> <p>Download the files from a job script to the current working directory.</p> get_one <pre><code>get_one(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ...,\n        \"--id\",\n        \"-i\",\n        help=\"The specific id of the job script.\",\n    ),\n)\n</code></pre> <p>Get a single job script by id.</p> list_all <pre><code>list_all(\n    ctx: typer.Context,\n    show_all: bool = typer.Option(\n        False,\n        \"--all\",\n        help=\"Show all job scripts, even the ones owned by others\",\n    ),\n    search: Optional[str] = typer.Option(\n        None, help=\"Apply a search term to results\"\n    ),\n    sort_order: SortOrder = typer.Option(\n        SortOrder.DESCENDING, help=\"Specify sort order\"\n    ),\n    sort_field: Optional[str] = typer.Option(\n        \"id\",\n        help=\"The field by which results should be sorted\",\n    ),\n    from_application_id: Optional[int] = typer.Option(\n        None,\n        help=\"Filter job-scripts by the application-id they were created from.\",\n    ),\n)\n</code></pre> <p>Show available job scripts</p> render <pre><code>render(\n    ctx: typer.Context,\n    name: Optional[str] = typer.Option(\n        None,\n        \"--name\",\n        \"-n\",\n        help=dedent(\n            \"\\n            The name of the job script to create.\\n            If this is not supplied, the name will be derived from the base application.\\n            \"\n        ),\n    ),\n    application_id: Optional[int] = typer.Option(\n        None,\n        \"--application-id\",\n        \"-i\",\n        help=\"The id of the application from which to create the job script.\",\n    ),\n    application_identifier: Optional[str] = typer.Option(\n        None,\n        help=\"The identifier of the application from which to create the job script.\",\n    ),\n    description: Optional[str] = typer.Option(\n        None,\n        help=\"Optional text describing the job script.\",\n    ),\n    sbatch_params: Optional[List[str]] = typer.Option(\n        None,\n        help=\"Optional parameter to submit raw sbatch parameters.\",\n    ),\n    param_file: Optional[pathlib.Path] = typer.Option(\n        None,\n        help=dedent(\n            \"\\n            Supply a json file that contains the parameters for populating templates.\\n            If this is not supplied, the question asking in the application is triggered.\\n            \"\n        ),\n    ),\n    fast: bool = typer.Option(\n        False,\n        \"--fast\",\n        \"-f\",\n        help=\"Use default answers (when available) instead of asking the user.\",\n    ),\n    download: Optional[bool] = typer.Option(\n        None,\n        help=\"Download the job script files to the current working directory\",\n    ),\n    submit: Optional[bool] = typer.Option(\n        None,\n        help=\"Do not ask the user if they want to submit a job.\",\n    ),\n    cluster_name: Optional[str] = typer.Option(\n        None,\n        help=\"The name of the cluster where the job should be submitted to (i.g. 'nash-staging')\",\n    ),\n    execution_directory: Optional[\n        pathlib.Path\n    ] = typer.Option(\n        None,\n        help=dedent(\n            '\\n            The path on the cluster where the job script should be executed.\\n            If provided as a relative path, it will be converted as an absolute path from your current\\n            working directory. If you use \"~\" to denote your home directory, the path will be expanded to an\\n            absolute path for your home directory on *this* machine.\\n            '\n        ).strip(),\n    ),\n)\n</code></pre> <p>Render a new job script from an application.</p> render_locally <pre><code>render_locally(\n    ctx: typer.Context,\n    application_path: pathlib.Path = typer.Argument(\n        pathlib.Path(\".\"),\n        help=\"The path to the application directory to use as a template for the job script.\",\n        dir_okay=True,\n    ),\n    job_script_name: str = typer.Option(\n        \"job_script\",\n        help=\"The name of the job script to render locally.\",\n    ),\n    output_path: pathlib.Path = typer.Option(\n        pathlib.Path(\".\"),\n        help=\"The path to the directory where the rendered job script should be saved.\",\n        dir_okay=True,\n    ),\n    sbatch_params: Optional[List[str]] = typer.Option(\n        None,\n        help=\"Optional parameter to submit raw sbatch parameters.\",\n    ),\n    param_file: Optional[pathlib.Path] = typer.Option(\n        None,\n        help=dedent(\n            \"\\n            Supply a json file that contains the parameters for populating templates.\\n            If this is not supplied, the question asking in the application is triggered.\\n            \"\n        ),\n    ),\n    fast: bool = typer.Option(\n        False,\n        \"--fast\",\n        \"-f\",\n        help=\"Use default answers (when available) instead of asking the user.\",\n    ),\n)\n</code></pre> <p>Render a new job-script from an application locally.</p> <p>The templates will be overwritten with the rendered files.</p> show_files <pre><code>show_files(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ..., help=\"The specific id of the job script.\"\n    ),\n    plain: bool = typer.Option(\n        False, help=\"Show the files in plain text.\"\n    ),\n)\n</code></pre> <p>Show the files for a single job script by id.</p> update <pre><code>update(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ...,\n        \"--id\",\n        \"-i\",\n        help=\"The id of the job script to update\",\n    ),\n    name: Optional[str] = typer.Option(\n        None, help=\"Optional new name of the job script.\"\n    ),\n    description: Optional[str] = typer.Option(\n        None,\n        help=\"Optional new text describing the job script.\",\n    ),\n)\n</code></pre> <p>Update an existing job script.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.job_scripts.tools","title":"tools","text":"<p>Provide tool functions for working with Job Script data</p> download_job_script_files <pre><code>download_job_script_files(\n    id: int,\n    jg_ctx: JobbergateContext,\n    destination_path: pathlib.Path,\n) -&gt; List[JobScriptFile]\n</code></pre> <p>Download all job script files from the API and save them to the destination path.</p> fetch_job_script_data <pre><code>fetch_job_script_data(\n    jg_ctx: JobbergateContext, id: int\n) -&gt; JobScriptResponse\n</code></pre> <p>Retrieve a job_script from the API by <code>id</code></p> get_template_output_name_mapping <pre><code>get_template_output_name_mapping(\n    config: JobbergateConfig, job_name: str\n) -&gt; Dict[str, str]\n</code></pre> <p>Get the mapping of template names to output names.</p> <p>This provides the mapping as expected by the API v4 from the configuration on CLI v3.</p> inject_sbatch_params <pre><code>inject_sbatch_params(\n    job_script_data_as_string: str, sbatch_params: List[str]\n) -&gt; str\n</code></pre> <p>Inject sbatch params into job script.</p> <p>Given the job script as job_script_data_as_string, inject the sbatch params in the correct location.</p> question_helper <pre><code>question_helper(\n    question_func: Callable,\n    text: str,\n    default: Any,\n    fast: bool,\n    actual_value: Optional[Any],\n)\n</code></pre> <p>Helper function for asking questions to the user.</p> <p>:param Callable question_func: The function to use to ask the question :param str text:               The text of the question to ask :param Any default:            The default value to use if the user does not provide one :param bool fast:              Whether to use default answers (when available) instead of asking the user :param Any actual_value:       The actual value provided by the user, if any</p> <p>:returns: <code>actual_value</code> or <code>default</code> or the value provided by the user</p> <p>The <code>actual_value</code> has the most priority and will be returned if it is not None. After evaluating the <code>actual_value</code>, the fast mode will determine if the default value will be used. Otherwise, the question will be prompted to the user.</p> remove_prefix <pre><code>remove_prefix(s: str) -&gt; str\n</code></pre> <p>Remove the prefix 'templates/' from a string</p> remove_prefix_suffix <pre><code>remove_prefix_suffix(s: str) -&gt; str\n</code></pre> <p>Remove the prefix 'templates/' and suffixes '.j2' and '.jinja2' from a string</p> render_job_script <pre><code>render_job_script(\n    jg_ctx: JobbergateContext,\n    name: Optional[str] = None,\n    application_id: Optional[int] = None,\n    application_identifier: Optional[str] = None,\n    description: Optional[str] = None,\n    sbatch_params: Optional[List[str]] = None,\n    param_file: Optional[pathlib.Path] = None,\n    fast: bool = False,\n) -&gt; JobScriptResponse\n</code></pre> <p>Render a new job script from an application.</p> <p>:param str name: Name of the new job script. :param Optional[int] application_id: Id of the base application. :param Optional[str] application_identifier: Identifier of the base application. :param Optional[str] description: Description of the new job script. :param Optional[List[str]] sbatch_params: List of sbatch parameters. :param Optional[pathlib.Path] param_file: Path to a parameters file. :param bool fast: Whether to use default answers (when available) instead of asking the user. :param JobbergateContext jg_ctx: The Jobbergate context. :return JobScriptResponse: The new job script.</p> render_job_script_locally <pre><code>render_job_script_locally(\n    jg_ctx: JobbergateContext,\n    job_script_name: str,\n    application_path: pathlib.Path,\n    output_path: pathlib.Path,\n    sbatch_params: Optional[List[str]] = None,\n    param_file: Optional[pathlib.Path] = None,\n    fast: bool = False,\n)\n</code></pre> <p>Render a new job script from an application in a local directory.</p> <p>:param str job_script_name: Name of the new job script. :param pathlib.Path application_path: Path to the base application. :param pathlib.Path output_path: Path to the output the rendered job script. :param Optional[List[str]] sbatch_params: List of sbatch parameters. :param Optional[pathlib.Path] param_file: Path to a parameters file. :param bool fast: Whether to use default answers (when available) instead of asking the user. :param JobbergateContext jg_ctx: The Jobbergate context. :return JobScriptResponse: The new job script.</p> render_template <pre><code>render_template(\n    template_path: pathlib.Path, parameters: Dict[str, Any]\n) -&gt; str\n</code></pre> <p>Render a template file and save it to the output directory.</p> <p>:param str template_path: The path to the template file. :param Dict[str, Any] parameters: The parameters to use for rendering the template.</p> save_job_script_file <pre><code>save_job_script_file(\n    jg_ctx: JobbergateContext,\n    destination_path: pathlib.Path,\n    job_script_file: JobScriptFile,\n) -&gt; pathlib.Path\n</code></pre> <p>Save a job script file from the API response to the destination path.</p> upload_job_script_files <pre><code>upload_job_script_files(\n    jg_ctx: JobbergateContext,\n    job_script_id: int,\n    job_script_path: pathlib.Path,\n    supporting_file_paths: Optional[\n        List[pathlib.Path]\n    ] = None,\n)\n</code></pre> <p>Upload a job-script and its supporting files given their paths and the job-script id.</p> <p>:param: jg_ctx:                The JobbergateContext. Needed to access the Httpx client with which to make API calls :param: job_script_path:       The path to the job-script file to upload :param: supporting_file_paths: The paths to any supporting files to upload with the job-scritpt :param: job_script_id:         The id of the job-script for which to upload  data :returns: True if the main job script upload was successful; False otherwise</p> validate_parameter_file <pre><code>validate_parameter_file(\n    parameter_path: pathlib.Path,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Validate parameter file at the supplied path and returns the parsed dict.</p> Confirms <p>parameter_path exists parameter_path is a valid json file</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.job_submissions","title":"job_submissions","text":"<p>Provide a sub-app for interacting with Job Submission data.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.job_submissions.app","title":"app","text":"<p>Provide a <code>typer</code> app that can interact with Job Submission data in a cruddy manner.</p> create <pre><code>create(\n    ctx: typer.Context,\n    name: str = typer.Option(\n        ...,\n        \"--name\",\n        \"-n\",\n        help=\"The name of the job submission to create\",\n    ),\n    description: Optional[str] = typer.Option(\n        None,\n        help=\"A helpful description of the job submission\",\n    ),\n    job_script_id: int = typer.Option(\n        ...,\n        \"--job-script-id\",\n        \"-i\",\n        help=\"The id of the job_script from which to create the job submission\",\n    ),\n    cluster_name: str = typer.Option(\n        None,\n        help=\"The name of the cluster where the job should be submitted (i.g. 'nash-staging')\",\n    ),\n    execution_directory: Optional[Path] = typer.Option(\n        None,\n        help=dedent(\n            '\\n            The path on the cluster where the job script should be executed.\\n            If provided as a relative path, it will be converted as an absolute path from your current\\n            working directory. If you use \"~\" to denote your home directory, the path will be expanded to an\\n            absolute path for your home directory on *this* machine.\\n            '\n        ).strip(),\n    ),\n    sbatch_arguments: Optional[list[str]] = typer.Option(\n        None,\n        \"--sbatch-arguments\",\n        \"-s\",\n        help=dedent(\n            \"\\n            Additional arguments to pass as sbatch directives. These should be provided as a list of strings.\\n            See more details at: https://slurm.schedmd.com/sbatch.html\\n            \"\n        ).strip(),\n    ),\n    download: bool = typer.Option(\n        False,\n        help=\"Download the job script files to the current working directory\",\n    ),\n)\n</code></pre> <p>Create a new job submission.</p> delete <pre><code>delete(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ...,\n        \"--id\",\n        \"-i\",\n        help=\"The id of the job submission to delete\",\n    ),\n)\n</code></pre> <p>Delete an existing job submission.</p> get_one <pre><code>get_one(\n    ctx: typer.Context,\n    id: int = typer.Option(\n        ...,\n        \"--id\",\n        \"-i\",\n        help=\"The specific id of the job submission.\",\n    ),\n)\n</code></pre> <p>Get a single job submission by id</p> list_all <pre><code>list_all(\n    ctx: typer.Context,\n    show_all: bool = typer.Option(\n        False,\n        \"--all\",\n        help=\"Show all job submissions, even the ones owned by others\",\n    ),\n    search: Optional[str] = typer.Option(\n        None, help=\"Apply a search term to results\"\n    ),\n    sort_order: SortOrder = typer.Option(\n        SortOrder.DESCENDING, help=\"Specify sort order\"\n    ),\n    sort_field: Optional[str] = typer.Option(\n        \"id\",\n        help=\"The field by which results should be sorted\",\n    ),\n    from_job_script_id: Optional[int] = typer.Option(\n        None,\n        help=\"Filter job-submissions by the job-script-id they were created from.\",\n    ),\n)\n</code></pre> <p>Show available job submissions.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.job_submissions.tools","title":"tools","text":"<p>Provide tool functions for working with Job Submission data</p> JobSubmissionABC <code>dataclass</code> <p>             Bases: <code>ABC</code></p> <p>A dataclass representing a job submission for Jobbergate.</p> <p>:param: jg_ctx:                    The JobbergateContext. Used to retrieve the client for requests                                    and the email of the submitting user :param: job_script_id:             The <code>id</code> of the Job Script to submit to Slurm :param: name:                      The name to attach to the Job Submission :param: description:               An optional description that may be added to the Job Submission :param: cluster_name:              An optional cluster_name for the cluster where the job should be executed,                                    If left off, it will default to the DEFAULT_CLUSTER_NAME from the settings.                                    If no default is set, an exception will be raised. :param: execution_directory:       An optional directory where the job should be executed. If provided as a                                    relative path, it will be constructed as an absolute path relative to                                    the current working directory. :param: download:                  A flag indicating whether the job script files should be downloaded to the. :param: sbatch_arguments:          An optional list of arguments to pass to inject into the job script.</p> __post_init__ <pre><code>__post_init__()\n</code></pre> <p>Post-init hook to ensure that the cluster_name and execution_directory are set correctly.</p> get_request_data <pre><code>get_request_data() -&gt; JobSubmissionCreateRequestData\n</code></pre> <p>Return the data to be used in the POST request to the API.</p> make_post_request <pre><code>make_post_request(\n    job_submission_data: JobSubmissionCreateRequestData,\n) -&gt; JobSubmissionResponse\n</code></pre> <p>Make the POST request to the API to create the job submission.</p> process_submission <code>abstractmethod</code> <pre><code>process_submission()\n</code></pre> <p>Process the job submission. This method should be overridden by subclasses.</p> run <pre><code>run() -&gt; JobSubmissionResponse\n</code></pre> <p>Run all required steps to create the job submission.</p> OnsiteJobSubmission <p>             Bases: <code>JobSubmissionABC</code></p> get_request_data <pre><code>get_request_data() -&gt; JobSubmissionCreateRequestData\n</code></pre> <p>Return the data to be used in the POST request to the API.</p> inject_sbatch_params <pre><code>inject_sbatch_params(job_script_path: Path)\n</code></pre> <p>Inject sbatch parameters into the job script.</p> process_submission <pre><code>process_submission()\n</code></pre> <p>Process the job submission in on-site mode.</p> RemoteJobSubmission <p>             Bases: <code>JobSubmissionABC</code></p> process_submission <pre><code>process_submission()\n</code></pre> <p>Process the job submission in remote mode.</p> fetch_job_submission_data <pre><code>fetch_job_submission_data(\n    jg_ctx: JobbergateContext, job_submission_id: int\n) -&gt; JobSubmissionResponse\n</code></pre> <p>Retrieve a job submission from the API by <code>id</code></p> job_submissions_factory <pre><code>job_submissions_factory(\n    jg_ctx: JobbergateContext,\n    job_script_id: int,\n    name: str,\n    execution_directory: Path | None = None,\n    cluster_name: str | None = None,\n    download: bool = False,\n    description: Optional[str] = None,\n    sbatch_arguments: Optional[list[str]] = None,\n) -&gt; JobSubmissionABC\n</code></pre> <p>Job submission factory function. Returns the correct job submission class based on the current mode.</p>"},{"location":"reference/cli/#jobbergate_cli.subapps.pagination","title":"pagination","text":""},{"location":"reference/cli/#jobbergate_cli.text_tools","title":"text_tools","text":"<p>Provide some basic tools for manipulating text.</p>"},{"location":"reference/cli/#jobbergate_cli.text_tools.conjoin","title":"conjoin","text":"<pre><code>conjoin(*items: str, join_str: str = '\\n') -&gt; str\n</code></pre> <p>Joins strings supplied as args.</p> <p>Helper that wraps <code>str.join()</code> without having to pack strings in an iterable.</p>"},{"location":"reference/cli/#jobbergate_cli.text_tools.copy_to_clipboard","title":"copy_to_clipboard","text":"<pre><code>copy_to_clipboard(text: str) -&gt; bool\n</code></pre> <p>Copy the provided text to the clipboard.</p> <p>If the clipboard is not available, return False. Otherwise, return True.</p>"},{"location":"reference/cli/#jobbergate_cli.text_tools.dedent","title":"dedent","text":"<pre><code>dedent(text: str) -&gt; str\n</code></pre> <p>Dedents a paragraph after removing leading and trailing whitespace.</p>"},{"location":"reference/cli/#jobbergate_cli.text_tools.dedent_all","title":"dedent_all","text":"<pre><code>dedent_all(*texts: str, join_str: str = '\\n') -&gt; str\n</code></pre> <p>Dedents each blob supplied as an argument and then joins them.</p>"},{"location":"reference/cli/#jobbergate_cli.text_tools.indent","title":"indent","text":"<pre><code>indent(text: str, prefix: str = '    ', **kwargs) -&gt; str\n</code></pre> <p>Simple wrapper for the textwrap.indent() method but includes a default prefix.</p>"},{"location":"reference/cli/#jobbergate_cli.text_tools.unwrap","title":"unwrap","text":"<pre><code>unwrap(text: str) -&gt; str\n</code></pre> <p>Unwraps a paragraph of text into a single line.</p> <p>The text may be indented.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop","title":"time_loop","text":"<p>Provide a time-loop class that can be used to to iterate during a given window of time.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.Tick","title":"Tick","text":"<p>             Bases: <code>BaseModel</code></p> <p>A helper class describing a \"tick\".</p> <p>Contains a counter, elapsed time since the last tick, and total elapsed time.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.TimeLoop","title":"TimeLoop","text":"<p>A special iterator that will iterate for a specified duration of time.</p> <p>Uses a progress meter to show the user how much time is left. Each iteration of the time-loop produces a tick.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.TimeLoop.__del__","title":"__del__","text":"<pre><code>__del__()\n</code></pre> <p>Explicitly clear the progress meter if the time-loop is destroyed.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.TimeLoop.__init__","title":"__init__","text":"<pre><code>__init__(\n    duration: Union[pendulum.Duration, int],\n    message: str = \"Processing\",\n    color: str = \"green\",\n)\n</code></pre> <p>Initialize the time-loop.</p> <p>Duration may be either a count of seconds or a <code>pendulum.duration</code>.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.TimeLoop.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; TimeLoop\n</code></pre> <p>Start the iterator.</p> <p>Creates and starts the progress meter</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.TimeLoop.__next__","title":"__next__","text":"<pre><code>__next__() -&gt; Tick\n</code></pre> <p>Iterates the time loop and returns a tick.</p> <p>If the duration is complete, clear the progress meter and stop iteration.</p>"},{"location":"reference/cli/#jobbergate_cli.time_loop.TimeLoop.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the time-loop.</p> <p>Stops the progress meter (if it is set) and reset moments, counter, progress meter.</p>"},{"location":"reference/core/","title":"Jobbergate Core Reference","text":""},{"location":"reference/core/#jobbergate_core","title":"jobbergate_core","text":"<p>Jobbergate-core contains key components that are shared among sub-projects.</p>"},{"location":"reference/core/#jobbergate_core.AuthenticationError","title":"AuthenticationError","text":"<p>             Bases: <code>Buzz</code></p> <p>Base exception for errors related to authentication on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler","title":"JobbergateAuthHandler  <code>dataclass</code>","text":"<p>High-level class used to manage authentication to requests to the Jobbergate-API</p> <p>After an instance of this class is created, it can be used to authenticate requests from both <code>requests</code>  and <code>httpx</code> packages by passing it to the <code>auth</code> parameter on the request (see examples below).</p> <p>It just works out of the box. Behind the scenes, this procedure calls the :meth:<code>JobbergateAuthHandler.acquire_access</code> method to load the available tokens from the cache directory, it tries to refresh them if they are expired, or provides an URL to the user to login on the system.</p> <p>Notice all steps above are also available individually as public methods, allowing a fine control for advanced users.</p> <p>.. _requests: https://requests.readthedocs.io/en/latest/ .. _httpx: https://www.python-httpx.org/</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <code>Path</code> <p>Directory to be used for the caching tokens.</p> required <code>login_domain</code> <code>str</code> <p>Domain used for the login.</p> required <code>login_audience</code> <code>str</code> <p>Audience of the login.</p> required <code>login_client_id</code> <code>str</code> <p>Client ID used for login.</p> <code>'default'</code> Note <p>These values depend on the identity provider used for authentication. Consult your system administrator or contact Omnivector support support@omnivector.solutions for further assistance.</p> Note <p>This class can interoperate with the tokens generated by the <code>jobbergate-cli</code> package, as long as they are stored in the same cache directory.</p> <p>Examples:</p> <pre><code>The following example shows how to use the :meth:`JobbergateAuthHandler`\nclass to authenticate a request:\n\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; from jobbergate_core import JobbergateAuthHandler\n&gt;&gt;&gt; jobbergate_auth = JobbergateAuthHandler(\n...     cache_directory=Path(\".\"),\n...     login_domain=\"http://keycloak.local:8080/realms/jobbergate-local\",\n...     login_audience=\"https://local.omnivector.solutions\",\n...     login_client_id=\"cli\",\n... )\n&gt;&gt;&gt; jobbergate_base_url = \"http://localhost:8000/jobbergate\"\n&gt;&gt;&gt; response = requests.get(\n...     f\"{jobbergate_base_url}/applications\",\n...     auth=jobbergate_auth # this is the important part\n)\nLogin Here: http://keycloak.local:8080/realms/jobbergate-local/device?user_code=LMVJ-XOLG\n&gt;&gt;&gt; response.raise_for_status()\n&gt;&gt;&gt; print(f\"response = {response.json()}\")\n</code></pre>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.__call__","title":"__call__","text":"<pre><code>__call__(request)\n</code></pre> <p>This internal method allows the integration with the <code>requests</code> library.</p> <p>It is called automatically when the instance is passed to the <code>auth</code> parameter, see the examples in the class docstring.</p> <p>It adds the <code>Authorization</code> header to the request with the access token.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.acquire_access","title":"acquire_access","text":"<pre><code>acquire_access() -&gt; str\n</code></pre> <p>High-level method to acquire a valid access token.</p> <p>This method will attempt, in order:</p> <ul> <li>Use the internal access token from the instance</li> <li>Load the tokens from the cache directory (see :meth:<code>JobbergateAuthHandler.load_from_cache</code>)</li> <li>If the access token is unavailable or expired, refresh both tokens   using the refresh token grant type (see :meth:<code>JobbergateAuthHandler.refresh_tokens</code>)</li> <li>If the refresh token is unavailable or expired, login to generate both tokens   (see :meth:<code>JobbergateAuthHandler.login</code>)</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>The bearer access token.</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If all of the steps above fail to acquire a valid access token.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.load_from_cache","title":"load_from_cache","text":"<pre><code>load_from_cache() -&gt; None\n</code></pre> <p>Load the tokens that are available at the cache directory.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.login","title":"login","text":"<pre><code>login() -&gt; None\n</code></pre> <p>Login to Jobbergate.</p> <p>An URL will be printed to the console, the user must open it in a browser and provide their access credentials.</p> <p>After the login is completed, the tokens will be saved to the cache directory.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.logout","title":"logout","text":"<pre><code>logout() -&gt; None\n</code></pre> <p>Logout from Jobbergate by clearing the loaded tokens and their cache on the disk.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.refresh_tokens","title":"refresh_tokens","text":"<pre><code>refresh_tokens() -&gt; None\n</code></pre> <p>Refresh the tokens.</p> <p>After the refresh operation is completed, the tokens will be saved to the cache directory.</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If the refresh token is missing or expired.</p>"},{"location":"reference/core/#jobbergate_core.JobbergateAuthHandler.save_to_cache","title":"save_to_cache","text":"<pre><code>save_to_cache() -&gt; None\n</code></pre> <p>Save the tokens to the cache directory.</p> Note <p>This method will create the cache directory if it does not exist.</p>"},{"location":"reference/core/#jobbergate_core.TokenError","title":"TokenError","text":"<p>             Bases: <code>AuthenticationError</code></p> <p>Exception for errors related to tokens on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth","title":"auth","text":"<p>Utilities for handling auth in Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth.AuthenticationError","title":"AuthenticationError","text":"<p>             Bases: <code>Buzz</code></p> <p>Base exception for errors related to authentication on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler","title":"JobbergateAuthHandler  <code>dataclass</code>","text":"<p>High-level class used to manage authentication to requests to the Jobbergate-API</p> <p>After an instance of this class is created, it can be used to authenticate requests from both <code>requests</code>  and <code>httpx</code> packages by passing it to the <code>auth</code> parameter on the request (see examples below).</p> <p>It just works out of the box. Behind the scenes, this procedure calls the :meth:<code>JobbergateAuthHandler.acquire_access</code> method to load the available tokens from the cache directory, it tries to refresh them if they are expired, or provides an URL to the user to login on the system.</p> <p>Notice all steps above are also available individually as public methods, allowing a fine control for advanced users.</p> <p>.. _requests: https://requests.readthedocs.io/en/latest/ .. _httpx: https://www.python-httpx.org/</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <code>Path</code> <p>Directory to be used for the caching tokens.</p> required <code>login_domain</code> <code>str</code> <p>Domain used for the login.</p> required <code>login_audience</code> <code>str</code> <p>Audience of the login.</p> required <code>login_client_id</code> <code>str</code> <p>Client ID used for login.</p> <code>'default'</code> Note <p>These values depend on the identity provider used for authentication. Consult your system administrator or contact Omnivector support support@omnivector.solutions for further assistance.</p> Note <p>This class can interoperate with the tokens generated by the <code>jobbergate-cli</code> package, as long as they are stored in the same cache directory.</p> <p>Examples:</p> <pre><code>The following example shows how to use the :meth:`JobbergateAuthHandler`\nclass to authenticate a request:\n\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; from jobbergate_core import JobbergateAuthHandler\n&gt;&gt;&gt; jobbergate_auth = JobbergateAuthHandler(\n...     cache_directory=Path(\".\"),\n...     login_domain=\"http://keycloak.local:8080/realms/jobbergate-local\",\n...     login_audience=\"https://local.omnivector.solutions\",\n...     login_client_id=\"cli\",\n... )\n&gt;&gt;&gt; jobbergate_base_url = \"http://localhost:8000/jobbergate\"\n&gt;&gt;&gt; response = requests.get(\n...     f\"{jobbergate_base_url}/applications\",\n...     auth=jobbergate_auth # this is the important part\n)\nLogin Here: http://keycloak.local:8080/realms/jobbergate-local/device?user_code=LMVJ-XOLG\n&gt;&gt;&gt; response.raise_for_status()\n&gt;&gt;&gt; print(f\"response = {response.json()}\")\n</code></pre>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.__call__","title":"__call__","text":"<pre><code>__call__(request)\n</code></pre> <p>This internal method allows the integration with the <code>requests</code> library.</p> <p>It is called automatically when the instance is passed to the <code>auth</code> parameter, see the examples in the class docstring.</p> <p>It adds the <code>Authorization</code> header to the request with the access token.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.acquire_access","title":"acquire_access","text":"<pre><code>acquire_access() -&gt; str\n</code></pre> <p>High-level method to acquire a valid access token.</p> <p>This method will attempt, in order:</p> <ul> <li>Use the internal access token from the instance</li> <li>Load the tokens from the cache directory (see :meth:<code>JobbergateAuthHandler.load_from_cache</code>)</li> <li>If the access token is unavailable or expired, refresh both tokens   using the refresh token grant type (see :meth:<code>JobbergateAuthHandler.refresh_tokens</code>)</li> <li>If the refresh token is unavailable or expired, login to generate both tokens   (see :meth:<code>JobbergateAuthHandler.login</code>)</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>The bearer access token.</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If all of the steps above fail to acquire a valid access token.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.load_from_cache","title":"load_from_cache","text":"<pre><code>load_from_cache() -&gt; None\n</code></pre> <p>Load the tokens that are available at the cache directory.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.login","title":"login","text":"<pre><code>login() -&gt; None\n</code></pre> <p>Login to Jobbergate.</p> <p>An URL will be printed to the console, the user must open it in a browser and provide their access credentials.</p> <p>After the login is completed, the tokens will be saved to the cache directory.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.logout","title":"logout","text":"<pre><code>logout() -&gt; None\n</code></pre> <p>Logout from Jobbergate by clearing the loaded tokens and their cache on the disk.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.refresh_tokens","title":"refresh_tokens","text":"<pre><code>refresh_tokens() -&gt; None\n</code></pre> <p>Refresh the tokens.</p> <p>After the refresh operation is completed, the tokens will be saved to the cache directory.</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If the refresh token is missing or expired.</p>"},{"location":"reference/core/#jobbergate_core.auth.JobbergateAuthHandler.save_to_cache","title":"save_to_cache","text":"<pre><code>save_to_cache() -&gt; None\n</code></pre> <p>Save the tokens to the cache directory.</p> Note <p>This method will create the cache directory if it does not exist.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token","title":"Token  <code>dataclass</code>","text":"<p>Low-level class used to handling tokens.</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <code>Path</code> <p>The directory used for cache.</p> required <code>label</code> <code>str</code> <p>The type of token.</p> required <code>content</code> <code>str</code> <p>The content of the token (default is <code>\"\"</code>).</p> <code>''</code> <p>Attributes:</p> Name Type Description <code>file_path</code> <code>Path</code> <p>The path to the file associated with the token. It is computed  as <code>&lt;cache_directory&gt;/&lt;label&gt;.token</code>.</p> <code>data</code> <code>Dict[str, Any]</code> <p>Metadata decoded from the token's content are available in this dictionary. Expiration date and permissions are some examples of data that can be found.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.bearer_token","title":"bearer_token  <code>property</code>","text":"<pre><code>bearer_token: str\n</code></pre> <p>Return the token with the <code>Bearer</code> prefix.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> <p>Post init method.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.clear_cache","title":"clear_cache","text":"<pre><code>clear_cache() -&gt; None\n</code></pre> <p>Clear the token from cache by removing the file associated with it.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.is_expired","title":"is_expired","text":"<pre><code>is_expired() -&gt; bool\n</code></pre> <p>Check if the token is expired.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is expired, False otherwise.</p> <p>Raises:</p> Type Description <code>TokenError</code> <p>If the expiration date is not found.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.is_valid","title":"is_valid","text":"<pre><code>is_valid() -&gt; bool\n</code></pre> <p>Verify if the token is valid, i.e., has content and is not expired.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.load_from_cache","title":"load_from_cache","text":"<pre><code>load_from_cache() -&gt; Token\n</code></pre> <p>Load the token from the cache directory.</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <p>The path to the cache directory.</p> required <code>label</code> <p>The type of token.</p> required <p>Returns:</p> Type Description <code>Token</code> <p>A new token with the content replaced.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.replace","title":"replace","text":"<pre><code>replace(**changes) -&gt; Token\n</code></pre> <p>Create a new instance of the token with the changes applied.</p> <p>Other Parameters:</p> Name Type Description <code>content</code> <p>The content of the token.</p> <code>cache_directory</code> <p>The directory containing the cache.</p> <code>label</code> <p>The type of token.</p>"},{"location":"reference/core/#jobbergate_core.auth.Token.save_to_cache","title":"save_to_cache","text":"<pre><code>save_to_cache() -&gt; None\n</code></pre> <p>Save the token to the cache file associated with it.</p> <p>Raises:</p> Type Description <code>TokenError</code> <p>If the parent directory does not exist.</p> <code>TokenError</code> <p>If there is an unknown error while saving the token.</p>"},{"location":"reference/core/#jobbergate_core.auth.TokenError","title":"TokenError","text":"<p>             Bases: <code>AuthenticationError</code></p> <p>Exception for errors related to tokens on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth.TokenType","title":"TokenType","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The types of tokens available in the system are <code>access</code> and <code>refresh</code>.</p>"},{"location":"reference/core/#jobbergate_core.auth.exceptions","title":"exceptions","text":""},{"location":"reference/core/#jobbergate_core.auth.exceptions.AuthenticationError","title":"AuthenticationError","text":"<p>             Bases: <code>Buzz</code></p> <p>Base exception for errors related to authentication on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth.exceptions.TokenError","title":"TokenError","text":"<p>             Bases: <code>AuthenticationError</code></p> <p>Exception for errors related to tokens on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth.handler","title":"handler","text":"<p>Utilities for handling authentication in the Jobbergate system.</p>"},{"location":"reference/core/#jobbergate_core.auth.handler.JobbergateAuthHandler","title":"JobbergateAuthHandler  <code>dataclass</code>","text":"<p>High-level class used to manage authentication to requests to the Jobbergate-API</p> <p>After an instance of this class is created, it can be used to authenticate requests from both <code>requests</code>  and <code>httpx</code> packages by passing it to the <code>auth</code> parameter on the request (see examples below).</p> <p>It just works out of the box. Behind the scenes, this procedure calls the :meth:<code>JobbergateAuthHandler.acquire_access</code> method to load the available tokens from the cache directory, it tries to refresh them if they are expired, or provides an URL to the user to login on the system.</p> <p>Notice all steps above are also available individually as public methods, allowing a fine control for advanced users.</p> <p>.. _requests: https://requests.readthedocs.io/en/latest/ .. _httpx: https://www.python-httpx.org/</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <code>Path</code> <p>Directory to be used for the caching tokens.</p> required <code>login_domain</code> <code>str</code> <p>Domain used for the login.</p> required <code>login_audience</code> <code>str</code> <p>Audience of the login.</p> required <code>login_client_id</code> <code>str</code> <p>Client ID used for login.</p> <code>'default'</code> Note <p>These values depend on the identity provider used for authentication. Consult your system administrator or contact Omnivector support support@omnivector.solutions for further assistance.</p> Note <p>This class can interoperate with the tokens generated by the <code>jobbergate-cli</code> package, as long as they are stored in the same cache directory.</p> <p>Examples:</p> <pre><code>The following example shows how to use the :meth:`JobbergateAuthHandler`\nclass to authenticate a request:\n\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; from jobbergate_core import JobbergateAuthHandler\n&gt;&gt;&gt; jobbergate_auth = JobbergateAuthHandler(\n...     cache_directory=Path(\".\"),\n...     login_domain=\"http://keycloak.local:8080/realms/jobbergate-local\",\n...     login_audience=\"https://local.omnivector.solutions\",\n...     login_client_id=\"cli\",\n... )\n&gt;&gt;&gt; jobbergate_base_url = \"http://localhost:8000/jobbergate\"\n&gt;&gt;&gt; response = requests.get(\n...     f\"{jobbergate_base_url}/applications\",\n...     auth=jobbergate_auth # this is the important part\n)\nLogin Here: http://keycloak.local:8080/realms/jobbergate-local/device?user_code=LMVJ-XOLG\n&gt;&gt;&gt; response.raise_for_status()\n&gt;&gt;&gt; print(f\"response = {response.json()}\")\n</code></pre> __call__ <pre><code>__call__(request)\n</code></pre> <p>This internal method allows the integration with the <code>requests</code> library.</p> <p>It is called automatically when the instance is passed to the <code>auth</code> parameter, see the examples in the class docstring.</p> <p>It adds the <code>Authorization</code> header to the request with the access token.</p> acquire_access <pre><code>acquire_access() -&gt; str\n</code></pre> <p>High-level method to acquire a valid access token.</p> <p>This method will attempt, in order:</p> <ul> <li>Use the internal access token from the instance</li> <li>Load the tokens from the cache directory (see :meth:<code>JobbergateAuthHandler.load_from_cache</code>)</li> <li>If the access token is unavailable or expired, refresh both tokens   using the refresh token grant type (see :meth:<code>JobbergateAuthHandler.refresh_tokens</code>)</li> <li>If the refresh token is unavailable or expired, login to generate both tokens   (see :meth:<code>JobbergateAuthHandler.login</code>)</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>The bearer access token.</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If all of the steps above fail to acquire a valid access token.</p> load_from_cache <pre><code>load_from_cache() -&gt; None\n</code></pre> <p>Load the tokens that are available at the cache directory.</p> login <pre><code>login() -&gt; None\n</code></pre> <p>Login to Jobbergate.</p> <p>An URL will be printed to the console, the user must open it in a browser and provide their access credentials.</p> <p>After the login is completed, the tokens will be saved to the cache directory.</p> logout <pre><code>logout() -&gt; None\n</code></pre> <p>Logout from Jobbergate by clearing the loaded tokens and their cache on the disk.</p> refresh_tokens <pre><code>refresh_tokens() -&gt; None\n</code></pre> <p>Refresh the tokens.</p> <p>After the refresh operation is completed, the tokens will be saved to the cache directory.</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If the refresh token is missing or expired.</p> save_to_cache <pre><code>save_to_cache() -&gt; None\n</code></pre> <p>Save the tokens to the cache directory.</p> Note <p>This method will create the cache directory if it does not exist.</p>"},{"location":"reference/core/#jobbergate_core.auth.token","title":"token","text":"<p>Utilities for handling tokens on Jobbergate.</p>"},{"location":"reference/core/#jobbergate_core.auth.token.Token","title":"Token  <code>dataclass</code>","text":"<p>Low-level class used to handling tokens.</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <code>Path</code> <p>The directory used for cache.</p> required <code>label</code> <code>str</code> <p>The type of token.</p> required <code>content</code> <code>str</code> <p>The content of the token (default is <code>\"\"</code>).</p> <code>''</code> <p>Attributes:</p> Name Type Description <code>file_path</code> <code>Path</code> <p>The path to the file associated with the token. It is computed  as <code>&lt;cache_directory&gt;/&lt;label&gt;.token</code>.</p> <code>data</code> <code>Dict[str, Any]</code> <p>Metadata decoded from the token's content are available in this dictionary. Expiration date and permissions are some examples of data that can be found.</p> bearer_token <code>property</code> <pre><code>bearer_token: str\n</code></pre> <p>Return the token with the <code>Bearer</code> prefix.</p> __post_init__ <pre><code>__post_init__()\n</code></pre> <p>Post init method.</p> clear_cache <pre><code>clear_cache() -&gt; None\n</code></pre> <p>Clear the token from cache by removing the file associated with it.</p> is_expired <pre><code>is_expired() -&gt; bool\n</code></pre> <p>Check if the token is expired.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is expired, False otherwise.</p> <p>Raises:</p> Type Description <code>TokenError</code> <p>If the expiration date is not found.</p> is_valid <pre><code>is_valid() -&gt; bool\n</code></pre> <p>Verify if the token is valid, i.e., has content and is not expired.</p> load_from_cache <pre><code>load_from_cache() -&gt; Token\n</code></pre> <p>Load the token from the cache directory.</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <p>The path to the cache directory.</p> required <code>label</code> <p>The type of token.</p> required <p>Returns:</p> Type Description <code>Token</code> <p>A new token with the content replaced.</p> replace <pre><code>replace(**changes) -&gt; Token\n</code></pre> <p>Create a new instance of the token with the changes applied.</p> <p>Other Parameters:</p> Name Type Description <code>content</code> <p>The content of the token.</p> <code>cache_directory</code> <p>The directory containing the cache.</p> <code>label</code> <p>The type of token.</p> save_to_cache <pre><code>save_to_cache() -&gt; None\n</code></pre> <p>Save the token to the cache file associated with it.</p> <p>Raises:</p> Type Description <code>TokenError</code> <p>If the parent directory does not exist.</p> <code>TokenError</code> <p>If there is an unknown error while saving the token.</p>"},{"location":"reference/core/#jobbergate_core.auth.token.TokenType","title":"TokenType","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The types of tokens available in the system are <code>access</code> and <code>refresh</code>.</p>"},{"location":"reference/core/#jobbergate_core.tools","title":"tools","text":""},{"location":"reference/core/#jobbergate_core.tools.sbatch","title":"sbatch","text":""},{"location":"reference/core/#jobbergate_core.tools.sbatch.InfoHandler","title":"InfoHandler  <code>dataclass</code>","text":"<p>Get info from jobs on the cluster.</p> get_job_info <pre><code>get_job_info(slurm_id: int) -&gt; dict[str, Any]\n</code></pre> <p>Gets job info as the user.</p>"},{"location":"reference/core/#jobbergate_core.tools.sbatch.SubmissionHandler","title":"SubmissionHandler  <code>dataclass</code>","text":"<p>Submits sbatch jobs to the cluster.</p> copy_file_to_submission_directory <pre><code>copy_file_to_submission_directory(\n    source_file: Path,\n) -&gt; Path\n</code></pre> <p>Copies the job file to the submission directory as the user.</p> submit_job <pre><code>submit_job(job_script_path: Path) -&gt; int\n</code></pre> <p>Runs sbatch as the user to submit a job script and returns the slurm id assigned to it.</p>"},{"location":"reference/core/#jobbergate_core.tools.sbatch.inject_sbatch_params","title":"inject_sbatch_params","text":"<pre><code>inject_sbatch_params(\n    job_script_data_as_string: str,\n    sbatch_params: list[str],\n    header: str | None = None,\n) -&gt; str\n</code></pre> <p>Injects sbatch parameters into a job script.</p> <p>This function takes a job script as a string, a list of sbatch parameters, and an optional header.</p> <p>Parameters:</p> Name Type Description Default <code>job_script_data_as_string</code> <code>str</code> <p>The job script as a string.</p> required <code>sbatch_params</code> <code>list[str]</code> <p>A list of sbatch parameters to be inserted.</p> required <code>header</code> <code>str | None</code> <p>A comment to be inserted before the parameters (i.e., \"Injected at runtime by Jobbergate\").</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The job script with the sbatch parameters inserted.</p>"},{"location":"reference/core/#jobbergate_core.version","title":"version","text":"<p>Provide the version of the package.</p>"}]}